<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue组件</title>
      <link href="/posts/dd3b78a2.html"/>
      <url>/posts/dd3b78a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="vue组件的基本使用"><a href="#vue组件的基本使用" class="headerlink" title="vue组件的基本使用"></a>vue组件的基本使用</h2><p>创建一个根组件，在vue3中组件就是一个普通的js对象，组件用来创建组件实例，组件是组件实例的模板</p><blockquote><p>组件 –》组件生成组件实例 –》虚拟DOM –》DOM（在页面中呈现）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;button @click=&#x27;count += 1&#x27;&gt;点我一下&lt;/button&gt;---点了&#123;&#123;count&#125;&#125;下 --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      如果直接将模板定义到网页中，此时模板必须符合html的标签规范--使用小写，</span><br><span class="line">      如果使用自定义组件时，组件名命名为大写则会被转化为小写，组件会失效</span><br><span class="line">      如果模板在根元素与组件中都被定义，则由先使用组件中的template，且根元素中的内容会被全部替换</span><br><span class="line">      一般不会使用这种方法，可以在其他框架迁移到vue（渐进增强）时使用</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建组件模板</span><br><span class="line">    const Root = &#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        //data是一个函数，会返回一个对象作为返回值，vue会对该对象进行代理，将其转换为响应式数据</span><br><span class="line">        return &#123;</span><br><span class="line">          // message: &#x27;vue好棒&#x27;, //data方法返回的对象，其中的属性会自动添加到组件实例中</span><br><span class="line">          count: 0, //data中的数据会自动和使用它的视图进行绑定，数据发生变化，视图自动刷新</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 在模板中可以直接访问组件实例中的属性，通过插值语法，来访问组件实例中的属性</span><br><span class="line">      // template: &quot;&lt;h1&gt;精通vue，&#123;&#123;message&#125;&#125;&lt;/h1&gt;&quot;,</span><br><span class="line">      // template: &quot;&lt;button @click=&#x27;count += 1&#x27;&gt;点我一下&lt;/button&gt;---点了&#123;&#123;count&#125;&#125;下&quot;,</span><br><span class="line">      render(h) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    // 创建组件实例</span><br><span class="line">    const app = Vue.createApp(Root)</span><br><span class="line">    // 挂载组件</span><br><span class="line">    app.mount(&#x27;#root&#x27;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>组件只是用来创建组件实例（vm）的，因为组件要进行复用。</strong>，且data要返回一个对象而不是直接等于一个对象，也是要进一步对组件进行复用，根据不同的组件实例，返回不同的对象</p><p>创建template的三种方式：</p><ul><li><strong>在组件中通过template创建</strong></li><li>直接在网页的根元素中创建</li><li>在组件中通过render()直接渲染</li></ul><p>插值语法<code>&#123;&#123;&#125;&#125;</code>：只能填写表达式（有返回值的）</p></blockquote><h2 id="单文件形式的组件"><a href="#单文件形式的组件" class="headerlink" title="单文件形式的组件"></a>单文件形式的组件</h2><p>template是用字符串的形式在编写模板</p><ul><li>这些字符串会在项目运行时，在浏览器中被编译为js的函数（性能不太好）</li><li>在字符串中编写代码，体验很差</li></ul><p>为解决这个问题，vue提供了一种<strong>单文件组件（SRC）</strong></p><ul><li>单文件组件的格式是vue</li><li>vue文件用来编写单文件组件，vue文件本身并不能被浏览器所识别，因此它需要被构建工具打包后才能使用，在打包的过程中会被打包工具转换成js函数，避免了在浏览器中进行编译</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    console.log(&quot;data--&gt;&quot;, this);</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;hahahah&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><p>组件生命周期从setup开始在vue3中setup代替了vue2中的beforeCreate，和created。</p><ol><li>setup：此阶段开始初始化实例，props解析，计算属性，响应式数据，并设置各种init Options Api</li><li>onBeforeMount：此阶段准备渲染dom</li><li>onMounted：dom渲染完毕，组件挂载完毕（不包括异步组件）</li><li>onBeforeUpdate：在组件因响应式更新之前访问dom状态，在这个钩子中更改状态也是安全的。</li><li>onUpdate：在组件因响应式更新后调用</li><li>onBeforeUnmount：在组件实例被销毁之前调用，此时组件实例依然用全部的功能</li><li>onRenderTracked：收集响应式依赖</li><li>onRenderTriggered： 触发响应式依赖</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// A组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;div&quot;&gt;我是A组件，哈哈哈哈, &#123;&#123;str&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onBeforeMount, onBeforeUnmount, onBeforeUpdate, onMounted, onRenderTracked, onRenderTriggered, onUnmounted, onUpdated, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const str = ref&lt;string&gt;(&#x27;张三&#x27;);</span><br><span class="line">const div = ref&lt;HTMLDivElement&gt;();</span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  str.value = &#x27;李四&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建</span><br><span class="line">onBeforeMount(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;挂载之前====&gt;&#x27;, div.value);</span><br><span class="line">&#125;)</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;挂载完成====&gt;&#x27;, div.value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新</span><br><span class="line">onBeforeUpdate(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;更新之前====&gt;&#x27;, div.value?.innerText);</span><br><span class="line">&#125;)</span><br><span class="line">onUpdated(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;更新完成====&gt;&#x27;, div.value?.innerText);</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"> // 销毁</span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;销毁之前====&gt;&#x27;,);</span><br><span class="line">&#125;)</span><br><span class="line">onUnmounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;销毁完成====&gt;&#x27;,);</span><br><span class="line">&#125;)</span><br><span class="line">// 在setup中没有 beforeCreate created 这两个生命周期</span><br><span class="line">console.log(&#x27;setup&#x27;);</span><br><span class="line"></span><br><span class="line">// 调试</span><br><span class="line">onRenderTriggered((e) =&gt; &#123;</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;)</span><br><span class="line">onRenderTracked((e) =&gt; &#123;</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// App组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;div&quot;&gt;</span><br><span class="line">    &lt;h1&gt;生命周期&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;A v-if=&quot;flag&quot;&gt;&lt;/A&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;flag = !flag&quot;&gt;创建-销毁&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import A from &#x27;./components/A.vue&#x27;</span><br><span class="line">const flag = ref&lt;boolean&gt;(true)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png"></p><h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue中的代理模式</span></span><br><span class="line"><span class="comment">// 创建obj对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为obj对象创建一个代理</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123; <span class="comment">//handler 用来指定代理的行为，指定代理行为后，对象属性的修改和读取行为，实质上是在调用方法</span></span><br><span class="line">  <span class="comment">// get用来指定读取数据时的行为，它的返回值就是最终读取到的值</span></span><br><span class="line">  <span class="comment">// 指定get后，在通过代理读取对象属性时，就会调用get方法来获取值</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, prop, receiver</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(args);</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      三个参数：</span></span><br><span class="line"><span class="comment">        target -- 被代理的对象</span></span><br><span class="line"><span class="comment">        prop -- 读取的属性</span></span><br><span class="line"><span class="comment">        receiver -- 代理对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="comment">// 在vue中，data() 返回的的对象会被vue所代理</span></span><br><span class="line">  <span class="comment">// vue代理后，当我们通过代理去读取属性时，返回值之前，vue会先进行跟踪</span></span><br><span class="line">  <span class="comment">// track()  跟踪谁用了这个属性</span></span><br><span class="line">    <span class="comment">// return &quot;haha&quot;</span></span><br><span class="line">    <span class="keyword">return</span> target[prop];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指定set后，在通过代理修改对象时，会调用set方法</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, prop, value, receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target[prop] = value;</span><br><span class="line">    <span class="comment">// 当我们通过代理去修改属性时，修改后，会通知之前所有用到该值的位置进行更新</span></span><br><span class="line">    <span class="comment">// trigger() 触发所有使用了该值得位置进行更新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理</span></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler); <span class="comment">//设置代理时不会对原对象产生影响</span></span><br><span class="line"><span class="comment">// 修改代理的属性</span></span><br><span class="line">proxy.<span class="property">age</span>= <span class="number">28</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">name</span>, proxy.<span class="property">age</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><h3 id="代理对象"><a href="#代理对象" class="headerlink" title="代理对象"></a>代理对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//该函数会在组件创建完毕后调用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$data</span>.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span>; <span class="comment">//使name属性变成响应式数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>vm.$data</code>是实际的代理对象，通过vm可以直接访问到$data中的属性，通过<code>vm.$data</code>可以动态的向组件中添加响应式数据，但是不建议这么做，容易造成数据混乱，一般还是通过对象返回</p></blockquote><h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>子组件中的数据不会通常不会在子组件中直接定义，这样会导致数据和视图产生耦合，子组件中的数据一般会在创建组件实例时确定，父组件可以通过<code>defineProps</code>来将数据传递给子组件</p><p>使用：</p><ul><li>在子组件中定义props：<code>defineProps()</code>（宏指令）</li></ul><p>注意：</p><ul><li>父组件传递子组件的数据是单向流动的，对子组件来说，父组件传递的数据只是可读的，不能进行修改，保障了数据的安全性（大部分框架，修改数据的地方一般只能存在于某一个组件中，不会存在多个组件都可以对数据进行修改）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//父组件App</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import MyBoxVue from &#x27;./components/MyBox.vue&#x27;;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const count = ref(0);</span><br><span class="line">const obj = ref(&#123;</span><br><span class="line">  count: 0,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;我是App的根组件&lt;/h1&gt;</span><br><span class="line">  &lt;MyBoxVue :count=&quot;count&quot; :obj=&quot;obj&quot;/&gt;</span><br><span class="line">  &lt;button @click=&quot;obj.count++&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//子组件MyBox</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"> const props = defineProps([&#x27;count&#x27;, &#x27;obj&#x27;])</span><br><span class="line"> console.log(props);  // 在代码中访问父组件传递的值，要通过props来接受definePropos的返回值</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是MyBox子组件&#123;&#123; props.obj.count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 父组件传递给子组件的props都是只读的，无法修改 --&gt;</span><br><span class="line">    &lt;!-- &lt;button @click=&quot;props.count++&quot;&gt;MyBox的按钮&lt;/button&gt; 不能修改 --&gt;</span><br><span class="line">    &lt;!-- props 类似 const 只对重新赋值进行锁定--&gt;</span><br><span class="line">    &lt;!-- &lt;button @click=&quot;props.obj = &#123;count: 10&#125;&quot;&gt;MyBox的按钮&lt;/button&gt; 不能修改 --&gt;</span><br><span class="line">    &lt;!-- count++ 只是对对象obj的属性count进行了修改，并没有对，对象重新赋值 ，因此可以这种方式可以修改，但是尽量不用--&gt;</span><br><span class="line">    &lt;button @click=&quot;props.obj.count++&quot;&gt;MyBox的按钮&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  color: tomato;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>props的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// props简单配置</span></span><br><span class="line"><span class="comment">// const props = defineProps([&#x27;count&#x27;, &#x27;obj&#x27;]);</span></span><br><span class="line"><span class="comment">// props完整配置</span></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 定义传递数据的类型</span></span><br><span class="line">  <span class="attr">count</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">obj</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">isCheck</span>: <span class="title class_">Boolean</span>, <span class="comment">//有则为true，没有则为false</span></span><br><span class="line">  <span class="title class_">MaxLength</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">    <span class="attr">require</span>: <span class="literal">true</span>, <span class="comment">//必须要传值</span></span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="comment">//默认值</span></span><br><span class="line">    <span class="comment">// 检查值</span></span><br><span class="line">    <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value !== <span class="string">&#x27;xixi&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在ts中使用<code>defineProps</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 父组件App</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;AVue :str=&quot;name&quot; :arr=&quot;[1, 2, 3]&quot;&gt;&lt;/AVue&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import AVue from &#x27;./components/A.vue&#x27;;</span><br><span class="line">let name = &#x27;张三&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 子组件A</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    下面是子组件：</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    父组件传递的值：</span><br><span class="line">    &lt;div&gt;&#123;&#123; str &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; arr &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">withDefaults(defineProps&lt;&#123;</span><br><span class="line">  str:string,</span><br><span class="line">  arr:number[],</span><br><span class="line">&#125;&gt;(), &#123;</span><br><span class="line">  // 默认值，在ts中如果为引用类型则需要通过函数形式返回，来防止引用</span><br><span class="line">  arr: () =&gt; [666],</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>使用：</p><ul><li>在子组件中定义emit：通过<code>defineProps</code>给父组件传值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//父组件App</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;AVue @on-click=&quot;getName&quot;&gt;&lt;/AVue&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import AVue from &#x27;./components/A.vue&#x27;;</span><br><span class="line">const getName = (name:string, age:number) =&gt; &#123;</span><br><span class="line">  console.log(name, age, &#x27;====我是父组件，我收到了&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 子组件A</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    下面是子组件：</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;send&quot;&gt;给父组件传值&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">// const emit = defineEmits([&#x27;on-click&#x27;]);</span><br><span class="line">// ts形式</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e:&#x27;on-click&#x27;, name:string, age:number):void</span><br><span class="line">&#125;&gt;()</span><br><span class="line">// 把值/事件派发给父组件</span><br><span class="line">const send = () =&gt; &#123;</span><br><span class="line">  emit(&#x27;on-click&#x27;, &#x27;张三&#x27;, 12)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="暴露"><a href="#暴露" class="headerlink" title="暴露"></a>暴露</h3><p>通过<code>defineExpose</code>来暴露组件中的值或方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//子组件A</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    下面是子组件：</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  name: &#x27;张三&#x27;,</span><br><span class="line">  fn: () =&gt; console.log(123),</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//父组件App</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line"> // 通过ref获取A组件的实例</span><br><span class="line">  &lt;AVue ref=&quot;A&quot;&gt;&lt;/AVue&gt;</span><br><span class="line">  &lt;button @click=&quot;show&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import AVue from &#x27;./components/A.vue&#x27;;</span><br><span class="line">const A = ref&lt;InstanceType&lt;typeof AVue&gt;&gt;();</span><br><span class="line">const show= () =&gt; &#123;</span><br><span class="line">  console.log(A.value?.name, A.value?.fn());</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="provide"><a href="#provide" class="headerlink" title="provide"></a>provide</h3><p>在父组件中定义的值通过provide（依赖注入）可以在所有的子，孙组件中通过inject读取使用</p><p>参数：</p><ol><li>key：定义注入的值的名字，通过inject读取时要使用key来读取</li><li>value：注入的值，可以通过readonly来设置只读，禁止子组件修改</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 子孙组件B</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;provideBVue(子孙级别)&lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;pink&lt;/button&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; inject, Ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const color = inject&lt;Ref&lt;string&gt;&gt;(&#x27;color&#x27;);</span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  color.value = &#x27;pink&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 父亲组件A</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;provideAVue(父亲级别)&lt;/h2&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;hr&gt;</span><br><span class="line">  &lt;provideBVue&gt;&lt;/provideBVue&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; inject, Ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import provideBVue from &#x27;./B.vue&#x27;</span><br><span class="line">const color = inject&lt;Ref&lt;string&gt;&gt;(&#x27;color&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 祖先组件App</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;App.vue(祖先级别)&lt;/h1&gt;</span><br><span class="line">    &lt;label&gt;&lt;input v-model=&quot;colorVal&quot; value=&quot;red&quot; name=&quot;color&quot; type=&quot;radio&quot;&gt;红色&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input v-model=&quot;colorVal&quot; value=&quot;yellow&quot; name=&quot;color&quot; type=&quot;radio&quot;&gt;黄色&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input v-model=&quot;colorVal&quot; value=&quot;blue&quot; name=&quot;color&quot; type=&quot;radio&quot;&gt;蓝色&lt;/label&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;hr&gt;</span><br><span class="line">    &lt;provideAVue&gt;&lt;/provideAVue&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import provideAVue from &#x27;../Content/A.vue&#x27;;</span><br><span class="line">import &#123; provide, readonly, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const colorVal = ref&lt;string&gt;(&#x27;red&#x27;);</span><br><span class="line">provide(&#x27;color&#x27;, readonly(colorVal))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="各种组件功能"><a href="#各种组件功能" class="headerlink" title="各种组件功能"></a>各种组件功能</h2><h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><p>如果一个组件使用频率非常高，就可以把这个组件定义为全局组件。</p><p>使用：</p><ul><li>全局组件需要在入口文件<code>main.js</code>中进行引入</li><li>通过根组件<code>App.vue</code>的实例的，方法<code>component</code>定义全局组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main 入口文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AVue</span> <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">// 定义全局组件名字为A</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;A&#x27;</span>, <span class="title class_">AVue</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// A 组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我是全局组件A&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// App 根组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;A&gt;&lt;/A&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// import AVue from &#x27;./components/A.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h3><p>当一个组件要接收未知数量的值时，可以将该组件定义成递归组件</p><p>用法：</p><ul><li>确定递归组件的名字<ol><li>在vue3中可以直接使用文件名来当做递归组件的名字</li><li>在创建一个<code>script</code>标签，来自定义递归组件的名字</li><li>使用第三方插件</li></ol></li></ul><blockquote><p>在递归组件中，可以通过<code>$event</code>来传递事件对象，递归组件会触发冒泡，可以通过事件修饰符stop来阻止冒泡</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// App 组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;AVue :data1=&quot;data&quot;&gt;&lt;/AVue&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">import AVue from &#x27;./components/A.vue&#x27;;</span><br><span class="line">interface Tree &#123;</span><br><span class="line">  name:string,</span><br><span class="line">  checked:boolean,</span><br><span class="line">  children?:Tree[];</span><br><span class="line">&#125;</span><br><span class="line">const data = reactive&lt;Tree[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;1&#x27;,</span><br><span class="line">    checked: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;2&#x27;,</span><br><span class="line">    checked: true,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &#x27;2.1&#x27;,</span><br><span class="line">        checked: false,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &#x27;2.1.1&#x27;,</span><br><span class="line">            checked: true,</span><br><span class="line">          &#125;]&#125;]&#125;,</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// A组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click.stop=&quot;click(item, $event)&quot; v-for=&quot;item in data1&quot; class=&quot;tree&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;item.checked&quot;&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; item.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;!-- 在vue3中可以直接使用文件名作为递归组件的名字 --&gt;</span><br><span class="line">    &lt;!-- &lt;A v-if=&quot;item?.children?.length&quot; :data1=&quot;item?.children&quot;&gt;&lt;/A&gt; --&gt;</span><br><span class="line">    &lt;zs v-if=&quot;item?.children?.length&quot; :data1=&quot;item?.children&quot;&gt;&lt;/zs&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">interface Tree &#123;</span><br><span class="line">  name:string,</span><br><span class="line">  checked:boolean,</span><br><span class="line">  children?:Tree[],</span><br><span class="line">&#125;</span><br><span class="line">const props = defineProps&lt;&#123;data1?:Tree[]&#125;&gt;();</span><br><span class="line">const click = (item:Tree, e) =&gt; &#123;</span><br><span class="line">  console.log(item);</span><br><span class="line">  console.log(e.target);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  // 定义递归组件名字的第二种方式</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;zs&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p><code>component</code>是一个动态组件，通过<code>is</code>属性来决定最终以什么标签呈现。</p><p> 使用动态组件（component）进行切换时，会造成一些不必要的性能浪费 如：</p><p>  Vue received a Component which was made a reactive object.</p><p>  This can lead to unnecessary performance overhead,</p><p>  and should be avoided by marking the component with <code>markRaw</code> or using <code>shallowRef</code> instead of <code>ref</code>.</p><p>  Vue接收到一个组件，该组件是一个响应式对象。这可能会导致不必要的性能开销，</p><p>  应该通过使用’ markRaw ‘标记组件或使用’ shallowRef ‘而不是’ ref ‘来避免。</p><p> 优化：</p><ul><li><p><code>markRaw</code>: 跳过跟踪，会有一个<code>__v_skip</code>属性</p></li><li><p><code>shallowRef</code>: 浅层响应，深层对象不会被proxy代理</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;display: flex&quot;&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item, index) in data&quot; class=&quot;tabs&quot; @click=&quot;change(item, index)&quot;</span><br><span class="line">      :class=&quot;active === index ? &#x27;show&#x27; : &#x27;&#x27;&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; item.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;component :is=&quot;comId&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; markRaw, reactive, ref, shallowRef &#125; from &#x27;vue&#x27;;</span><br><span class="line">import AVue from &#x27;./components/A.vue&#x27;;</span><br><span class="line">import BVue from &#x27;./components/B.vue&#x27;;</span><br><span class="line">const comId = shallowRef(AVue);</span><br><span class="line">const active = ref(0);</span><br><span class="line">const data = reactive([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;A组件&#x27;,</span><br><span class="line">    // com: AVue,</span><br><span class="line">    // com: markRaw(AVue),</span><br><span class="line">      com: &#x27;AVue&#x27; // 第二种方式</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;B组件&#x27;,</span><br><span class="line">    // com: BVue,</span><br><span class="line">    // com: markRaw(BVue),</span><br><span class="line">    com: &#x27;BVue&#x27;, // 第二种方式</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">const change = (item, index) =&gt; &#123;</span><br><span class="line">  comId.value = item.com;</span><br><span class="line">  active.value = index;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">// 第二种方式，通过字符串的形式</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  import AVue from &#x27;./components/A.vue&#x27;;</span><br><span class="line">  import BVue from &#x27;./components/B.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    AVue,</span><br><span class="line">    BVue,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在第二个script的标签中，通过components来注册组件，组件名通过字符串的形式书写，就不用再用markRaw来跳过追踪了。</p></blockquote><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>使用：</p><ul><li><p>使用axios来请求组件数据</p></li><li><p>异步组件通过<code>defineAsyncComponent</code>来进行引入，它接收一个回调函数，以import函数引入异步组件路径</p></li><li><p>使用<code>Suspense</code>标签来使用异步组件，它包含两个插槽，<code>#default</code>用于展示异步组件。<code>#fallback</code>用于展示异步组件还没响应时的内容。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;sync&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;content-top&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;img :src=&quot;data.url&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;sync-pop&quot;&gt;</span><br><span class="line">          &lt;p&gt;&#123;&#123;data.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;&#123;&#123;data.age&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      &lt;p class=&quot;content-bottom&quot;&gt;&#123;&#123;data.desc&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; axios &#125; from &#x27;../../server/axios&#x27;;</span><br><span class="line">interface Data &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: string,</span><br><span class="line">    age: number,</span><br><span class="line">    url: string,</span><br><span class="line">    desc: string,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 顶层await， 之后的代码都会成为异步</span><br><span class="line">const &#123; data &#125; = await axios.get&lt;Data&gt;(&#x27;./data.json&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 使用Suspense标签来使用异步组件 --&gt;</span><br><span class="line">  &lt;Suspense&gt;</span><br><span class="line">    &lt;template #default&gt;</span><br><span class="line">      &lt;sync&gt;&lt;/sync&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #fallback&gt;</span><br><span class="line">      &lt;skeletonVue&gt;&lt;/skeletonVue&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;;</span><br><span class="line">import skeletonVue from &#x27;../Content/skeleton.vue&#x27;;</span><br><span class="line">// 使用defineAsyncComponent 来引入异步组件，</span><br><span class="line">const sync = defineAsyncComponent(() =&gt; import(&#x27;../Content/sync.vue&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="传送组件"><a href="#传送组件" class="headerlink" title="传送组件"></a>传送组件</h3><p><code>Teleport</code>：组件可以将指定的组件传送到任意的dom节点。</p><p>属性：</p><ul><li><code>to</code>：必选，指定传送的dom节点</li><li><code>disabled</code>：默认值：false，为true时to属性失效</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;a&quot;&gt;</span><br><span class="line">      我是弹窗</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">    &lt;h1&gt;我是父组件&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">    &lt;Teleport :disabled= tep to=&quot;body&quot;&gt;</span><br><span class="line">      &lt;A&gt;&lt;/A&gt;</span><br><span class="line">    &lt;/Teleport&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import A from &#x27;../Content/A.vue&#x27;</span><br><span class="line">let tep = ref&lt;boolean&gt;(true);</span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  tep.value = !tep.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="缓存组件"><a href="#缓存组件" class="headerlink" title="缓存组件"></a>缓存组件</h3><p><code>keep-alive</code>：缓存组件实例，使其不被卸载、销毁。</p><p>使用：</p><ul><li>使用<code>keep-alive</code>标签包裹组件，组件会自动缓存</li><li>属性：<ol><li>include：只缓存指定的组件</li><li>exclude：不缓存指定的组件</li><li>max：最多缓存几个组件，超出这个数量，会对不活跃，比较旧的组件进行卸载</li></ol></li></ul><p>使用keep-alive，会新增两个生命周期：onActivated，onDeactivated，</p><ul><li>onActivated：当缓存的组件重新被使用，则会触发该生命周期，表示keep-alive激活，此时不会再触发onMount（只会在一开始触发一次），当组件不在使用，则触发onDeactivated。</li><li>onDeactivated：当组件不在使用，则触发onDeactivated，此时不会触发onUnmount，因为keep-alive已经对组件进行了缓存，当组件重新使用则触发onActivated</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 子组件 A</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我是a组件&lt;/h1&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; onMounted, onActivated, onDeactivated, onUnmounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line">  name: &#x27;A&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;挂载完成&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">onActivated(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;keep-alive，激活完成&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">onDeactivated(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;keep-alive，卸载完成&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">onUnmounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;卸载完成&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 子组件 B</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我是b组件&lt;/h1&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">defineOptions(&#123;</span><br><span class="line">  name: &#x27;B&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;点击切换组件&lt;/button&gt;</span><br><span class="line">    &lt;keep-alive :include=&quot;[&#x27;A&#x27;]&quot; :exclude=&quot;[&#x27;B&#x27;]&quot; :max=&quot;11&quot;&gt;</span><br><span class="line">      &lt;AVue v-if=&quot;flag&quot;&gt;&lt;/AVue&gt;</span><br><span class="line">      &lt;BVue v-else&gt;&lt;/BVue&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123;ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import AVue from &#x27;../Content/A.vue&#x27;;</span><br><span class="line">import BVue from &#x27;../Content/B.vue&#x27;;</span><br><span class="line">let flag = ref&lt;boolean&gt;(true);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="过渡组件"><a href="#过渡组件" class="headerlink" title="过渡组件"></a>过渡组件</h3><p><code>transition</code>过渡组件，用于添加元素的过渡效果</p><p>属性：</p><ul><li>name：定义css类名，默认为：<code>v</code></li><li>appear：在页面加载时，执行一次动画，切换时不会执行</li><li>duration：定义过渡的时间，可以写成对象的形式，为enter和leave分别设置过渡时间，也可以写成字符串，统一定义过渡时间</li><li>enter，leavecss类名的别</li><li>tag：定义transiton组件中的内容，要被哪种元素包裹</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">    &lt;transition name=&quot;fade&quot; :duration=&quot;&#123;enter: 600, leave: 1000&#125;&quot;</span><br><span class="line">      enter-active-class=&quot;animate__animated animate__lightSpeedInRight&quot;</span><br><span class="line">      leave-active-class=&quot;animate__animated animate__flip&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#x27;animate.css&#x27;</span><br><span class="line">const flag = ref&lt;boolean&gt;(true);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.content &#123;</span><br><span class="line">  width: 800px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  border: 5px solid yellowgreen;    </span><br><span class="line">  .box &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: #bfa;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  // .fade-enter-from &#123;</span><br><span class="line">  //   width: 0;</span><br><span class="line">  //   height: 0;</span><br><span class="line">  //   transform: rotate(360deg);</span><br><span class="line">  // &#125;</span><br><span class="line">  // .fade-enter-active &#123;</span><br><span class="line">  //   transition: all 1.5s ease;</span><br><span class="line">  // &#125;</span><br><span class="line">  // .fade-enter-to &#123;</span><br><span class="line">  //   background-color: aqua;</span><br><span class="line">  //   // transform: scale(2)</span><br><span class="line">  // &#125;</span><br><span class="line">  // .fade-leave-from &#123;</span><br><span class="line">  //   transform: rotate(360deg);</span><br><span class="line">  //   background-color: aqua;</span><br><span class="line">  // &#125;</span><br><span class="line">  // .fade-leave-active &#123;</span><br><span class="line">  //   transition: all 2s ease-in-out;</span><br><span class="line">  // &#125;</span><br><span class="line">  // .fade-leave-to &#123;</span><br><span class="line">  //   width: 0;</span><br><span class="line">  //   height: 0;</span><br><span class="line">  // &#125;</span><br><span class="line">&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h4><p>transition组件的生命周期有八个：</p><ol><li>@before-enter：进入之前，被插入Dom之前</li><li>@enter：被插入Dom后开始执行动画效果，参数done函数，会在动画完成时执行</li><li>@after-enter：过渡结束</li><li>@enter-cancelled：过渡动画被打断</li><li>@before-leave：离开之前，元素被隐藏或删除时执行</li><li>@leave：离开动画</li><li>@after-leave：离开完成，只会在元素从Dom中删除时（v-if）执行，（v-show）隐藏则不会执行</li><li>@leave-cancelled：离开动画被打断，只会在元素被隐藏时（v-show）执行，删除则不会</li></ol><p>可以配合一些动画库进行切换如：<a href="https://animate.style/%EF%BC%8Chttps://greensock.com/%E3%80%82">https://animate.style/，https://greensock.com/。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">    &lt;transition :duration=&quot;&#123;enter: 600, leave: 1000&#125;&quot;</span><br><span class="line">      enter-active-class=&quot;animate__animated animate__lightSpeedInRight&quot;</span><br><span class="line">      leave-active-class=&quot;animate__animated animate__flip&quot;</span><br><span class="line">      @before-enter=&quot;EnterFrom&quot;</span><br><span class="line">      @enter=&quot;EnterActive&quot;</span><br><span class="line">      @after-enter=&quot;EnterTo&quot;</span><br><span class="line">      @enter-cancelled=&quot;EnterCancel&quot;</span><br><span class="line">      @before-leave=&quot;LeaveFrom&quot;</span><br><span class="line">      @leave=&quot;LeaveActive&quot;</span><br><span class="line">      @after-leave=&quot;LeaveTo&quot;</span><br><span class="line">      @leave-cancelled=&quot;LeaveCancel&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div v-show=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#x27;animate.css&#x27;</span><br><span class="line">const flag = ref&lt;boolean&gt;(true);</span><br><span class="line">const EnterFrom = (el:Element) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;进入之前&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">const EnterActive = (el:Element, done:Function) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;进入动画&#x27;);</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    done()</span><br><span class="line">  &#125;, 3000)</span><br><span class="line">&#125;</span><br><span class="line">const EnterTo = (el:Element) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;进去完成&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">const EnterCancel = (el:Element) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;进入动画被打断&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">const LeaveFrom = (el:Element) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;离开之前&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">const LeaveActive = (el:Element, done:Function) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;离开动画&#x27;);</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    done()</span><br><span class="line">  &#125;, 4000)</span><br><span class="line">&#125;</span><br><span class="line">const LeaveTo = (el:Element) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;离开完成&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">const LeaveCancel = (el:Element) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;离开动画被打断&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="transition-group"><a href="#transition-group" class="headerlink" title="transition-group"></a>transition-group</h4><p>用于列表（循环遍历）的过渡，属性与transition一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;Add&lt;/button&gt; &lt;button @click=&quot;pop&quot;&gt;Pop&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;warp&quot;&gt;</span><br><span class="line">      &lt;transition-group enter-active-class=&quot;animate__animated animate__fadeOutUp&quot;</span><br><span class="line">        leave-active-class=&quot;animate__animated animate__hinge&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot; :key=&quot;item&quot; v-for=&quot;item in list&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/transition-group&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#x27;animate.css&#x27;;</span><br><span class="line">const list = reactive&lt;number[]&gt;([1, 2, 3, 4, 5, 6])</span><br><span class="line">const add = () =&gt; &#123;</span><br><span class="line">  list.push(list.length + 1)</span><br><span class="line">&#125;</span><br><span class="line">const pop = () =&gt; &#123;</span><br><span class="line">  list.pop()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>平面过渡：数组中元素位置发生变化的过渡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;random&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">    &lt;transition-group move-class=&quot;move&quot; tag=&quot;div&quot; class=&quot;warp&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;item&quot; v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.number &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">//使用new Array会生成包含81个empty无意义的元素的数组，而使用Array.apply会生成包含81个undefined元素的数组</span><br><span class="line">let list = ref(Array.apply(null, &#123; length: 81 &#125; as number[]).map((_, index) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    id: index,</span><br><span class="line">    number: (index % 9) + 1,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br><span class="line">const random = () =&gt; &#123;</span><br><span class="line">  list.value = list.value.sort(() =&gt; &#123;</span><br><span class="line">    return Math.random() - 0.5</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>状态过渡：一个数字从旧值变化到新值的过渡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;num.current&quot; step=&quot;20&quot; type=&quot;number&quot;&gt;</span><br><span class="line">    &lt;!-- toFixed去除小数位数字 --&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; num.tweenedNumber.toFixed(0) &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive, ref, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line">import gsap from &#x27;gsap&#x27;;</span><br><span class="line">const num = reactive(&#123;</span><br><span class="line">  current: 0,</span><br><span class="line">  tweenedNumber: 0,</span><br><span class="line">&#125;)</span><br><span class="line">watch(() =&gt; num.current, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  gsap.to(num, &#123;</span><br><span class="line">    direction:1,</span><br><span class="line">    tweenedNumber: newValue,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>使用：</p><ul><li>通过<code>slot</code>标签作为插槽内容的出口，<code>v-slot</code>指令作为标识，（可简写为<code>#</code>，匿名插槽要简写成<code>#default</code>）</li></ul><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>在组件的标签之间没有任何内容时，默认插槽会为组件填充一些默认的内容来显示，当组件标签之间有内容时，默认插槽的内容会被覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// A 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;warp&quot;&gt;</span><br><span class="line">    &lt;slot&gt;默认插槽&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// App 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;content&gt;&lt;/content&gt;</span><br><span class="line">    &lt;content&gt;标签之间有内容组会覆盖插槽里的内容&lt;/content&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>除了默认插槽外，<code>slot</code>标签还可以添加一个<code>name</code>属性配合<code>v-slot</code>指令，来指定特定的插槽出口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;warp&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;content&gt;</span><br><span class="line">      &lt;template #default&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          我是匿名插槽main, &amp;nbsp;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">// 将此模板插入到，name属性为header的插槽中</span><br><span class="line">      &lt;template #header&gt; </span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          我是具名插槽header</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #footer&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          我是具名插槽footer</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/content&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><p>匿名插槽是没有指定name属性的具名插槽，当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的没有被<code>&lt;template&gt;</code> 标签包裹的，都会被隐式地视为默认插槽的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;warp&quot;&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;content&gt;</span><br><span class="line">      &lt;template #header&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          我是匿名插槽main</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/content&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="插槽作用域"><a href="#插槽作用域" class="headerlink" title="插槽作用域"></a>插槽作用域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;warp&quot;&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;div v-for=&quot;(item, index) in data&quot;&gt;</span><br><span class="line">        &lt;slot :data=&quot;item&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">type names = &#123;</span><br><span class="line">  name:string,</span><br><span class="line">  age:number,</span><br><span class="line">&#125;</span><br><span class="line">const data = reactive&lt;names[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;插槽作用域1&#x27;,</span><br><span class="line">    age: 12,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#x27;插槽作用域2&#x27;,</span><br><span class="line">    age: 22,</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;content&gt;</span><br><span class="line">      &lt;template #default=&quot;&#123;data, index&#125;&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          我是匿名插槽main, &amp;nbsp;</span><br><span class="line">          &#123;&#123; data.name &#125;&#125;--&#123;&#123; data.age &#125;&#125;--&#123;&#123; index &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/content&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="动态插槽"><a href="#动态插槽" class="headerlink" title="动态插槽"></a>动态插槽</h3><p>动态插槽就是为<code>v-slot</code>指定一个变量，可以动态的指定插槽的出口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;warp&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;slot name=&quot;main&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;content&gt;</span><br><span class="line">      &lt;template #[name]]&gt;</span><br><span class="line">        &lt;div&gt;猜猜我在哪&lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/content&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import content from &#x27;../Content/index.vue&#x27;</span><br><span class="line">let name = &#x27;header&#x27; // 动态的指定插槽出口</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件中的属性</title>
      <link href="/posts/587e1325.html"/>
      <url>/posts/587e1325.html</url>
      
        <content type="html"><![CDATA[<h1 id="组件中的属性"><a href="#组件中的属性" class="headerlink" title="组件中的属性"></a>组件中的属性</h1><h2 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data"></a>组件中的data</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//MyButton组件</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const obj = &#123;</span><br><span class="line">  count: 0,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0, // 通过data函数内部返回的对象，每次函数被调用，组件实例都会创建一个全新的对象，</span><br><span class="line">                  // 因此各个组件之间相互独立，其中一个发生变化，不会影响整体</span><br><span class="line">    &#125;</span><br><span class="line">    // return obj; //返回一个外部对象，每次函数被调用，组件实例创建的都是同一个obj对象</span><br><span class="line">                // ，虽然创建了四个组件实例，生成了四个不同的代理对象，但是都是obj对象</span><br><span class="line">                // 的代理，其中一个发生变化整体都会改变</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//App组件</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyButton from &#x27;./components/MyButton.vue&#x27;;</span><br><span class="line">import &#123; shallowReactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    console.log(&quot;data--&gt;&quot;, this);</span><br><span class="line">    // 直接向组件实例中添加的属性不会被vue所代理，因此不是响应式数据，修改后页面不会发生变化</span><br><span class="line">    // return &#123;</span><br><span class="line">    //   // msg: &#x27;hahahah&#x27;,</span><br><span class="line">    //   // stu: &#123;</span><br><span class="line">    //   //   // 深层响应式对象：vue在构建响应式对象时，会遍历该对象下的属性（对象），也会进行代理使其成为响应式</span><br><span class="line">    //   //   name: &quot;张三&quot;,</span><br><span class="line">    //   //   age: 24,</span><br><span class="line">    //   //   gender: &quot;男&quot;,</span><br><span class="line">    //   //   girlFriend: &#123;</span><br><span class="line">    //   //     name: &quot;李四&quot;,</span><br><span class="line">    //   //     age: 25,</span><br><span class="line">    //   //     gender: &quot;女&quot;</span><br><span class="line">    //   //   &#125;</span><br><span class="line">    //   // &#125;</span><br><span class="line">      // hello: null,</span><br><span class="line">    // &#125;</span><br><span class="line">    return shallowReactive(&#123; //浅层响应式对象：通过shallowReactive函数进行包装，</span><br><span class="line">      msg: &#x27;hahahah&#x27;,</span><br><span class="line">      stu: &#123; //通过stu.name 修改属性后页面不会改变</span><br><span class="line">        // vue在构建响应式对象时，会遍历该对象下的属性（对象），也会进行代理使其成为响应式</span><br><span class="line">        name: &quot;张三&quot;,</span><br><span class="line">        age: 24,</span><br><span class="line">        gender: &quot;男&quot;,</span><br><span class="line">        girlFriend: &#123;</span><br><span class="line">          name: &quot;李四&quot;,</span><br><span class="line">          age: 25,</span><br><span class="line">          gender: &quot;女&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;，</span><br><span class="line">      arr: [&#x27;张三&#x27;, &#x27;李四&#x27;]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyButton</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; stu.name &#125;&#125; -- &#123;&#123; stu.age &#125;&#125; -- &#123;&#123; stu.gender &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; stu.girlFriend.name &#125;&#125; -- &#123;&#123; stu.girlFriend.age &#125;&#125; -- &#123;&#123; stu.girlFriend.gender &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;hello&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;arr[0]&#125;&#125;--&#123;&#123;arr[1]&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;MyButton&gt;&lt;/MyButton&gt;</span><br><span class="line">  &lt;MyButton&gt;&lt;/MyButton&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在vue3中数组可以直接通过索引进行修改，vue3中的响应式基于代理模式，可以对数据进行跟踪</p></blockquote><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;hahahh&quot;,</span><br><span class="line">      stu: &#123;</span><br><span class="line">        name: &quot;瑞克&quot;,</span><br><span class="line">        age: 18,</span><br><span class="line">        gender: &quot;男&quot;</span><br><span class="line">      &#125;</span><br><span class="line">      lastName: &quot;三&quot;,</span><br><span class="line">      firstName: &quot;张&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateAge() &#123;</span><br><span class="line">      if(this.stu.age === 18) &#123;</span><br><span class="line">        this.stu.age = 17</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        this.stu.age = 18</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getInfo() &#123;</span><br><span class="line">      console.log(&quot;getInfo调用了&quot;);</span><br><span class="line">      return this.stu.age &gt;= 18 ? &quot;成年人&quot; : &quot;未成年人&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 计算属性</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // info: function() &#123;&#125;</span><br><span class="line">    info() &#123; //属性名：getter</span><br><span class="line">      console.log(&quot;info调用了&quot;);</span><br><span class="line">      return this.stu.age &gt;= 18 ? &quot;成年人！&quot; : &quot;未成年人！&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.firstName + this.lastName</span><br><span class="line">      &#125;,</span><br><span class="line">      set(value) &#123; // set在计算属性被修改时调用</span><br><span class="line">        console.log(value);</span><br><span class="line">        this.firstName = value[0],</span><br><span class="line">        this.lastName = value.slice(1)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; stu.name &#125;&#125;-- &#123;&#123;stu.age&#125;&#125; -- &#123;&#123;stu.gender&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h2&gt;评语：&#123;&#123; info &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h2&gt;methods--&gt;：&#123;&#123; getInfo() &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;updateAge&quot;&gt;减龄按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以为计算属性设置setter，使其变为可写，但是不建议这么做，计算属性一般只用来读</p><p>computed：计算属性（处理逻辑时一般使用计算属性）</p><ul><li>计算属性，只有其依赖的数据发生变化时才会重新执行</li><li>会对数据进行缓存（性能会好一点）</li><li>直接通过属性名使用，computed会自动调用</li></ul><p>而methods：方法：</p><ul><li><p>每次组件重新渲染都会进行</p></li><li><p>不会对数据进行缓存</p></li><li><p>通过<code>函数名+（）</code>的方式调用，mthods不会自动调用</p></li></ul></blockquote><h2 id="侦听器watch"><a href="#侦听器watch" class="headerlink" title="侦听器watch"></a>侦听器watch</h2><p>watch用来侦听响应式对象的值的变化。</p><p>参数：</p><ol><li><p>要侦听的对象，侦听对象的单一属性时，需要通过函数的形式把该属性返回</p></li><li><p>回调函数，返回新值与旧值，引用类型的旧值与新值一样</p></li><li><ul><li><p>deep：开启深度侦听，来侦听深层次的对象属性，使用reactive包装的响应式对象不用开启</p></li><li><p>immediate：立即执行一次watch</p></li><li><p>flush：</p><ul><li>per：组件更新之前调用</li><li>sync：同步执行</li><li>post：组件更新后调用</li></ul></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;message2.b1.b2.name&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;message2.b1.b2.age&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; watch, reactive, ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let message = ref&lt;string&gt;(&#x27;张三&#x27;);</span><br><span class="line">// let message2 = ref(&#123;</span><br><span class="line">//   b1: &#123;</span><br><span class="line">//     b2: &#123;</span><br><span class="line">//       age: 21,</span><br><span class="line">//       name: &#x27;李四&#x27;,</span><br><span class="line">//     &#125;</span><br><span class="line">//   &#125;</span><br><span class="line">// &#125;);</span><br><span class="line">let message2 = reactive(&#123;</span><br><span class="line">  b1: &#123;</span><br><span class="line">    b2: &#123;</span><br><span class="line">      age: 21,</span><br><span class="line">      name: &#x27;李四&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// watch(message2,(newValue, oldValue) =&gt; &#123;</span><br><span class="line">  // 监听对象的单一属性时，要使用函数的形式把属性返回</span><br><span class="line">watch(() =&gt; message2.b1.b2.age,(newValue, oldValue) =&gt; &#123;</span><br><span class="line">  // 引用类型的新值旧值一样</span><br><span class="line">  console.log(newValue, oldValue);</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  // deep: true,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><p>watchEffect，高级侦听器，非惰性侦听，页面一开始就会调用一次</p><p>参数：</p><ol><li>回调函数，会在触发侦听之前执行</li><li>配置项，与watch相似</li></ol><p>watchEffect，会返回一个函数，调用时会停止侦听</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input id=&quot;ipt&quot; type=&quot;text&quot; v-model=&quot;message&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;message2&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;stopWatch&quot;&gt;ggggg&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; watch, reactive, ref, computed, watchEffect &#125; from &quot;vue&quot;;</span><br><span class="line">let message = ref&lt;string&gt;(&#x27;张三&#x27;);</span><br><span class="line">let message2 = ref(&#x27;李四&#x27;);</span><br><span class="line">const stop = watchEffect((oninvalidate) =&gt; &#123;</span><br><span class="line">  // let ipt: HTMLInputElement = document.querySelector(&#x27;#ipt&#x27;) as HTMLInputElement;</span><br><span class="line">  // console.log(ipt);</span><br><span class="line">  // console.log(&#x27;message==&gt;&#x27;, message.value);</span><br><span class="line">  console.log(&#x27;message==&gt;&#x27;, message2.value);</span><br><span class="line">  oninvalidate(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;before&#x27;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  flush: &#x27;post&#x27;,</span><br><span class="line">  onTrigger(e) &#123;</span><br><span class="line">    debugger</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const stopWatch = () =&gt; stop()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件中的方法</title>
      <link href="/posts/ac5231a8.html"/>
      <url>/posts/ac5231a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="组件中的方法"><a href="#组件中的方法" class="headerlink" title="组件中的方法"></a>组件中的方法</h1><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import MyButton from &#x27;./components/MyButton.vue&#x27;;</span><br><span class="line">import &#123; shallowReactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    console.log(&quot;data--&gt;&quot;, this);</span><br><span class="line">    // 直接向组件实例中添加的属性不会被vue所代理，因此不是响应式数据，修改后页面不会发生变化</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;哈哈哈哈&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  /*</span><br><span class="line">  methods: 用来指定实例对象中的方法</span><br><span class="line">    - 它是一个对象，可以在里面定义多个方法，这些方法最终会被挂载到组件实例上，</span><br><span class="line">    - 可以通过组件实例来调用这些方法，所有的组件实例上的属性都可以在模板中直接访问</span><br><span class="line">    - methods中函数的this，会自动绑定为组件实例</span><br><span class="line">  */</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sum(a, b) &#123;</span><br><span class="line">      console.log(&quot;methods--&gt;&quot;, this);</span><br><span class="line">      return a + b;</span><br><span class="line">    &#125;,</span><br><span class="line">    changeMsg() &#123;</span><br><span class="line">      this.msg = &quot;嘿嘿嘿黑&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;changeMsg&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;sum(44,55)&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>methods: &#123;&#125;</code>: 用来指定实例对象中的方法</li><li><code>data() &#123;&#125;</code>: 用来指定实例对象中的响应式属性</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue指令</title>
      <link href="/posts/e46a1137.html"/>
      <url>/posts/e46a1137.html</url>
      
        <content type="html"><![CDATA[<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>在模板中，可以直接访问到组件中声明的变量，除了组件中的变量外，vue也为我们提供了一些全局变量可以访问：比如Data，Math，RegExp等，除此之外，也可以通过app对象来向vue中添加一些全局变量（方式：<code>app(组件实例).config.globalProperties</code></p><blockquote><ul><li>插值语法：<code>&#123;&#123;&#125;&#125;</code>，只能使用表达式（有返回值的语句，undefined也是返回值），插值实际上就是在修改元素的<code>textContent</code>（转义标签，防止xss注入）</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>) <span class="comment">//创建组件实例</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">alert</span> = alert.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载组件，返回一个实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">vm</span> = vm;</span><br></pre></td></tr></table></figure><h2 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h2><p>指令模板中为标签设置了一些特殊属性，他可以用来显示标签如何显示内容，使用<code>v-</code>开头</p><h3 id="v-text，v-html"><a href="#v-text，v-html" class="headerlink" title="v-text，v-html"></a>v-text，v-html</h3><blockquote><ul><li>v-text：将表达式的值作为元素的的<code>textContent</code>插入，作用和<code>&#123;&#123;&#125;&#125;</code>相同</li><li>v-html：将表达式的值作为元素的<code>innerHTML</code>插入，有xss注入的风险</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const msg = &#x27;hello vue&#x27;;</span><br><span class="line">const html = &quot;&lt;h2&gt;张三&lt;/h2&gt;&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;!-- &lt;h1&gt;&#123;&#123;alert(123)&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="line">  &lt;h1 v-text=&quot;html&quot;&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;h1 v-html=&quot;html&quot;&gt;&lt;/h1&gt; // 存在xss注入风险</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>当我们需要为标签动态的设置属性时，需要使用<code>v-bind</code>指令，v-bind可以简写为<code>:</code></p><p>需要为一个布尔值设置属性时，</p><ul><li><p>如果值为true，则元素上有该指令（包括转换后的true）</p></li><li><p>如果值为false，则元素上没有该指令（包括转换后的false）</p><ul><li>特殊情况：在vue中<code>&quot;&quot;</code>会转换为true</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">  const imgPath = ref(&quot;/images/messi.png&quot;)</span><br><span class="line">  const changeImg = function() &#123;</span><br><span class="line">    imgPath.value = &quot;/images/neymar.png&quot;;</span><br><span class="line">  &#125;;</span><br><span class="line">  const attrs = &#123; //可以通过对象来设置多个标签属性</span><br><span class="line">    id:&#x27;box1&#x27;,</span><br><span class="line">    class: &#x27;hello&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  const isDisabled = false;</span><br><span class="line">  const attrName = &quot;title&quot;;</span><br><span class="line">  const attrValue = &quot;这是一个title属性&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; :disabled=&quot;isDisabled&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;changeImg&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">  &lt;img :src=&quot;imgPath&quot; :[attrName]=&quot;attrValue&quot; alt=&quot;梅西&quot;&gt;</span><br><span class="line">// 绑定样式(可以存在一个静态和一个动态)</span><br><span class="line">  &lt;div :=&quot;attrs&quot; style=&quot;&#123;color: red;&#125;&quot; :style=&quot;&#123;height: 500 + &#x27;px&#x27;, backgroundColor: &#x27;#bfa&#x27;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><code>v-show</code>指令用来设置一个内容是否显示，v-show的实质是通过css中的<code>display: none</code>属性来设置一个元素是否显示的，（元素只是被隐藏了，元素的在文档流中的位置还存在）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  let isShow = ref(true);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;我是App组件&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;isShow = !isShow&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">  &lt;div v-show=&quot;isShow&quot;&gt;</span><br><span class="line">    &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>v-show</code>：</p><p>优点：</p><ul><li>通过css样式进行切换组件的显示与隐藏，切换时不会涉及组件的重新渲染，切换时的性能比较高</li></ul><p>缺点：</p><ul><li>初始化时，需要对所有组件都进行初始化（即使组件暂时不显示），因此初始化时的性能要差一点</li></ul></blockquote><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p><code>v-if</code>可以根据表达式的值来决定是否显示元素（会直接将元素删除）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">  const isShow = ref(true);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;我是App组件&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;isShow = !isShow&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">  &lt;div v-if=&quot;isShow&quot;&gt;</span><br><span class="line">    &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div v-else&gt;</span><br><span class="line">    &lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;template v-if=&quot;isShow&quot;&gt;</span><br><span class="line">    &lt;h2&gt;你好&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;hello&lt;/h3&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>v-if</code>：</p><p>优点：</p><ul><li>初始化时只会加载需要用到的组件，因此初始化时的性能比较好</li><li>可以和<code>v-else-if</code>和<code>v-else</code>结合使用</li><li>可以配合<code>tmeplate</code>使用</li></ul><p>缺点：</p><ul><li>通过删除，添加元素的方式来切换元素的显示，切换时会反复的渲染组件，切换时性能比较差</li></ul></blockquote><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>我们在使用<code>v-for</code>遍历时，旧的结构和新的结构默认是按照顺序进行对比（diff）的，只会对发生变化的结构进行渲染，在顺序对比时，如果在数组的开头添加新的元素，则会导致整个数组的元素出现意外的错位。</p><p>我们在使用<code>v-for</code>遍历时，可以在为元素指定一个唯一的<code>key</code>，这样在进行比较时就会按照相同的key去比较而不是按顺序比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref, reactive&#125; from &#x27;vue&#x27;;</span><br><span class="line">const arr = ref([&quot;张三&quot;, &quot;李四&quot;, &quot;瑞克&quot;, &quot;莫蒂&quot;]);</span><br><span class="line">const arr2 = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    id: 1,</span><br><span class="line">    name: &quot;张三&quot;,</span><br><span class="line">    age: 18</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: 2,</span><br><span class="line">    name: &quot;李四&quot;,</span><br><span class="line">    age: 28</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: 3,</span><br><span class="line">    name: &quot;瑞克&quot;,</span><br><span class="line">    age: 38</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line">const obj = reactive(&#123;</span><br><span class="line">  title: &#x27;hello&#x27;,</span><br><span class="line">  desc: &#x27;world&#x27;,</span><br><span class="line">  isShow: false,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;arr.push(&#x27;杰瑞&#x27;)&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">  &lt;!-- &lt;button @click=&quot;arr2.push(&#123;id: 4, name: &#x27;hello&#x27;, age: 48&#125;)&quot;&gt;点我一下2&lt;/button&gt; --&gt;</span><br><span class="line">  &lt;button @click=&quot;arr2.unshift(&#123;id: 4, name: &#x27;hello&#x27;, age: 48&#125;)&quot;&gt;点我一下2&lt;/button&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;name of arr&quot;&gt;&#123;&#123; name &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(name, index) in arr&quot;&gt;&#123;&#123; index &#125;&#125;--&#123;&#123; name &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;!-- &lt;li v-for=&quot;obj in arr2&quot;&gt; --&gt;</span><br><span class="line">    &lt;li v-for=&quot;&#123;id, name, age&#125; in arr2&quot; :key=&quot;id&quot;&gt;</span><br><span class="line">      &#123;&#123; name &#125;&#125;--&#123;&#123; age &#125;&#125;</span><br><span class="line">      &lt;input type=&quot;text&quot;/&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">    &lt;!-- 对对象进行解构，第一个参数只遍历属性值，第二个参数遍历属性名--&gt;</span><br><span class="line">  &lt;div v-for=&quot;(value, key) in obj&quot;&gt;属性名：&#123;&#123; key &#125;&#125; -- 属性值：&#123;&#123; value &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 遍历数字，默认从1开始 --&gt;</span><br><span class="line">  &lt;p v-for=&quot;n in 10&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!-- v-for 与 v-if 不能这样同时使用 --&gt;</span><br><span class="line">  &lt;!-- &lt;div v-for=&quot;a of arr2&quot; v-if=&quot;a.age != 18&quot;&gt;</span><br><span class="line">    &#123;&#123; a.age &#125;&#125;</span><br><span class="line">  &lt;/div&gt; --&gt;</span><br><span class="line">  &lt;template v-for=&quot;a of arr2&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;a.age != 18&quot;&gt;</span><br><span class="line">      &#123;&#123; a &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p><code>v-for</code>与<code>v-if</code>不能在一个标签上同时使用，因为<code>v-if</code>的优先级比较高，同时使用时<code>v-if</code>无法访问到<code>v-for</code>作用域内定义的变量别名</p></blockquote><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>为标签添加点击事件，简写：<code>@</code>。</p><p>vue内置了event事件的修饰符（列如：取消冒泡，取消默认事件等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;!-- 使用内置修饰符：stop 可以阻止冒泡事件 --&gt;</span><br><span class="line">    &lt;button @[event].stop=&quot;child&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  const event = &#x27;click&#x27;;</span><br><span class="line">  const parent = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;我是父元素&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line">  const child = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;我是子元素，我触发法了父元素&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>对数据进行双向绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;a&quot;&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const a = ref(&#x27;张三&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;a&quot;&gt;</span><br><span class="line">  &lt;!-- v-once: 只会渲染元素或组件一次，跳过之后的更新，被视为静态内容 --&gt;</span><br><span class="line">  &lt;div v-once&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const a = ref(&#x27;张三&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-memo"><a href="#v-memo" class="headerlink" title="v-memo"></a>v-memo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for=&quot;item in arr&quot; v-memo=&quot;[item === 1]&quot;&gt;</span><br><span class="line">  &lt;!-- 满足memo条件的都会跳过更新， 一般搭配v-for进行使用--&gt;</span><br><span class="line">    &#123;&#123; arr &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const arr = ref([1, 2, 3, 4])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue样式</title>
      <link href="/posts/f24f2e23.html"/>
      <url>/posts/f24f2e23.html</url>
      
        <content type="html"><![CDATA[<h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><ul><li><p>可以直接通过style标签来编写样式，此时的样式是全局样式，会影响到所有组件</p></li><li><p>可以为style标签添加一个scoped属性，此时的样式是局部样式，只对当前组件生效</p></li><li><p>如何实现？</p><ol><li>当添加<code>scoped</code>属性后，vue会自动为组件中的所有元素生成一个随机的属性，形如：<code>data-v-xxxx</code></li><li>生成后，所有的选择器都会在最后添加一个 <code>[data-v-xxxx]</code></li></ol></li><li><p>注意：</p><ol><li>随机生成的属性，除了会添加到当前组件内的所有元素上，也会添加到当前组件引入的其他组件的根（单根）元素上，</li><li>这样设计是为了，可以通过父组件来为子组件设置一些样式</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import MyBox from &#x27;./components/MyBox.vue&#x27;</span><br><span class="line">const msg = &quot;今天天气真不错！&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;我是app中的box1&lt;/div&gt;</span><br><span class="line">    &lt;MyBox&gt;&lt;/MyBox&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt; //添加scoped属性，使样式成为局部样式</span><br><span class="line">h1 &#123;</span><br><span class="line">  background-color: #bfa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box1 &#123;</span><br><span class="line">  background-color: #bfa;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="样式属性"><a href="#样式属性" class="headerlink" title="样式属性"></a>样式属性</h2><blockquote><p><code>:deep()</code>：使该样式成为深度样式，子组件也会受到影响</p><p><code>:global()</code>：使该样式成为全局样式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//app组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import MyBox from &#x27;./components/MyBox.vue&#x27;</span><br><span class="line">const msg = &quot;今天天气真不错！&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;我是app中的box1&lt;/div&gt;</span><br><span class="line">    &lt;MyBox&gt;&lt;/MyBox&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">  background-color: #bfa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box1 &#123;</span><br><span class="line">  background-color: #bfa;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.app :deep(h2) &#123;</span><br><span class="line">  color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">:global(div) &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//MyBox组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;MyBox&lt;/h2&gt;</span><br><span class="line">    &lt;!-- &lt;div class=&quot;box1&quot;&gt;MyBox中的box1&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  background-color: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="css模块"><a href="#css模块" class="headerlink" title="css模块"></a>css模块</h2><blockquote><p>css模块：</p><ul><li>自动的对模块中的类名进行hash化来确保类名的唯一</li><li>在模板中可以通过<code>$style.类名</code>使用</li><li>也可以通过module的属性值来指定变量名</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const msg = &quot;今天天气真不错！&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1 :class=&quot;classes.h1&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style module=&quot;classes&quot;&gt; //指定变量名为classes</span><br><span class="line">h1 &#123;</span><br><span class="line">  background-color: #bfa;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="类和内联样式"><a href="#类和内联样式" class="headerlink" title="类和内联样式"></a>类和内联样式</h2><blockquote><p>可以对元素的类名与内联样式，进行统一的设置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const msg = &quot;今天天气真不错！&quot;;</span><br><span class="line">const arr = [&#x27;box1&#x27;, &#x27;box2&#x27;, &#x27;box3&#x27;];</span><br><span class="line">const arr2 = [&#123;box1: true&#125;, &#123;box2: false&#125;, &#123;box3: false&#125;];</span><br><span class="line">const style = &#123;</span><br><span class="line">  color: &quot;red&quot;,</span><br><span class="line">  backgroundColor: &#x27;#bfa&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div :class=&quot;arr&quot; :style=&quot;style&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style module=&quot;classes&quot;&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">  background-color: #bfa;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reactive系列</title>
      <link href="/posts/ab39c8fe.html"/>
      <url>/posts/ab39c8fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="reactive系列"><a href="#reactive系列" class="headerlink" title="reactive系列"></a>reactive系列</h1><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p><code>reactive()</code>：对引用类型进行响应式代理。（Object，Array，Map，Set）</p><blockquote><p>reactive在进行取值时不用通过<code>.value</code>进行取值，reactive 是通过proxy代理的对象，直接赋值会覆盖响应式代理。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;form.name&quot; /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;form.age&quot; /&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;button @click.prevent=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in list.arr&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; customRef, isRef, reactive, ref, shallowRef, triggerRef &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">let form = reactive(&#123;</span><br><span class="line">  name: &quot;张三&quot;,</span><br><span class="line">  age: 18,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let list = reactive&lt;&#123;arr:string[]&#125;&gt;(&#123;arr: []&#125;);</span><br><span class="line"></span><br><span class="line">const submit = () =&gt; &#123;</span><br><span class="line">  console.log(form);</span><br><span class="line">&#125;;</span><br><span class="line">const add = () =&gt; &#123;</span><br><span class="line">  // list.push(&quot;张三&quot;);</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    const res = [&quot;张三&quot;, &quot;李四&quot;];</span><br><span class="line">    // reactive 是通过proxy代理的对象，直接赋值会覆盖响应式代理</span><br><span class="line">    // list = res;</span><br><span class="line">    // 可以通过push加解构的方式添加</span><br><span class="line">    // list.push(...res)</span><br><span class="line">    // 或者对list添加arr属性</span><br><span class="line">    list.arr = res;</span><br><span class="line">    console.log(list);</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">  console.log(list);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><p><code>readonly()</code>：把reactive的属性设为只读属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; obj &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;look&quot;&gt;查看&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, readonly &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">let obj = reactive(&#123; name: &#x27;张三&#x27; &#125;);</span><br><span class="line">const obj2 = readonly(obj)</span><br><span class="line">const look = () =&gt; &#123;</span><br><span class="line">  // obj2.name = &#x27;李四&#x27;; //obj2为只读属性，不能被修改</span><br><span class="line">  obj.name = &#x27;李四&#x27;;</span><br><span class="line">  console.log(obj);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a>shallowReactive</h2><p><code>shallowReactive</code>：对引用类型进行浅层响应式代理</p><p>与shallowRef一样shallowReactive也不能与reactive写在一起，否则会被reactive所影响，造成视图更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; obj &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123; obj2 &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;look&quot;&gt;查看&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, readonly, shallowReactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">let obj = reactive(&#123; name: &#x27;张三&#x27; &#125;);</span><br><span class="line">const obj2 = shallowReactive(&#123;</span><br><span class="line">  n1: &#123;</span><br><span class="line">    n2: &#123;</span><br><span class="line">      name:&#x27;张三2&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const look = () =&gt; &#123;</span><br><span class="line">  // obj.name = &#x27;李四&#x27;; //reactive与shllowReactive不能写在一起</span><br><span class="line">  // obj2.n1.n2.name = &#x27;李四2&#x27; //shallowReactive值代理一层</span><br><span class="line">  obj2.n1 = &#123;n2: &#123;name: &#x27;李四2&#x27;&#125;&#125;</span><br><span class="line">  console.log(obj2);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ref系列</title>
      <link href="/posts/ec7cbe77.html"/>
      <url>/posts/ec7cbe77.html</url>
      
        <content type="html"><![CDATA[<h1 id="ref系列"><a href="#ref系列" class="headerlink" title="ref系列"></a>ref系列</h1><h2 id="ref，reactive"><a href="#ref，reactive" class="headerlink" title="ref，reactive"></a>ref，reactive</h2><blockquote><p>选项式API：</p><ul><li>选项式api是在对象里编写代码，而对象只能编写方法和属性，不能直接定义变量或编写表达式，访问对象实例（vm）要通过this进行访问（使用箭头函数时及其麻烦），使用起来多有不变</li></ul><p>组合式API：</p><ul><li>组合式api是在函数里编写代码，因此也不用通过this来访问对象实例（view model），但是需要通过<code>reactive()</code>函数对，对象进行响应式代理</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;$ref&#125; from &#x27;vue/macros&#x27;</span><br><span class="line">const msg = &quot;哈哈哈&quot;;</span><br><span class="line">const a = reactive(&#123;</span><br><span class="line">  /*</span><br><span class="line">  reactive()</span><br><span class="line">    返回一个对象的响应式代理，且为深层次的响应式对象</span><br><span class="line">    缺点：只能返回对象的响应式代理</span><br><span class="line">    也可以使用shallowReactive()创建一个浅层响应式对象</span><br><span class="line">  */</span><br><span class="line">  name: &quot;张三&quot;</span><br><span class="line">&#125;)</span><br><span class="line">/*</span><br><span class="line">  ref()</span><br><span class="line">    接受一个任意值，并返回它的响应式代理,但本质上还是对一个对象进行代理</span><br><span class="line">    ref在生成响应式代理时，它是将值包装成了一个对象： 0 --&gt; &#123;value: 0&#125;</span><br><span class="line">*/</span><br><span class="line">const obj = ref(&#123; // ref代理的obj为顶层对象，在模板中访问name，age属性会自动解包</span><br><span class="line">  name: &#x27;张三&#x27;,</span><br><span class="line">  age: 18,</span><br><span class="line">&#125;)</span><br><span class="line">const obj2 = &#123; // ref代理的obj2不是顶层对象，在模板中访问name，age属性不会自动解包</span><br><span class="line">  name: ref(&#x27;李四&#x27;),</span><br><span class="line">  age: ref(19),</span><br><span class="line">&#125;</span><br><span class="line">const &#123;name, age&#125; = obj2; //可以通过解构赋值的形式使obj2中的属性成为顶层对象</span><br><span class="line">// let count = ref(0) //生成一个0的代理</span><br><span class="line">let count = $ref(0) // 通过添加$符对ref代理的对象进行解包</span><br><span class="line">// count = 10 //改变量，只会改变变量本身，在js中，无法实现对一个变量的代理</span><br><span class="line">console.log(count, count.value); //ref对象（无法直接访问到ref进行代理的对象），0</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;!-- 在模板中使用时，vue会对ref代理的对象进行自动解包，不用加.value--&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; count &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;!-- ref对象在模板中可以自动解包（要求ref对象必须是顶层对象） --&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;obj.name&#125;&#125; -- &#123;&#123;obj.age&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;obj2.name&#125;&#125; -- &#123;&#123;obj2.age.value&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>使用ref获取dom元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;myDom&quot;&gt;我是div&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; customRef, isRef, ref, shallowRef, triggerRef &#125; from &#x27;vue&#x27;;</span><br><span class="line">const myDom = ref&lt;HTMLDivElement&gt;();</span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  console.log(myDom.value);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="isRef"><a href="#isRef" class="headerlink" title="isRef"></a>isRef</h2><p><code>isRef()</code>：用来判断是否为ref对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;&#123; a &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;&#123; a1 &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; isRef, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const a = ref(&#x27;ref: 张三&#x27;);</span><br><span class="line">const a1 = (&#x27;ref: 张三&#x27;);</span><br><span class="line"></span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  a.value = &#x27;ref：李四&#x27;;</span><br><span class="line">  console.log(isRef(a)); // true</span><br><span class="line">  console.log(isRef(a1)); //false</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a>shallowRef</h2><p><code>shallowRef()</code>: 进行浅层的响应式代理。</p><blockquote><p>shallowRef与ref写在一起时会受ref的影响，导致shallowRef失效，引起视图更新</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    ref: &#123;&#123; a &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    shallowRef: &#123;&#123; a1 &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; isRef, ref, shallowRef, triggerRef &#125; from &#x27;vue&#x27;;</span><br><span class="line">const a = ref(&#123; name: &#x27;张三1&#x27; &#125;);</span><br><span class="line">const a1 = shallowRef(&#123; name: &#x27;张三2&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  // a.value.name = &#x27;李四1&#x27;; // ref 与 shallowRef不能同时写在一起否则后者会被前者所影响，造成视图的更新（shallowRef会失效）</span><br><span class="line">  // a1.value.name = &#x27;李四2&#x27;; // shallowRef只会对浅层的对象进行响应式代理</span><br><span class="line">  // shallowRef要从value开始修改对象才会生效</span><br><span class="line">  a1.value = &#123;</span><br><span class="line">    name: &#x27;李四2&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(a1);</span><br><span class="line">  console.log(isRef(a)); // true</span><br><span class="line">  console.log(isRef(a1)); // true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef"></a>triggerRef</h2><p><code>triggerRef()</code>：强制收集依赖，并更新视图。</p><blockquote><p>ref底层已经调用过了triggerRef，因此ref不能与shallowRef写在一起，</p><p>shallowRef +  triggerRef &#x3D; ref</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    ref: &#123;&#123; a &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    shallowRef: &#123;&#123; a1 &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; isRef, ref, shallowRef, triggerRef &#125; from &#x27;vue&#x27;;</span><br><span class="line">const a = ref(&#123; name: &#x27;张三1&#x27; &#125;);</span><br><span class="line">const a1 = shallowRef(&#123; name: &#x27;张三2&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  // a.value.name = &#x27;李四1&#x27;; // ref 与 shallowRef不能同时写在一起否则后者会被前者所影响，造成视图的更新（shallowRef会失效）</span><br><span class="line">  a1.value.name = &#x27;李四2&#x27;; // shallowRef只会对浅层的对象进行响应式代理</span><br><span class="line">  triggerRef(a1); // 强制收集依赖，更新a1</span><br><span class="line">  console.log(a1);</span><br><span class="line">  console.log(isRef(a)); // true</span><br><span class="line">  console.log(isRef(a1)); // true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><p><code>customRef()</code>：自定义ref</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    ref: &#123;&#123; a &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    shallowRef: &#123;&#123; a1 &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    customRef: &#123;&#123; a2 &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; customRef, isRef, ref, shallowRef, triggerRef &#125; from &#x27;vue&#x27;;</span><br><span class="line">const a = ref(&#123; name: &#x27;张三1&#x27; &#125;);</span><br><span class="line">const a1 = shallowRef(&#123; name: &#x27;张三2&#x27; &#125;);</span><br><span class="line"></span><br><span class="line">function myRef&lt;T&gt;(value: T) &#123;</span><br><span class="line">  let timer: any;</span><br><span class="line">  return customRef((track, trigger) =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        // 收集依赖</span><br><span class="line">        track();</span><br><span class="line">        return value;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newValue) &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        // 触发依赖</span><br><span class="line">        timer = setTimeout(() =&gt; &#123;</span><br><span class="line">          console.log(&#x27;更新了&#x27;);</span><br><span class="line">          value = newValue;</span><br><span class="line">          timer = null;</span><br><span class="line">          trigger();</span><br><span class="line">        &#125;, 500);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">const a2 = myRef&lt;object&gt;(&#123; name: &#x27;张三3&#x27; &#125;);</span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  a1.value = &#123;</span><br><span class="line">    name: &#x27;李四2&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  a2.value = &#123; name: &#x27;李四3&#x27; &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>to系列</title>
      <link href="/posts/948bea85.html"/>
      <url>/posts/948bea85.html</url>
      
        <content type="html"><![CDATA[<h1 id="to系列"><a href="#to系列" class="headerlink" title="to系列"></a>to系列</h1><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><p><code>toRef()</code>：把一个响应式对象的属性变成ref属性，只能修改响应式的值，第一个参数接收一个响应式对象，第二个参数接受对象的key（属性）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;a&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;b&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, toRef, &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const a = reactive(&#123;name: &#x27;张三&#x27;, age: 18, like: &#x27;动漫&#x27; &#125;);</span><br><span class="line">const b = toRef(a, &#x27;age&#x27;) //toRef只能修改响应式对象的值</span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  a.age = 21;</span><br><span class="line">  // age.value = 21;</span><br><span class="line">  console.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p><code>toRefs()</code>：把一个响应式对象中的全部属性，转为ref属性（修改值时也要通过value），实现原理就是遍历响应式对象的全部属性，然后对每个属性做toRef处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125; -- &#123;&#123;age&#125;&#125; -- &#123;&#123;like&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;点我一下&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, toRef, toRefs, &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const a = reactive(&#123;name: &#x27;张三&#x27;, age: 18, like: &#x27;动漫&#x27; &#125;);</span><br><span class="line">// 实现原理</span><br><span class="line">// const toRefs = &lt;T extends object&gt;(object:T) =&gt; &#123;</span><br><span class="line">//   const map:any = &#123;&#125;;</span><br><span class="line">//   for(let key in object) &#123;</span><br><span class="line">//     map[key] = toRef(object, key);</span><br><span class="line">//   &#125;</span><br><span class="line">//   return map;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">let &#123;name, age, like&#125; = toRefs(a);</span><br><span class="line"></span><br><span class="line">const change = () =&gt; &#123;</span><br><span class="line">  name.value = &#x27;李四&#x27;;</span><br><span class="line">  // a.name = &#x27;李四&#x27;;</span><br><span class="line">  console.log(name, age, like);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h2><p><code>toRaw()</code>：把响应式对象（proxy代理）转为普通对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/posts/69c3279c.html"/>
      <url>/posts/69c3279c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="git的简介"><a href="#git的简介" class="headerlink" title="git的简介"></a>git的简介</h2><p>git:版本控制工具</p><h2 id="git的基本配置及命令"><a href="#git的基本配置及命令" class="headerlink" title="git的基本配置及命令"></a>git的基本配置及命令</h2><p>git的基本配置:</p><blockquote><p><code>git config --global user.name &quot;name&quot;</code>:配置git的用户名</p><p><code>git config --global user.email &quot;email&quot;</code>:配置git的用户邮箱</p><p><code>git config --global user.password &quot;password&quot;</code>:配置git的用户密码</p></blockquote><p>git的常用命令:</p><blockquote><p><code>git status</code>:查看当前仓库的状态</p><p><code>git init</code>:初始化仓库</p><p><code>git add xxx</code>:暂存文件,xxx可以是指定的<code>文件路径</code>也可以是<code>.</code>表示全部文件(未跟踪–&gt;暂存)</p><p><code>git add *</code>:将所有已修改的文件暂存</p><p><code>git commit -m &quot;xxx&quot;</code>:提交暂存文件,xxx提交代码的日志信息,不能省略(暂存–&gt;未修改)</p><p><code>git commit -a -m &quot;xxx&quot;</code>:提交所有已修改的文件</p><p><code>git restore &lt;filename&gt;</code>:重置文件,恢复到上一次操作</p><p><code>git restore --staged &lt;filename&gt;</code>:取消暂存状态</p><p><code>git rm &lt;filename&gt;</code>:删除文件</p><p><code>git rm &lt;filename&gt; -f</code>:强制删除</p><p><code>git mv form&lt;filename&gt; to&lt;filename&gt;</code>:移动文件,重命名文件</p></blockquote><h2 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h2><blockquote><p>git的文件有两种状态:<strong>已跟踪(Tracked)<strong>和</strong>未跟踪(untracked)</strong>,已跟踪的文件被git所管理,未跟踪的文件不受git管理</p><p>已跟踪的文件又有三种状态: </p><p><strong>暂存(Staging)</strong>:表示文件修改已经保存,但是尚未提交到git仓库中</p><p><strong>已修改(Modified)</strong>:表示本地磁盘中的文件已修改与git仓库中的文件不同</p><p><strong>未修改(untouched)</strong>:表示本地磁盘中的文件与git仓库中的文件相同,没有被修改</p><p>文件状态可以通过<code>git status</code>查看</p></blockquote><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>git在储存文件时,每一次提交代码都会创建一个对应的分支,git节点就是通过一个一个的节点记录代码的状态.节点会构成一个树状结构,树状结构会存在分支(一般默认为master),在使用git时,可以创建多个分支,<strong>分支与分支之间相互独立,互不影响</strong>.</p><blockquote><p><code>git branch</code>:查看当前分支</p><p><code>git branch &lt;分支名&gt;</code>:创建一个新的分支</p><p><code>git branch -d &lt;分支名&gt;</code>:删除指定分支</p><p><code>git branch -M &lt;分支名&gt;</code>:修改分支名</p><p><code>git branch -a</code>:查看所有分支</p><p><code>git switch &lt;分支名&gt;</code>:切换到指定分支 (旧版为:check out)</p><p><code>git switch -c &lt;分支名&gt;</code>:创建并切换到指定分支</p><p><code>git merge &lt;分支名&gt;</code>:合并指定分支(Fast-forward:快速合并)</p></blockquote><h2 id="变基-rebase"><a href="#变基-rebase" class="headerlink" title="变基(rebase)"></a>变基(rebase)</h2><p>通过变基合并分支,使用<code>git merge &lt;分支名&gt;</code>合并分支时,在提交记录中会显示所有的分支创建和分支合并的全部过程,当项目比较复杂时,会使代码的提交记录变得非常混乱</p><blockquote><p><code>git rebase &lt;分支名&gt;</code>:变成指定分支名的基底</p></blockquote><p><strong>原理(变基时发生了什么?)</strong>:</p><ul><li>当我们发起变基时,git会首先把两条分支的<strong>最近的共同祖先基底</strong></li><li>对比当前分支相对于祖先的历史提交,并且将他们提取出来存储到一个临时文件中</li><li>将当前分支指向目标分支的基地</li><li>以当前基底开始,重新执行历史代码的提交操作</li></ul><p>变基和<code>merge</code>对于合并分支来说最终结果是一样的,但使用变基会使代码的提交记录更加清晰整洁.</p><h2 id="远程仓库-remote"><a href="#远程仓库-remote" class="headerlink" title="远程仓库(remote)"></a>远程仓库(remote)</h2><blockquote><p>将本地库上传到远程仓库</p><p><code>git remote add &lt;remote name&gt; &lt;url&gt;</code>:使用url链接远程仓库</p><p><code>git push -u &lt;remote name&gt; &lt;分支名&gt;</code>:提交代码到,远程仓库的指定分支并关联远程库(关联以后,可以直接使用<code>git push</code>进行提交)</p><p><code>git push</code>:推送代码到已关联的分支</p><p><code>git push &lt;remote name&gt; &lt;本地分支&gt;:&lt;远程分支&gt;</code>:指定本地分支并推送到指定的远程分支</p></blockquote><p>常用操作命令:</p><blockquote><p><code>git remote</code>:查看关联的远程库名字<remote name></p><p><code>git remote -v</code>:查看关联远程库的详细信息(名字<remote name>,地址&lt;url&#x2F;ssh&gt;)</p><p><code>git remote remove &lt;remote name&gt;</code>:删除指定的远程库</p></blockquote><p><strong>注意:如果本第库的版本低于远程库的版本,<code>git push</code>默认是推不上去的,想要推送成功必须确保本地库与远程库的版本一致</strong></p><blockquote><p><code>git fetch</code>:拉取远程库代码到本地库,拉取后必须使用<code>git merge</code>进行分支合并</p><p><code>git pull</code>拉取远程库代码到本地库并自动合并分支</p></blockquote><h2 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签(tag)"></a>标签(tag)</h2><blockquote><p><strong>当头指针(head)没有指向某个分支的头部时,称为分离头指针(head detached)</strong>,分离头指针的状态下也可以操作代码,但不会出现任何的分支上,所以不要在分离头指针的状态下来操作仓库.</p><ul><li>通过<code>git log</code>可以常看当前的头指针,及每次提交的代码id</li><li>使用<code>git switch &lt;提交代码id&gt; --detached </code>来改变头指针的位置(如果切换后,头指针没有指向任何的分支,就是分离头指针的操作)</li></ul><p><strong>如果要回退到之前的节点对代码进行操作,则可以选择创建分支后在改变头指针的位置</strong></p><ul><li>使用<code>git switch -c &lt;分支名&gt; &lt;提交代码id&gt;</code>来创建一个新的分支,并切换头指针</li></ul><p><strong>可以为提交记录设置标签,设置标签以后,可以通过标签快速的识别出不同的开发节点</strong></p><ul><li><code>git tag &lt;标签名&gt;</code>:为当前的分支打上标签</li><li><code>git tag &lt;标签名&gt; &lt;提交代码id&gt;</code>:为指定的节点打上标签(如果该节点不存在任何的分支,通过标签切换后依然会存在分离头指针的问题)</li><li><code>git tag</code>:查看所有的标签</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git push 远程库名 标签名 <span class="comment"># 提交指定标签到远程仓库</span></span><br><span class="line">git push 远程库名 --tags <span class="comment"># 提交所有的标签到远程仓库</span></span><br><span class="line">git tag -d 标签名 <span class="comment"># 删除指定标签</span></span><br><span class="line">git tag 远程库名 --delete 标签名 <span class="comment"># 删除远程库的指定标签 </span></span><br><span class="line"><span class="comment"># 标签的作用代替提交代码id</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><ul><li><p>默认情况下,git会监视项目中所有内容,但是我们有事希望一些文件不要被git所管理(列如:node_modules,项目日志等),我们可以在项目目录中添加<code>.gitignore</code>文件,来设置需要被git所忽略的文件</p></li><li><pre><code class="bash">node_modulesyarn.lck*.log # 所有后缀为.log的文件</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01类型</title>
      <link href="/posts/38ef0e80.html"/>
      <url>/posts/38ef0e80.html</url>
      
        <content type="html"><![CDATA[<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>字面量类型就是其本身</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="string">&quot;hello&quot;</span> | <span class="string">&quot;hey&quot;</span></span><br><span class="line">b = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;hey&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>使用联合类型可以连接多个类型，可以限制变量在某几个值之间</p><p>语法：</p><blockquote><p>字面量 | 字面量</p><p>类型 | 类型</p></blockquote><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>any类型相当于解除了ts对当前变量的类型检测，any类型的变量可以复制给任意变量，会造成其他变量类型的混乱，如果一个变量没有指定任何类型，则默认为any类型（即隐式any类型）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a; <span class="comment">//隐式any类型</span></span><br><span class="line"><span class="comment">// let a: any //显式any类型</span></span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span>; <span class="comment">//b --&gt; any</span></span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><p>unkonwn表示未知类型的值，实际上就是一个类型安全的any，unknown类型的变量不能直接赋值给其他变量。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">unknown</span>;</span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// b = a</span></span><br><span class="line"><span class="comment">// unknown类型的变量，不能直接赋值给其他变量</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> a === <span class="string">&quot;string&quot;</span>)&#123; <span class="comment">//确保a的类型为string后才能赋值给string类型的b</span></span><br><span class="line">  b = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类型断言</span></span><br><span class="line">b = a <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">b = &lt;<span class="built_in">string</span>&gt;a;</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言可以告诉解析器变量的实际类型</p><p>语法：</p><blockquote><p>变量 as 类型</p><p>&lt;类型&gt;变量</p></blockquote><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>void 用来表示空，以函数为例，就表示没有返回值的函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>( <span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p>never表示永远不会返回结果</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了!&#x27;</span>); <span class="comment">//出错程序立即结束，该函数永远不会有返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// object 表示一个对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">object</span>;</span><br><span class="line">a = &#123;&#125;;</span><br><span class="line">a = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 限制对象属性数量及类型</span></span><br><span class="line"><span class="comment">// &#123;&#125; 用来指定对象中的可以包含的属性</span></span><br><span class="line"><span class="comment">// 语法： &#123;属性名: 属性值, 属性名: 属性值&#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, age?: <span class="built_in">number</span>&#125;; <span class="comment">//属性名后面加？表示可选属性</span></span><br><span class="line">b = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="comment">// 属性名的本质是string，[propName: string]: any 表示任意类型的属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;;</span><br><span class="line">c = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制函数（object）的类型声明</span></span><br><span class="line"><span class="comment">// 语法：(形参: 类型, 形参: 类型...) =&gt; 返回值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">d = <span class="keyword">function</span>(<span class="params">n1, n2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span>[];</span><br><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;1&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: (<span class="built_in">string</span> | <span class="built_in">number</span>)[];</span><br><span class="line">b = [<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;;</span><br><span class="line">c = [<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>数组的类型声明，语法：</p><blockquote><p>类型[];</p><p>Array&lt;类型&gt;</p></blockquote><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>元组（ts新增）：固定长度的数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>];</span><br><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;123&quot;</span>];</span><br></pre></td></tr></table></figure><p>声明元组的类型，语法：</p><blockquote><p>[类型，类型，类型]</p></blockquote><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>枚举（ts新增）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">  <span class="title class_">Male</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Female</span> = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">gender</span>: <span class="title class_">Gender</span>&#125;;</span><br><span class="line">i = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">Male</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="property">gender</span> === <span class="title class_">Gender</span>.<span class="property">Male</span>);</span><br></pre></td></tr></table></figure><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: myType;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: myType;</span><br><span class="line">a = <span class="number">4</span>;</span><br><span class="line">b = <span class="number">6</span>; <span class="comment">//超出myType的范围，报错</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/Ts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02Ts，webpack配置</title>
      <link href="/posts/17aca6b9.html"/>
      <url>/posts/17aca6b9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ts，webpack配置"><a href="#Ts，webpack配置" class="headerlink" title="Ts，webpack配置"></a>Ts，webpack配置</h1><h2 id="ts编译选项"><a href="#ts编译选项" class="headerlink" title="ts编译选项"></a>ts编译选项</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// tsconfig.json 是ts编译器的配置文件，ts可以根据它的信息来对代码进行编译</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    include 用来指定那些ts文件需要被编译</span></span><br><span class="line"><span class="comment">    路径：**表示任意目录</span></span><br><span class="line"><span class="comment">          *表示任意文件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;./src/**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    exclude 用来指定不需要被编译的文件目录</span></span><br><span class="line"><span class="comment">    默认值：[&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// extends 定义被继承的配置文件</span></span><br><span class="line">  <span class="comment">// &quot;extends&quot;: &quot; &quot;,</span></span><br><span class="line">  <span class="comment">// files 指定被编译文件的列表，需要编译的文件较少时使用</span></span><br><span class="line">  <span class="comment">// &quot;files&quot;: [],</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// compilerOptions（重要配置） 编译器的选项</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// target 用来指定ts被编译为的ES的版本,(可以传递一个错误的值，来看ES的版本信息)</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="comment">//ESNext 表示当前最新版本</span></span><br><span class="line">    <span class="comment">// module 指定要使用的模块化规范</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// lib 指定项目中要使用的库，一般为默认值</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],</span></span><br><span class="line">    <span class="comment">// outDir 指定编译后的文件的存放目录</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// outFile 将编译后的js代码合并为一个文件</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;&quot;,</span></span><br><span class="line">    <span class="comment">// allowJs 是否对js文件进行编译，默认为false</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// checkJs 检查js代码是否符合语法规范 默认false</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// removeComments 是否移出注释，默认为false</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 不生成编译后的文件,用于用ts检查语法时</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 当有错误时不会生成编译后的文件，默认为false</span></span><br><span class="line">    <span class="attr">&quot;noEmitOnError&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 严格模式：</span></span><br><span class="line">    <span class="comment">// 严格模式的总开关</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置编译后的文件是否使用严格模式</span></span><br><span class="line">    <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 不允许存在不明确类型的this</span></span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 严格检查空值</span></span><br><span class="line">    <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="webpcak配置"><a href="#webpcak配置" class="headerlink" title="webpcak配置"></a>webpcak配置</h2><p>通过<code>npm i -D webpack webpack-cli typescript ts-loader</code>命令安装webpack及脚手架，ts的loader（加载器），</p><p>通过<code>npm i -D html-webpack-plugin</code>来安装自动生成html的插件</p><p>执行<code> npm i -D webpack-dev-server</code>安装webpack的内置服务器</p><p>执行<code>npm i -D clean-webpack-plugin</code>安装每次打包时自动清除dist目录下的文件</p><p>执行<code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code>安装babel，兼容不同的浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入clean插件</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">CleanWebpackPlugin</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 指定入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">  <span class="comment">// 指定打包文件所在的目录</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 打包后文件的名称</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 设置webpack不使用箭头函数</span></span><br><span class="line">    <span class="attr">environment</span>: &#123;</span><br><span class="line">      <span class="attr">arrowFunction</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 指定打包时要使用的模块</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定要加载的规则</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 设置ts文件的处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="comment">//使规则生效</span></span><br><span class="line">        <span class="comment">// 要使用的loader</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 配置babel</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 指定加载器</span></span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="comment">// 设置babel</span></span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// 设置预定义的环境</span></span><br><span class="line">              <span class="attr">presets</span>: [</span><br><span class="line">                [</span><br><span class="line">                  <span class="comment">// 设置环境的插件</span></span><br><span class="line">                  <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">                  <span class="comment">// 配置信息</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="comment">// 要兼容的目标浏览器</span></span><br><span class="line">                    <span class="attr">targets</span>: &#123;</span><br><span class="line">                      <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;88&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 指定corejs的版本</span></span><br><span class="line">                    <span class="string">&quot;corejs&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="comment">// 使用corejs的方式</span></span><br><span class="line">                    <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>, <span class="comment">//usage 表示按需加载</span></span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 要排除的文件</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span>,</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 设置其他文件的处理</span></span><br><span class="line">        <span class="comment">//&#123;...&#125;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置webpack插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// title: &#x27;这是一个自定义模板&#x27;,</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>, <span class="comment">// 指定生成html文件的模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 用来设置引用模块</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/Ts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03抽象类，接口</title>
      <link href="/posts/a7590e5f.html"/>
      <url>/posts/a7590e5f.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类，接口"><a href="#抽象类，接口" class="headerlink" title="抽象类，接口"></a>抽象类，接口</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个类</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  以abstract开头的类是抽象类，抽象类和其他类区别不大，只是不能用来创建对象，就是专门用来继承的类，</span></span><br><span class="line"><span class="comment">  抽象类中可以添加抽象方法，使用abstract开头，没有方法体，抽象方法只能定义在抽象类中，且子类必须对抽象方法进行重写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// sayHello() &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;动物再叫&#x27;);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 定义一个抽象方法</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类的子类--Dog</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123; <span class="comment">// 继承抽象类的子类，必须实现抽象成员（抽象方法） -- sayHello</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类的子类--Cat</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;喵喵喵&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">sayHello</span>(), dog);</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;咪咪&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="title function_">sayHello</span>(), cat);</span><br><span class="line"><span class="comment">// const seine = new Animal; // 无法创建抽象类的实例</span></span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个对象的类型</span></span><br><span class="line"><span class="keyword">type</span> myType = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  接口用来定义一个类的结构，用来定义一个类中应该包含那些属性和方法</span></span><br><span class="line"><span class="comment">    同时接口也可以当成类型声明（type）去使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 使用interface来定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> myInterFace &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 可重复定义接口</span></span><br><span class="line"><span class="keyword">interface</span> myInterFace &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const obj: myType = &#123;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">obj</span>: myInterFace = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  接口可以在定义类的时候去限制类的结构，</span></span><br><span class="line"><span class="comment">  接口中所有的属性都不能有实际的值，</span></span><br><span class="line"><span class="comment">  接口只定义对象的结构，不考虑实际值</span></span><br><span class="line"><span class="comment">  在接口中所有的方法都是抽象方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">interface</span> myInter &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">sayHello</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类时，可以通过implements使 类去实现一个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> myInter&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈哈&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/Ts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04属性封装，泛型</title>
      <link href="/posts/d239eca5.html"/>
      <url>/posts/d239eca5.html</url>
      
        <content type="html"><![CDATA[<h1 id="属性封装，泛型"><a href="#属性封装，泛型" class="headerlink" title="属性封装，泛型"></a>属性封装，泛型</h1><h2 id="属性的封装"><a href="#属性的封装" class="headerlink" title="属性的封装"></a>属性的封装</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// ts可以在属性前添加属性的修饰符</span></span><br><span class="line">  <span class="comment">// public 修饰属性可以在任意的位置进行访问，修改，（默认值）</span></span><br><span class="line">  <span class="comment">// private 私有属性，私有属性只能在内内部进行访问，修改</span></span><br><span class="line">  <span class="comment">// protected 受保护的属性，只能在当前类和当前类的子类中访问，不能通过实例访问</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span> = age;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 通过在类中添加方法使得私有属性可以被外部访问</span></span><br><span class="line">  <span class="comment">// getName() &#123;</span></span><br><span class="line">  <span class="comment">//   return this._name;</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  <span class="comment">// setName(value: string) &#123;</span></span><br><span class="line">  <span class="comment">//   this._name = value;</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  <span class="comment">// getAge() &#123;</span></span><br><span class="line">  <span class="comment">//   return this._age;</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  <span class="comment">// setAge(value: number) &#123;</span></span><br><span class="line">  <span class="comment">//   this._age = value</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    getter 方法用来读取属性</span></span><br><span class="line"><span class="comment">    setter 方法用来修改属性</span></span><br><span class="line"><span class="comment">      他们被称为属性的存取器</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// ts中设置属性存取器</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 属性可以被任意的修改会导致对象中的数据变得非常不安全</span></span><br><span class="line"><span class="comment">// per._name = &quot;李四&quot;;</span></span><br><span class="line"><span class="comment">// per._age = -33;</span></span><br><span class="line"><span class="comment">// per.setName(&#x27;李四&#x27;);</span></span><br><span class="line"><span class="comment">// per.setAge(12);</span></span><br><span class="line">per.<span class="property">name</span> = <span class="string">&#x27;瑞克&#x27;</span>;</span><br><span class="line">per.<span class="property">age</span> = <span class="number">23.5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span> &#123;</span><br><span class="line">  <span class="comment">// 可以直接将属性定义在构造函数中，等价于上面创建Person类的方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型：在定义函数或者类时，如果遇到类型不明确时就可以使用泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定函数泛型</span></span><br><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 可以直接调用具有泛型的函数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="number">10</span>); <span class="comment">//不指定泛型，ts可以自动对类型进行检测</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定多个泛型</span></span><br><span class="line"><span class="keyword">let</span> result2 = fn&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 指定泛型, 一般使用指定的方式</span></span><br><span class="line"><span class="keyword">function</span> fn2&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line">fn2&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过接口限制泛型的范围</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// T extends Inter 表示泛型T必须是Inter接口的实现类（子类）</span></span><br><span class="line"><span class="keyword">function</span> fn3&lt;T <span class="keyword">extends</span> <span class="title class_">Inter</span>&gt;(<span class="attr">a</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> r = <span class="title function_">fn3</span>(&#123;<span class="attr">length</span>: <span class="number">10</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定类的泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: T;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> mc = <span class="keyword">new</span> <span class="title class_">MyClass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;李四&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/Ts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01React简介</title>
      <link href="/posts/677955c1.html"/>
      <url>/posts/677955c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="react简介"><a href="#react简介" class="headerlink" title="react简介"></a>react简介</h2><p>React是用于构建用户界面的JavaScript库,Ajax+DOM的方式可以实现页面的局部刷新,但是原生的DOM操作非常的复杂,而react主要就是用来代替原生js的DOM操作,使复杂的原生DOM变得简洁,快速.</p><p>React的特点:</p><ul><li>虚拟DOM(Diff算法)</li><li>生命式编程(命令式编程是面向过程,而声明式编程是面向结果)</li><li>服务器运行</li></ul><h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(); //用来创建一个react元素</span><br><span class="line">//参数1:元素名(组件名)--(元素名必须要小写, 组件名要大写)</span><br><span class="line">//参数2:元素中的属性(id, class(className), 事件)--(事件要写成一个函数, 且事件名要用小驼峰命名)</span><br><span class="line">//参数3:元素的子元素(内容)</span><br><span class="line">ReactDOM.createRoot(); //用来创建React根元素--(根元素就是react元素要插入的位置)</span><br><span class="line">//参数1:DOM元素</span><br><span class="line">root.render(); //渲染react元素到根元素--(根元素中所有内容都会被删除,被react元素所替换)</span><br><span class="line">//参数1:react元素</span><br><span class="line">//当react()被重复调用时,进行diff算法(差分算法),会对之前渲染的结果进行比对,保留相同的元素,替换不同的元素</span><br></pre></td></tr></table></figure><blockquote><p>注意:为简化原生DOM的复杂性,react元素一旦创建则不能修改,只能用新的元素去替换旧的元素</p></blockquote><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><blockquote><p><code>React.memo()</code>：是一个高阶组件，它接收另外一个组件作为参数，且返回一个包装过的新组件，这个包装过的新组件会具有缓存功能，只有组件的props发生变化时，才会触发组件的重新渲染，否则总是返回缓存中的结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default React.memo(组件的回调函数);</span><br></pre></td></tr></table></figure><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><blockquote><p>参数：</p><ul><li>参数1：回调函数</li><li>参数2：依赖数组<ol><li>与Effect中的依赖数组相似，当依赖数组中的变量发生变化时，回调函数才会重新创建，</li><li>如果不指定依赖数组，回调函数每次都会重新创建</li><li>将回调函数中使用到的变量添加到依赖数组中，（State可不用设置）</li></ol></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const [count, setCount] = useState( 1);</span><br><span class="line">const [num, setNum] = useState(1);</span><br><span class="line"></span><br><span class="line">const addHandler = useCallback(() =&gt; &#123;</span><br><span class="line">  setCount(prevState =&gt; prevState + num);</span><br><span class="line">  setNum(prevState =&gt; prevState + 1);</span><br><span class="line">&#125;, [num]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02jsx与虚拟DOM</title>
      <link href="/posts/92f4c395.html"/>
      <url>/posts/92f4c395.html</url>
      
        <content type="html"><![CDATA[<h1 id="jsx与虚拟DOM"><a href="#jsx与虚拟DOM" class="headerlink" title="jsx与虚拟DOM"></a>jsx与虚拟DOM</h1><h2 id="jsx简介"><a href="#jsx简介" class="headerlink" title="jsx简介"></a>jsx简介</h2><p>jsx作为js语法的扩展,jsx使得我们可以类似于html的形式去使用js,jsx便是react中声明式编程(以结果为导向的编程)的体现方式.jsx相当于<code>React.createElement()</code>的语法糖(通过babel来解析jsx)</p><blockquote><p>jsx的注意事项:</p><ul><li><p>jsx不是字符串,不用加引号</p></li><li><p>jsx中html标签应该小写,react组件应该大写</p></li><li><p>在jsx中有一个根标签</p></li><li><p>jsx的标签必须要正确结束(自结束标签要加<code>/</code>)</p></li><li><p>在jsx中可以使用<code>&#123;&#125;</code>来嵌入表达式</p><ol><li>有值的语句就是表达式</li><li>如果是空值,undefined,布尔值则不会显示</li></ol></li><li><p>在jsx中,属性可以直接在标签中设置</p><ol><li><p>class要使用<code>className</code></p></li><li><p>style中必须使用对象设置,且样式名要使用小驼峰命名</p><p>列如:<code>style=&#123;&#123;backgroundColor:'yellow'&#125;&#125;</code></p></li></ol></li></ul></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lang = <span class="string">&#x27;cn&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;孙悟空&#x27;</span>;</span><br><span class="line"><span class="comment">// const div = &lt;div&gt; hello &#123;name&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">let</span> div;</span><br><span class="line"><span class="keyword">if</span> (lang === <span class="string">&#x27;en&#x27;</span>) &#123;</span><br><span class="line">    div = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    div = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好 &#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> data = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;瑞克&#x27;</span>, <span class="string">&#x27;莫蒂&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr = <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;data.map((item) =&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(arr );</span><br></pre></td></tr></table></figure><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><blockquote><p>虚拟DOM的的好处:</p><ul><li>降低API的复杂度</li><li>解决兼容性问题</li><li>提升性能(减少不必要的操作)</li></ul><p>每当我们调用<code>root.render()</code>时,页面就会重新渲染,react就会通过diff算法,将新的元素与旧的元素进行比对,通过比较对发生改变的元素进行修改,没发生变化的元素不予处理,</p><p><strong>注意</strong>:当我们在jsx中渲染数组时,数组中的每一个元素都需要设置一个<code>key</code>,否则控制台会显示警告,</p><p>为什么需要加<code>key</code>?</p><ul><li><p>重新渲染页面时,diff算法会按照顺序依次比对元素,当渲染一个列表时,如果了列表的顺序不发生改变则没有问题,但如果发生改变,则整个列表的数据就都会重新渲染,影响性能</p></li><li><p>key的作用类似于id,但无法在页面中看到,当列表中的数据添加key后.在比较元素时,就会只把key值相同的元素进行比较,而不是按照顺序去比.</p><p><strong>注意</strong>:开发中我们一般用id作为key,尽量不要用index作为key,(index会随着数组的顺序发生变化)</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const lang = &#x27;cn&#x27;;</span><br><span class="line">const name = &#x27;孙悟空&#x27;;</span><br><span class="line">let div;</span><br><span class="line">if (lang === &#x27;en&#x27;) &#123;</span><br><span class="line">    div = &lt;div&gt;hello &#123;name&#125;&lt;/div&gt;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    div = &lt;div&gt;你好 &#123;name&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line">const data = [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;瑞克&#x27;, &#x27;莫蒂&#x27;];</span><br><span class="line">const arr = &lt;ul&gt;&#123;data.map((item) =&gt;&lt;li key=&#123;item&#125;&gt;&#123;item&#125;&lt;/li&gt;)&#125;&lt;/ul&gt;</span><br><span class="line">console.log(arr)</span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(arr );</span><br><span class="line">document.getElementById(&#x27;btn&#x27;).onclick = () =&gt; &#123;</span><br><span class="line">    const data = [ &#x27;ll&#x27;, &#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;kk&#x27;, &#x27;莫蒂&#x27; ];</span><br><span class="line">    const arr = &lt;ul&gt;&#123;data.map((item) =&gt;&lt;li key=&#123;item&#125;&gt;&#123;item&#125;&lt;/li&gt;)&#125;&lt;/ul&gt;;</span><br><span class="line">    console.log(arr)</span><br><span class="line">    root.render(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03函数式组件</title>
      <link href="/posts/9a7f8a09.html"/>
      <url>/posts/9a7f8a09.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>函数式组件就是一个返回jsx的普通函数,组件名要大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//App.js</span><br><span class="line">function App() &#123;</span><br><span class="line">  return &lt;div&gt;hello react组件&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import ReactDOM from &#x27;react-dom/client&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(&lt;App/&gt;);</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>在React中事件的属性需要使用驼峰命名法,属性值不能直接执行代码,而是需要一个回调函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  function clickHandler(event) &#123;</span><br><span class="line">    event.preventDefault(); //取消超链接的默认事件</span><br><span class="line">    event.stopPropagation(); //取消事件的冒泡</span><br><span class="line">    alert(&#x27;Handler&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  return &lt;div onClick=&#123;() =&gt; &#123;alert(&#x27;div&#x27;)&#125;&#125;&gt;</span><br><span class="line">    app</span><br><span class="line">    &lt;button onClick=&#123;() =&gt; &#123;alert(123);&#125;&#125;&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;button onClick=&#123;clickHandler&#125;&gt;哈哈&lt;/button&gt;</span><br><span class="line">    &lt;a href=&quot;https://www.baidu.com&quot; onClick=&#123;clickHandler&#125;&gt;超链接&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事件对象:</p><ul><li>React对象中同样也会传递事件对象,可以在响应函数中定义参数来接受事件对象</li><li>React中的事件对象同样不是原生的事件对象,是经过React包装后的事件对象</li><li>由于是React包装过的事件对象,所以在使用时我们无需去考虑兼容性的问题</li></ul><p>方法:</p><ul><li><code>event.preventDefault()</code>:取消超链接的默认事件</li><li><code>event.stopPropagation()</code>:取消事件的冒泡</li></ul></blockquote><h2 id="Props-父传子"><a href="#Props-父传子" class="headerlink" title="Props(父传子)"></a>Props(父传子)</h2><ul><li>在函数组件中,属性就相当于是函数的参数,可以通过参数来访问</li><li>可以在函数组件的形参中定义一个props,props指向一个对象,包含了父组件中传递的所有参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">const Logs = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;logs&quot;&gt;</span><br><span class="line">      &#123;/*  日志的容器*/&#125;</span><br><span class="line">          &#123;/* 在父组件中可以直接在子组件中设置属性*/&#125;</span><br><span class="line">        &lt;LogsItem date=&#123;new Date()&#125; desc=&#123;&#x27;学习react&#x27;&#125; time=&#123;&#x27;50&#x27;&#125;/&gt;</span><br><span class="line">        &lt;LogsItem date=&#123;new Date()&#125; desc=&#123;&#x27;学习vue&#x27;&#125; time=&#123;&#x27;60&#x27;&#125;/&gt;</span><br><span class="line">        &lt;LogsItem date=&#123;new Date()&#125; desc=&#123;&#x27;学习node&#x27;&#125; time=&#123;&#x27;60&#x27;&#125;/&gt;</span><br><span class="line">        &lt;LogsItem date=&#123;new Date()&#125; desc=&#123;&#x27;学习css&#x27;&#125; time=&#123;&#x27;60&#x27;&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">const LogsItem = (props) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;item&quot;&gt;</span><br><span class="line">      &#123;/*日志的容器*/&#125;</span><br><span class="line">      &lt;MyDate/&gt;</span><br><span class="line">      &#123;/*  日志内容的容器*/&#125;</span><br><span class="line">      &lt;dav className=&quot;content&quot;&gt;</span><br><span class="line">          &#123;/* 在子组件中通过props属性来动态接受父组件传递的数据*/&#125;</span><br><span class="line">        &lt;h2 className=&quot;desc&quot;&gt;&#123;props.desc&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;div className=&quot;time&quot;&gt;&#123;props.time&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/dav&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><strong>组件间通信(父传子)</strong>:</p><ul><li>在组件间,父组件可以通过props(属性)向子组件传递数据,使得组件可以动态的展示数据<ol><li>父组件在子组件中设置属性</li><li>子组件通过props来动态接受父组件设置的属性</li></ol></li><li>props是对象的只读属性,不能进行修改</li></ul></blockquote><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>在React中,当组件渲染完毕后,就不能再进行修改,即使修改组件中的变量,也不会使组件重新渲染.</p><blockquote><p>State:</p><ul><li>一个有React提供的特殊变量,React会监控这个变量,当State发生变化时,会自动触发组件的重新渲染,使得我们的修改可以在页面中呈现出来</li><li>使用钩子函数<code>useState()</code>来创建State,它需要一个值作为参数,这个值就是state的初始值</li><li><code>useState()</code>函数会返回一个数组,数组中的第一个元素,是初始值,第二个元素是一个函数<ol><li>初始值只能显示数据,修改初始值不会使组件重新渲染</li><li>第二个元素是一个函数用来修改state,调用该函数且修改state后会触发组件的重新渲染</li></ol></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  const [counter, setCounter] = useState(1);</span><br><span class="line">  const [user, setUser] = useState(&#123;name:&#x27;张三&#x27;, age:18&#125;);</span><br><span class="line"></span><br><span class="line">const addHandler = () =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      // setCounter(counter+1);</span><br><span class="line">      setCounter(prevState =&gt; prevState+1 );</span><br><span class="line">      console.log(&#x27;state重新渲染了&#x27;);</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;</span><br><span class="line">  const updateUserHandler = () =&gt; &#123;</span><br><span class="line">   /*</span><br><span class="line">    user.name = &#x27;李四&#x27;;</span><br><span class="line">    setUser(user); 这种方式不能触发state的重新渲染,因为对象地址没法生变化,本质还是一个对象</span><br><span class="line">    */</span><br><span class="line">    // const newUser = Object.assign(&#123;&#125;, user);</span><br><span class="line">    const newUser = &#123;...user, name: &#x27;李四&#x27;&#125;; //通过浅复制来改变对象的地址,使state能够触发重新渲染且只修改一个对象属性</span><br><span class="line">    console.log(newUser === user);</span><br><span class="line">    setUser(newUser);</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&#123;&#x27;app&#x27;&#125;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;counter&#125;--&#123;user.name&#125;--&#123;user.age&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;addHandler&#125; &gt;1&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;updateUserHandler&#125;&gt;2&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>state的注意事项:</p><ul><li>只有state的值发生变化的时候,组件才会重新渲染</li><li>当state的值是一个对象时,修改的是使用新的对象替换旧的对象</li><li>当通过<code>setState()</code>去修改一个state时,并不表示修改的是当前的state,而是<strong>修改的是组件下一次渲染时的state值</strong></li><li><code>steState()</code>会触发组件的重新渲染,但是<strong>他是异步渲染的</strong>,(因此当需要用到旧的state值时,可能会计算错误,<strong>我们可以通过为<code>setState()</code>传递回调函数的形式来修改state的值</strong>, <strong><code>setState()</code>中回调函数的返回值会成为新的state值, 回调函数执行时, React会将最新的state的值作为参数传递, 以保持state的值始终为最新</strong>)</li></ul></blockquote><h2 id="DOM对象和useRef"><a href="#DOM对象和useRef" class="headerlink" title="DOM对象和useRef()"></a>DOM对象和useRef()</h2><p>React中获取原生的DOM对象的方法:</p><blockquote><ul><li>使用<code>useRef()</code>钩子函数创建一个存储DOM对象的容器<ol><li>React中的钩子函数只能用于<strong>函数组件中或者自定义钩子</strong></li><li>钩子函数中<strong>只能在函数组件中,直接调用</strong></li></ol></li><li>将容器设置为想要获取DOM对象的ref属性</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">let temp;</span><br><span class="line">function App() &#123;</span><br><span class="line">  //创建存储DOM容器</span><br><span class="line">  const [count, setCount] = useState(1);</span><br><span class="line">  // const h1Ref = useRef();</span><br><span class="line">  const h1Ref = &#123;current: null&#125;; //自己创建的DOM容器, 每次渲染时都会创建新的对象</span><br><span class="line">  // const h1Ref = &#123;&#125;; //会报错,但不影响执行</span><br><span class="line"></span><br><span class="line">  const clickHandler = () =&gt; &#123;</span><br><span class="line">    const header = document.getElementById(&#x27;header&#x27;);</span><br><span class="line">    console.log(h1Ref, h1Ref.current);</span><br><span class="line">    h1Ref.current.innerText = &#x27;哈哈&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(h1Ref ===  temp); //使用自己创建的DOM容器时,每次组件渲染都会返回false</span><br><span class="line">  temp = h1Ref;</span><br><span class="line">  const countAddHandler = () =&gt; &#123;</span><br><span class="line">    setCount(prevState =&gt; prevState + 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&#123;&#x27;app&#x27;&#125; &gt;</span><br><span class="line">      &lt;h1 id=&#123;&#x27;header&#x27;&#125; ref=&#123;h1Ref&#125;&gt;标题&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;clickHandler&#125;&gt;1&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;countAddHandler&#125;&gt;2&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>useRef()</code>注意事项:</p><ul><li><code>useRef()</code>返回的就是一个普通的js对象, 我们直接创建一个js对象(<code>&#123;cuurent:null&#125;</code>),作为DOM容器也可以代替 <code>useRef()</code></li><li>区别:<ol><li>我们创建的对象每次组件重新渲染时, 都会创建一个新的对象</li><li><code>useRef()</code>创建的对象, 可以保证每次渲染, 获取到的都是同一个对象</li></ol></li><li>当需要的对象不会因为组件的重新渲染而改变时,使用<code>useRef()</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04类组件</title>
      <link href="/posts/c139d316.html"/>
      <url>/posts/c139d316.html</url>
      
        <content type="html"><![CDATA[<h1 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>类组件必须要继承<code>React.Component</code>,类组件中必须要有一个 render()方法 且返回值是一个jsx</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//App.js</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">//类组件必须要继承React.Component</span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">//  类组件中必须要有一个 render()方法 且返回值是一个jsx</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;我是一个类组件&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import ReactDOM from &quot;react-dom/client&quot;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(&lt;App/&gt;)</span><br></pre></td></tr></table></figure><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><blockquote><p>类组件的props是存储到类的实例对象中,可以直接通过实例对象的访问(<code>this.props</code>)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div className=&#123;&#x27;app&#x27;&#125;&gt;</span><br><span class="line">        &lt;User name=&#123;&#x27;李四&#x27;&#125; age=&#123;20&#125; gender=&#123;&#x27;男&#x27;&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">class User extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(this.props);</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;姓名: &#123;this.props.name&#125;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;年龄: &#123;this.props.age&#125;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;性别: &#123;this.props.gender&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><blockquote><ul><li>类组件的state统一存储到了实例对象的state属性中, 可以通过<code>this.state</code>来访问,通过<code>this.setState()</code>进行修改, <strong>且修改时只会修改已经设置过的属性(不用向函数式组件那样要把对象进行浅复制)</strong></li><li>在类组件中, <strong>响应函数以类的方法来定义</strong>,之前的属性都会保留, 但仅限于直接存储在state中的属性</li></ul></blockquote><h2 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h2><blockquote><ul><li>通过<code>React.createRef()</code>来创建一个存储DOM的对象</li><li>将这个属性设置为指定元素的ref属性</li></ul></blockquote><blockquote><p>在类组件中, 响应函数一般都用箭头函数的形式定义, 以确保this指向不会改变</p></blockquote><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class User extends Component &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: 0,</span><br><span class="line">    test: &#x27;哈哈&#x27;,</span><br><span class="line">    obj: &#123;name: &#x27;张三&#x27;, age: 18&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  //创建DOM容器</span><br><span class="line">  divRef = React.createRef();</span><br><span class="line">  clickHandler = () =&gt; &#123;</span><br><span class="line">    // this.setState(&#123;count: this.state.count + 1&#125;);</span><br><span class="line">    // this.setState( prevState =&gt; &#123;</span><br><span class="line">    //   return &#123;</span><br><span class="line">    //     count: prevState.count + 1</span><br><span class="line">    //   &#125;</span><br><span class="line">    // &#125;);</span><br><span class="line">    // this.setState(&#123;</span><br><span class="line">    //   obj: &#123;...this.state.obj, name:&#x27;李四&#x27;&#125; // obj中的属性并不直接存储在state中,因此要想只修改name保留age, 则需要对obj进行浅复制</span><br><span class="line">    // &#125;)</span><br><span class="line">    console.log(this.divRef.current);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(this.props);</span><br><span class="line">    console.log(this.divRef);</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div ref=&#123;this.divRef&#125;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.state.count&#125;---&#123;this.state.test&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;this.state.obj.name&#125;---&#123;this.state.obj.age&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.clickHandler&#125;&gt;点&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;姓名: &#123;this.props.name&#125;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;年龄: &#123;this.props.age&#125;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;性别: &#123;this.props.gender&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05学习记录器练习</title>
      <link href="/posts/a2d68f38.html"/>
      <url>/posts/a2d68f38.html</url>
      
        <content type="html"><![CDATA[<h1 id="学习记录器练习"><a href="#学习记录器练习" class="headerlink" title="学习记录器练习"></a>学习记录器练习</h1><h2 id="Card组件"><a href="#Card组件" class="headerlink" title="Card组件"></a>Card组件</h2><blockquote><p><code>props.className</code>表示父组件的class属性</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const Card = (props) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&#123;`card $&#123;props.className&#125;`&#125;&gt;&#123;props.children&#125;&lt;/div&gt; // 接收父组件传递的标签体和class属性定义的样式</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h3><blockquote><p><code>props.children</code>: 被标签包含的标签体(子标签)</p></blockquote><h3 id="props-className"><a href="#props-className" class="headerlink" title="props.className"></a>props.className</h3><blockquote><p><code>props.className</code>表示父组件的class属性</p></blockquote><h2 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">//创建变量存储表单中的数据(不能双向绑定)</span><br><span class="line">// let inputDate = &#x27;&#x27;;</span><br><span class="line">// let inputDesc = &#x27;&#x27;;</span><br><span class="line">// let inputTime = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">const LogForm = () =&gt; &#123;</span><br><span class="line">  //使用state存储表单数据</span><br><span class="line">  const [inputDate, setInputDate] = useState(&#x27;&#x27;);</span><br><span class="line">  const [inputDesc, setInputDesc] = useState(&#x27;&#x27;);</span><br><span class="line">  const [inputTime, setInputTime] = useState(&#x27;&#x27;);</span><br><span class="line">  // 也可以将表单数据统一存储在一个state中</span><br><span class="line">  /*const [formData, setFormData] = useState(&#123;</span><br><span class="line">    inputDate: &#x27;&#x27;,</span><br><span class="line">    inputDesc: &#x27;&#x27;,</span><br><span class="line">    inputTime: &#x27;&#x27;</span><br><span class="line">  &#125;)*/</span><br><span class="line"></span><br><span class="line">  //监听日期的变化</span><br><span class="line">  const dateChangeHandler = (e) =&gt; &#123;</span><br><span class="line">    //获取到当前触发事件的对象</span><br><span class="line">  //  事件对象中保存了当前事件触发时的所有信息</span><br><span class="line">  //  event.target 执行的是触发事件的对象(DOM对象)</span><br><span class="line">  //   console.log(e.target.value)</span><br><span class="line">    setInputDate(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line">  //监听内容的变化</span><br><span class="line">  const descChangeHandler = (e) =&gt; &#123;</span><br><span class="line">    // console.log(e.target.value)</span><br><span class="line">    setInputDesc(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line">  //监听时长的变化</span><br><span class="line">  const timeChangeHandler = (e) =&gt; &#123;</span><br><span class="line">    // console.log(e.target.value)</span><br><span class="line">    setInputTime(e.target.value);</span><br><span class="line">  &#125;</span><br><span class="line">  const formSubmitHandler = (e) =&gt; &#123;</span><br><span class="line">  //  取消表单的默认行为</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    const newLog = &#123;</span><br><span class="line">      date: new Date(inputDate),</span><br><span class="line">      desc: inputDesc,</span><br><span class="line">      time: +inputTime,</span><br><span class="line">    &#125;</span><br><span class="line">  // 获取数据后清空表单</span><br><span class="line">    setInputDate(&#x27;&#x27;);</span><br><span class="line">    setInputDesc(&#x27;&#x27;);</span><br><span class="line">    setInputTime(&#x27;&#x27;);</span><br><span class="line">    console.log(newLog);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;Card className=&#123;&#x27;log-form&#x27;&#125;&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;div className=&#123;&#x27;form-item&#x27;&#125;&gt;</span><br><span class="line">          &lt;label htmlFor=&quot;date&quot;&gt;日期&lt;/label&gt;</span><br><span class="line">          &lt;input onChange=&#123;dateChangeHandler&#125; value=&#123;inputDate&#125; id=&#123;&#x27;date&#x27;&#125; type=&quot;date&quot;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className=&#123;&#x27;form-item&#x27;&#125;&gt;</span><br><span class="line">          &lt;label htmlFor=&quot;desc&quot;&gt;内容&lt;/label&gt;</span><br><span class="line">          &lt;input onChange=&#123;descChangeHandler&#125; value=&#123;inputDesc&#125; id=&#123;&#x27;desc&#x27;&#125; type=&quot;text&quot;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className=&#123;&#x27;form-item&#x27;&#125;&gt;</span><br><span class="line">          &lt;label htmlFor=&quot;time&quot;&gt;时长&lt;/label&gt;</span><br><span class="line">          &lt;input onChange=&#123;timeChangeHandler&#125; value=&#123;inputTime&#125; id=&#123;&#x27;time&#x27;&#125; type=&quot;number&quot;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">      &lt;div className=&#123;&#x27;form-btn&#x27;&#125;&gt;</span><br><span class="line">        &lt;button onClick=&#123;formSubmitHandler&#125;&gt;添加&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/Card&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="event-target"><a href="#event-target" class="headerlink" title="event.target"></a>event.target</h3><blockquote><p>React的事件对象中保存了当前事触发的所有信息, 其中:</p><ul><li><code>event.target</code> 执行的是触发事件的对象(DOM对象)</li></ul><p>表单的双向绑定:</p><ul><li>我们把表单中的数据存储到state中, 然后将state值设置为表单项的value值, 这样当表单发生变化时, state也会随之变化触发页面的重新渲染, 表单项也会随之变化,</li><li>双向绑定使表单成为一个受控组件, (在react中普通的表单因为是由用户填写数据, 不受react的控制).</li></ul></blockquote><h2 id="数据的添加"><a href="#数据的添加" class="headerlink" title="数据的添加"></a>数据的添加</h2><blockquote><ul><li>数据的提升(把公共的数据提升到根组件)</li><li>通过props把子组件的数据传递到父组件中(父组件中定义一个回调函数, 在子组件中通过props调用这个回调函数)</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  //把公共的数据提升到根组件</span><br><span class="line">    const [logsData, setLogData] = useState([</span><br><span class="line">    &#123;</span><br><span class="line">      id: &#x27;001&#x27;,</span><br><span class="line">      date:new Date(2022, 11, 29),</span><br><span class="line">      desc: &#x27;学习react&#x27;,</span><br><span class="line">      time: 300</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: &#x27;002&#x27;,</span><br><span class="line">      date:new Date(2022, 10, 20),</span><br><span class="line">      desc: &#x27;学习vue&#x27;,</span><br><span class="line">      time: 360</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: &#x27;003&#x27;,</span><br><span class="line">      date:new Date(2022, 11, 15),</span><br><span class="line">      desc: &#x27;学习node&#x27;,</span><br><span class="line">      time: 120</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: &#x27;004&#x27;,</span><br><span class="line">      date:new Date(2021, 8, 2),</span><br><span class="line">      desc: &#x27;学习css&#x27;,</span><br><span class="line">      time: 60</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line">  //定义一个函数,将LogsForm中的数据传递给App组件, 然后App组件再把LogsForm传递过来的新数据添加到数组中</span><br><span class="line">  const saveLogHandler = (newLog) =&gt; &#123;</span><br><span class="line">    //向新的日志中添加id</span><br><span class="line">    newLog.id = Date.now() + &#x27;&#x27;; //时间戳转成字符串</span><br><span class="line">    //将新的数据添加到数组中</span><br><span class="line">    setLogData([</span><br><span class="line">      ...logsData,</span><br><span class="line">      newLog</span><br><span class="line">    ])</span><br><span class="line">    console.log(setLogData, newLog);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&#123;&#x27;app&#x27;&#125;&gt;</span><br><span class="line">      &lt;LogForm onSaveLog=&#123;saveLogHandler&#125;/&gt;</span><br><span class="line">      &lt;Logs logsData=&#123;logsData&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据的删除"><a href="#数据的删除" class="headerlink" title="数据的删除"></a>数据的删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//定义一个函数, 从数据中删除一条日志</span><br><span class="line">const delLogByIndex = (index) =&gt; &#123;</span><br><span class="line">  setLogData(prevState =&gt; &#123;</span><br><span class="line">    const newLogs = [...prevState];</span><br><span class="line">    newLogs.splice(index, 1); //因为prevState是最新的返回值, 所以要用一个变量(newLog)来接收,用newLog来调用splice方法,否则会把所有的数据都删除</span><br><span class="line">    return newLogs;</span><br><span class="line">  &#125;);</span><br><span class="line">    </span><br><span class="line"> //根据id删除数据</span><br><span class="line">const delLogById = (id) =&gt; &#123;</span><br><span class="line">  setLogData(prevState =&gt; &#123;</span><br><span class="line">    console.log(id)</span><br><span class="line">    return prevState.filter(item =&gt; item.id !== id);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模态窗与遮罩"><a href="#模态窗与遮罩" class="headerlink" title="模态窗与遮罩"></a>模态窗与遮罩</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//模态窗</span><br><span class="line">const ConfirmModal = props =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;BackDrop&gt;</span><br><span class="line">      &lt;Card className=&#123;&#x27;confirmModal&#x27;&#125;&gt;</span><br><span class="line">        &lt;div className=&#123;&#x27;confirmText&#x27;&#125;&gt;</span><br><span class="line">          &lt;p&gt;&#123;props.confirmText&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className=&#123;&#x27;confirmButton&#x27;&#125;&gt;</span><br><span class="line">          &lt;button onClick=&#123;props.onOk&#125; className=&#123;&#x27;okButton&#x27;&#125;&gt;确认&lt;/button&gt;</span><br><span class="line">          &lt;button onClick=&#123;props.onCancel&#125;&gt;取消&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/Card&gt;</span><br><span class="line">    &lt;/BackDrop&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//遮罩</span><br><span class="line">const BackDrop = (props) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&#123;&#x27;backDrop&#x27;&#125;&gt;</span><br><span class="line">      &#123;props.children&#125; // &lt;BackDrop&gt;该变标签下的所有子标签&lt;/BackDrop&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="portal"><a href="#portal" class="headerlink" title="portal"></a>portal</h3><blockquote><ul><li>组件在另一个组件中使用时, 默认会作为父组件的后代渲染到页面中, 但是有些情况下(父组件的样式: 层级, 定位等影响), 这种方式会带来一些问题</li><li>通过<code>portal</code>可以将组件渲染到页面中的指定位置<ol><li>在入口文件<code>index.html</code>中添加一个新的元素 </li><li>修改组件的渲染方式<ul><li>通过<code>ReactDOM.createPortal()</code>作为返回值创建元素</li><li>参数<ol><li>jsx(修改前的jsx代码)</li><li>要渲染的目标位置(DOM元素)</li></ol></li></ul></li></ol></li></ul></blockquote><h2 id="查找日志"><a href="#查找日志" class="headerlink" title="查找日志"></a>查找日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建一个存储年份的state</span><br><span class="line">const [year, setYear] = useState(2022);</span><br><span class="line">//过滤数据,只显示某一年的数据</span><br><span class="line">let filterData = props.logsData.filter(item =&gt; item.date.getFullYear() === year);</span><br><span class="line">// 创建一个修改年份的函数</span><br><span class="line">const changeYearHandler = (year) =&gt; &#123;</span><br><span class="line">  setYear(year); // 当调用该函数时, 相当于调用setYear()并传递year参数, 尽量不要直接在组件间传递setYear()[即setState()方法]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06React中的CSS样式</title>
      <link href="/posts/6f0779ae.html"/>
      <url>/posts/6f0779ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="React中的CSS样式"><a href="#React中的CSS样式" class="headerlink" title="React中的CSS样式"></a>React中的CSS样式</h1><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>在React中可以直接通过标签的style属性来为元素设置样式。style属性需要的是一个对象作为值，来为元素设置样式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;color:&#x27;red&#x27;&#125;&#125;&gt;</span><br><span class="line">    我是Div</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>传递样式时，需要注意如果样式名不符合驼峰命名法，需要将其修改为符合驼峰命名法的名字。比如：background-color改为backgroundColor。</p><p>如果内联样式编写过多，会导致JSX变得异常混乱，此时也可以将样式对象定义到JSX外，然后通过变量引入。</p><p>样式过多，JSX会比较混乱：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const StyleDemo = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div style=&#123;&#123;color:&#x27;red&#x27;, backgroundColor:&#x27;#bfa&#x27;, fontSize:20, borderRadius:12&#125;&#125;&gt;</span><br><span class="line">            我是Div</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default StyleDemo;</span><br></pre></td></tr></table></figure><p>可以这样修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">const StyleDemo = () =&gt; &#123;</span><br><span class="line">    const divStyle = &#123;color: &#x27;red&#x27;, backgroundColor: &#x27;#bfa&#x27;, fontSize: 20, borderRadius: 12&#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div style=&#123;divStyle&#125;&gt;</span><br><span class="line">            我是Div</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default StyleDemo;</span><br></pre></td></tr></table></figure><p>相比第一段代码来说，第二段代码中JSX结构更加简洁。</p><h2 id="在内联样式中使用State"><a href="#在内联样式中使用State" class="headerlink" title="在内联样式中使用State"></a>在内联样式中使用State</h2><p>设置样式时，可以根据不同的state值应用不同的样式，比如我们可以在组件中添加一个按钮，并希望通过点击按钮可以切换div的边框，代码可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">const StyleDemo = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    const [showBorder, setShowBorder] = useState(false);</span><br><span class="line"></span><br><span class="line">    const divStyle = &#123;</span><br><span class="line">        color: &#x27;red&#x27;,</span><br><span class="line">        backgroundColor: &#x27;#bfa&#x27;,</span><br><span class="line">        fontSize: 20,</span><br><span class="line">        borderRadius: 12,</span><br><span class="line">        border: showBorder?&#x27;2px red solid&#x27;:&#x27;none&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const toggleBorderHandler = ()=&gt; &#123;</span><br><span class="line">      setShowBorder(prevState =&gt; !prevState);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div style=&#123;divStyle&#125;&gt;</span><br><span class="line">            我是Div</span><br><span class="line">            &lt;button onClick=&#123;toggleBorderHandler&#125;&gt;切换边框&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default StyleDemo;</span><br></pre></td></tr></table></figure><p>上例中添加一个新的state，命名为showBorder，代码是这样的<code>const [showBorder, setShowBorder] = useState(false);</code>当该值为true时，我们希望div可以显示一条2像素的红色边框，当为false时，我们希望div没有边框。默认值为false。</p><p>divStyle的最后一个属性是这样设置的<code>border: showBorder?&#39;2px red solid&#39;:&#39;none&#39;</code>，这里我们根据showBorder的值来设置border样式的值，如果值为true，则设置边框，否则边框设置为none。</p><p><code>toggleBorderHandler</code> 是负责修改showBorder的响应函数，当我们点击按钮后函数会对showBorder进行取反，这样我们的样式就可以根据state的不同值而呈现出不同的效果了。</p><h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><p>外部样式是将样式编写到外部的css文件中，然后直接通过import进行引入，上述案例修改为外部样式表是这个样子：</p><p>StyleDemo.css</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.myDiv&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    background-color: #bfa;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    border-radius: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.redBorder&#123;</span><br><span class="line">    border: 2px red solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StyleDemo.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from &#x27;react&#x27;;</span><br><span class="line">import &#x27;./StyleDemo.css&#x27;;</span><br><span class="line"></span><br><span class="line">const StyleDemo = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    const [showBorder, setShowBorder] = useState(false);</span><br><span class="line"></span><br><span class="line">    const toggleBorderHandler = ()=&gt; &#123;</span><br><span class="line">      setShowBorder(prevState =&gt; !prevState);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&#123;`myDiv$&#123;showBorder?&#x27; redBorder&#x27;:&#x27;&#x27;&#125;`&#125;&gt;</span><br><span class="line">            我是Div</span><br><span class="line">            &lt;button onClick=&#123;toggleBorderHandler&#125;&gt;切换边框&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default StyleDemo;</span><br></pre></td></tr></table></figure><p>上边的案例中，将样式编写到了外部的css文件中，然后通过import引入到了当前模块中。在JSX中通过为元素添加了class使得样式生效。同时，在设置class时使用了模板字符串，根据showBorder的值判断是否添加redBorder这个类。</p><p>上边两个案例中无论是内联样式还是外部样式表最终的实现效果都是一样的，但要是让我从这两种方式中选的话我更加倾向于选择第二种，第二种方式中将JSX和CSS分别写到了不同的文件中，我们维护起来更加的方便。</p><p>但是以这种方式使用样式也会存在一个问题，直接通过import引入的样式都是全局样式，如果不同的样式表中出现了相同的类名，会出现相互覆盖情况，这一点要尤为注意！</p><h2 id="CSS-Module"><a href="#CSS-Module" class="headerlink" title="CSS Module"></a>CSS Module</h2><p>如果没有类名冲突的问题，外部CSS样式表不失为是一种非常好的编写样式的方式。为了解决这个问题React中还为我们提供了一中方式，CSS Module。</p><p>我们可以将CSS Module理解为外部样式表的一种进化版，它的大部分使用方式都和外部样式表类似，不同点在于使用CSS Module后，网页中元素的类名会自动计算生成并确保唯一，所以使用CSS Module后，我们再也不用担心类名重复了！</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>CSS Module在React中已经默认支持了（前提是使用了react-scripts），所以无需再引入其他多余的模块。使用CSS Module时需要遵循如下几个步骤：</p><ol><li>使用CSS Module编写的样式文件的文件名必须为<code>xxx.module.css</code></li><li>在组件中引入样式的格式为<code>import xxx from &#39;./xxx.module.css&#39;</code></li><li>设置类名时需要使用<code>xxx.yyy</code>的形式来设置</li></ol><p>请看案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"></span><br><span class="line">StyleDemo.module.css</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">.myDiv&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    background-color: #bfa;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    border-radius: 12px;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">StyleDemo.js</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">import styles from &#x27;./StyleDemo.module.css&#x27;;</span><br><span class="line"></span><br><span class="line">const StyleDemo = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&#123;styles.myDiv&#125;&gt;</span><br><span class="line">            我是Div</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default StyleDemo;</span><br></pre></td></tr></table></figure><p>这就是一个简单的CSS Module的案例，设置完成后你可以自己通过开发者工具查看元素的class属性，你会发现class属性和你设置的并不完全一样，这是因为CSS Module通过算法确保了每一个模块中类名的唯一性。</p><p>总之，相较于标准的外部样式表来说，CSS Module就是多了一点——确保类名的唯一，通过内部算法避免了两个组件中出现重复的类名，如果你能保证不会出现重复的类名，其实直接使用外部样式表也是一样的。</p><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><blockquote><ul><li>一个专门作为父容器的组件, 它会将里边的子元素，直接返回，不会再页面中创建多余的元素</li><li>形式：<ol><li><code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code></li><li><code>&lt;Fragment&gt;&lt;/Fragment&gt;</code></li><li><code>&lt;&gt; &lt;/&gt;</code></li></ol></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;div&gt;第一个组件&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;第二个组件&lt;/div&gt;</span><br><span class="line">  &lt;/&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07Context</title>
      <link href="/posts/f7bced84.html"/>
      <url>/posts/f7bced84.html</url>
      
        <content type="html"><![CDATA[<h1 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h1><p>Context相当于一个公共的存储空间，我们可以将多个组件中都需要访问的数据统一存储到一个Context中，这样就无需通过props逐层传递，即可使组件访问到这些数据</p><blockquote><ul><li>通过<code>React.createContext()</code>创建context</li></ul><p>使用方式：</p><ul><li>生产-消费方式<ol><li>引入Context</li><li>使用<code>Xxx.Consumer</code>组件来创建元素，Consumer的标签体需要一个回调函数，它会将Context设置为回调函数的参数，通过该参数就可以访问到Context中存储的数据</li></ol></li><li>钩子函数方式(只能在函数式组件中使用)<ol><li>引入Context</li><li>使用钩子函数<code>useContext()</code>获取到Context，<code>useContext()</code>需要一个Context作为参数，它会将Context中的数据获取并作为返回值，返回</li></ol></li><li><code>Xxx.Provider</code>：表示数据的生产者，可以使用它来指定Context中的数据<ol><li>通过value来指定Context中存储的数据，这样，在该组件的所有的子组件中都可以通过Context来访问它所指定数据</li><li>当组件通过Context进行访问数据时，它会读取离他最近的Provider中的数据，如果没有Provider，则读取Context中的默认数据</li></ol></li></ul></blockquote><h2 id="指定Context中的数据"><a href="#指定Context中的数据" class="headerlink" title="指定Context中的数据"></a>指定Context中的数据</h2><p>第一种方式，在单独的组件中指定Context中的数据</p><ul><li>由于Context对象需要在不同的组件中被使用，所以通常我们会将Context对象设置到一个单独的模块中并设置为默认导出像是这样：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const TestContext = React.createContext(&#123;</span><br><span class="line">    name:&#x27;孙悟空&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    gender:&#x27;男&#x27;,</span><br><span class="line">    sayHello:()=&gt;&#123;</span><br><span class="line">        alert(this.name);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default TestContext;</span><br></pre></td></tr></table></figure><p>第二种方法，使用Provider，通过value属性指定Context中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import TestContext from &quot;./store/test-context&quot;;</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">    return &lt;TestContext.Provider value=&#123;&#123;name:&#x27;猪八戒&#x27;, age:28, gender:&#x27;男&#x27;&#125;&#125;&gt;</span><br><span class="line">        &lt;MyComponent/&gt;</span><br><span class="line">    &lt;/TestContext.Provider&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h2 id="使用Context中存放的数据"><a href="#使用Context中存放的数据" class="headerlink" title="使用Context中存放的数据"></a>使用Context中存放的数据</h2><p>第一种方式，可以通过Consumer标签来访问到Context中的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">//引入之前创建的Context</span><br><span class="line">import TestContext from &#x27;../store/test-context&#x27;;</span><br><span class="line"></span><br><span class="line">const MyComponent = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;TestContext.Consumer&gt;</span><br><span class="line">            &#123;(ctx)=&gt;&#123;</span><br><span class="line">                return (</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        //通过传递的参数ctx，来访问Context中的数据</span><br><span class="line">                        &lt;li&gt;&#123;ctx.name&#125;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&#123;ctx.age&#125;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&#123;ctx.gender&#125;&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;);</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &lt;/TestContext.Consumer&gt;</span><br><span class="line">    );&#125;;</span><br><span class="line">export default MyComponent;</span><br></pre></td></tr></table></figure><p>第二种方式，通过钩子函数来调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useContext&#125; from &#x27;react&#x27;;</span><br><span class="line">import TestContext from &#x27;../store/test-context&#x27;;</span><br><span class="line"></span><br><span class="line">const MyComponent = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    const ctx = useContext(TestContext);</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&#123;ctx.name&#125;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&#123;ctx.age&#125;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&#123;ctx.gender&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line">export default MyComponent;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08State，Effect</title>
      <link href="/posts/de066da5.html"/>
      <url>/posts/de066da5.html</url>
      
        <content type="html"><![CDATA[<h1 id="State的执行流程"><a href="#State的执行流程" class="headerlink" title="State的执行流程"></a>State的执行流程</h1><p>当新的State值与旧值相同时，一定不会触发组件的重新渲染吗？</p><blockquote><p>State的执行流程：</p><ul><li><code>SetState()</code> –&gt; <code>dispatchSetDate()</code>(ReactDOM里的方法) –&gt;  该方法会判断组件当前处于什么阶段，如果<strong>是渲染阶段则</strong>，<strong>不会检查State值是否相同</strong>，如果<strong>不是渲染阶段</strong>，则检查State的值是否相同，<strong>值相同则不对组件进行渲染，值不同则对组件进行渲染</strong>，如果值相同，React在一些情况下会继续执行当前组件的渲染，但是这个渲染不会触发其子组件的渲染，且这次的渲染不会产生实际的效果，这种情况通常会发生在值第一次相同时。</li></ul></blockquote><h1 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h1><p>React组件有部分逻辑都可以直接编写到组件的函数体中的，像是对数组调用filter、map等方法，像是判断某个组件是否显示等。但是有一部分逻辑如果直接写在函数体中，会影响到组件的渲染，这部分会产生“副作用”的代码，是一定不能直接写在函数体中。</p><p>如果直接将修改state的逻辑编写到了组件之中，就会导致组件不断的循环渲染，且会抛出<code>too many re-randers</code>（太多重复渲染），直至调用次数过多内存溢出。</p><h2 id="React-StrictMode"><a href="#React-StrictMode" class="headerlink" title="React.StrictMode"></a>React.StrictMode</h2><p>编写React组件时，我们要极力的避免组件中出现那些会产生“副作用”的代码。同时，如果你处于开发者模式，且React使用了严格模式，也就是在React中使用了<code>React.StrictMode</code>标签，此时React会主动的重复调用一些函数，以使副作用显现。所以在处于开发模式且开启了React严格模式时，这些函数会被调用两次：</p><p>类组件的的 <code>constructor</code>, <code>render</code>, 和 <code>shouldComponentUpdate</code> 方法<br>类组件的静态方法 <code>getDerivedStateFromProps</code><br>函数组件的函数体<br>参数为函数的<code>setState</code><br>参数为函数的<code>useState</code>, <code>useMemo</code>, or <code>useReducer</code></p><p>重复的调用会使副作用更容易凸显出来，你可以尝试着在函数组件的函数体中调用一个<code>console.log</code>你会发现它会执行两次，如果你的浏览器中安装了React Developer Tools，第二次调用会显示为灰色。</p><h2 id="使用Effect"><a href="#使用Effect" class="headerlink" title="使用Effect"></a>使用Effect</h2><p>为了解决这个问题React专门为我们提供了钩子函数<code>useEffect()</code>，Effect的翻译过来就是副作用，专门用来处理那些不能直接写在组件内部的代码。</p><p>哪些代码不能直接写在组件内部呢？像是：获取数据、记录日志、检查登录、设置定时器等。简单来说，就是那些和组件渲染无关，但却有可能对组件产生副作用的代码。</p><p><code>useEffect</code>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useEffect(didUpdate);</span><br></pre></td></tr></table></figure><p><code>useEffect()</code>需要一个函数作为参数，你可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">    /* 编写那些会产生副作用的代码 */</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>useEffect()</code>中的回调函数会在组件每次渲染完毕之后执行，这也是它和写在函数体中代码的最大的不同，函数体中的代码会在组件渲染前执行，而<code>useEffect()</code>中的代码是在组件渲染后才执行，这就避免了代码的执行影响到组件渲染。</p><p>通过使用这个Hook，我设置了React组件在渲染后所要执行的操作。React会将我们传递的函数保存（我们称这个函数为effect），并且在DOM更新后执行调用它。React会确保effect每次运行时，DOM都已经更新完毕。</p><h2 id="Effect依赖项"><a href="#Effect依赖项" class="headerlink" title="Effect依赖项"></a>Effect依赖项</h2><blockquote><ul><li><p>在<code>useEffect()</code>中可以传递第二个参数，第二个参数是一个数组，在数组中可以指定Effect的依赖项，指定后，只有当依赖发生变化时，Effect才会被触发，通常会将Effect中使用的所有的局部变量都设置为依赖项，</p></li><li><p>（因为State是React所提供的钩子函数，每次State重新渲染组件时都会确保State的值不变，所以State不用指定为依赖项）</p></li><li><p>当依赖项为空时，Effect只有组件在初始化时才会执行一次，当不指定依赖项时，每次组件重新渲染时都会执行Effect</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">    /* 编写那些会产生副作用的代码 */</span><br><span class="line">&#125;, [依赖项数组]);</span><br></pre></td></tr></table></figure><h2 id="清除Effect"><a href="#清除Effect" class="headerlink" title="清除Effect"></a>清除Effect</h2><p>组件的每次重新渲染effect都会执行，有一些情况里，两次effect执行会互相影响。比如，在effect中设置了一个定时器，总不能每次effect执行都设置一个新的定时器，所以我们需要在一个effect执行前，清除掉前一个effect所带来的影响。要实现这个功能，可以在effect中将一个函数作为返回值返回，像是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">    /* 编写那些会产生副作用的代码 */</span><br><span class="line">    </span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        /* 这个函数会在下一次effect执行钱调用 */</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>effect返回的函数，会在下一次effect执行前调用，我们可以在这个函数中清除掉前一次effect执行所带来的影响。</p><h2 id="限制Effect"><a href="#限制Effect" class="headerlink" title="限制Effect"></a>限制Effect</h2><p>组件每次渲染effect都会执行，这似乎并不总那么必要。因此在<code>useEffect()</code>中我们可以限制effect的执行时机，在<code>useEffect()</code>中可以将一个数组作为第二个参数传递，像是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useEffect(()=&gt;&#123;</span><br><span class="line">    /* 编写那些会产生副作用的代码 */</span><br><span class="line"></span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        /* 这个函数会在下一次effect执行前调用 */</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, [a, b]);</span><br></pre></td></tr></table></figure><p>上例中，数组中有两个变量a和b，设置以后effect只有在变量a或b发生变化时才会执行。这样即可限制effect的执行次数，也可以直接传递一个空数组，如果是空数组，那么effect只会执行一次。</p><h2 id="使用Effect修改练习"><a href="#使用Effect修改练习" class="headerlink" title="使用Effect修改练习"></a>使用Effect修改练习</h2><p>在《汉堡到家》的练习中，存在着一个bug。当我们在购物车或结账界面减少商品的数量全部为0时（购物车中没有商品时）。购物车或结账页面并不能自动关闭，这里我们就可以借用Effect来解决问题。可以直接修改<code>Cart.js</code>直接向组件中添加如下的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">    if(ctx.totalAmount === 0) &#123;</span><br><span class="line">        setShowCheckout(false);</span><br><span class="line">        setShowDetails(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [ctx]);</span><br></pre></td></tr></table></figure><p>这样一来，当购物车中的商品发生变化时，就会触发useEffect，从而检查商品的总数量，如果总数量为0的话就会将购物车详情页和结账也直接隐藏。</p><p>除了<code>Cart.js</code>以外，FilterMeals组件也存在一个问题，首先，该组件中的表单项我们并没有使用state，所以这个组件是一个非受控组件，虽然目前看来没什么太大的问题，但是我们还是应该处理一下，因为受控组件使用时会更加的灵活，可以适用于更多的场景。其次、该组件的主要作用是过滤汉堡的列表，当用户输入关键字时它可以根据关键字的内容对食物列表进行过滤。问题正在于此，由于每次用户输入都需要过滤，这就意味着它的过滤频率过高了。举个例子，用户要输入“汉堡”这个关键字，他需要一次输入h-a-n-g-b-a-o七个字母，由于每次输入都会触发一次过滤，所以在“汉堡”打出来之前，列表完全是一个空白的状态，同时无用的过滤也对应用的性能造成了一定的影响。怎么办呢？同样可以使用Effect来解决这个问题，修改FilterMeals中的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const [keyword, setKeyword] = useState(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">    const timer = setTimeout(() =&gt; &#123;</span><br><span class="line">        props.onFilter(keyword);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line"></span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, [keyword]);</span><br><span class="line"></span><br><span class="line">const inputChangeHandler = e =&gt; &#123;</span><br><span class="line">    setKeyword(e.target.value.trim());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09Reducer</title>
      <link href="/posts/628a81f5.html"/>
      <url>/posts/628a81f5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Reduecr"><a href="#Reduecr" class="headerlink" title="Reduecr"></a>Reduecr</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>当我们要通过State进行大量的数据修改时，通常要定义各种不同的函数，这样会使State变得臃肿，复杂，因此为解决复杂的State带来的不便，React提供了一种新的State的使用方式–Reducer，它的作用就是将那些与同一个<code>state</code>相关的所有函数都整合到一起，方便在组件中进行调用。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><blockquote><p>Reducer也是一个钩子函数，也要通过<code>useReducer()</code>来进行调用</p><p>参数：</p><ul><li><p>参数1（reducer）：传递一个函数，该函数可以叫做<strong>整合函数</strong>，<strong>该函数的返回值会成为state的新值，所有对当前state的操作都应该在该函数中定义</strong>，</p><p>reducer在执行时，会收到两个参数（可以通过可变参数<code>...args</code>查看）：</p><ol><li>参数1：当前最新的state值</li><li>参数2（action）：需要传递一个对象，该对象中存储了返回值Dispatch中派发的指令</li></ol></li><li><p>参数2（initialArg）：State的初始值，作用与useState()中的值一样</p></li></ul><p>返回值：数组</p><ul><li>参数1：获取state的值</li><li>参数2（Dispatch）：修改state的派发器，<strong>将state的相关操作派发到，参数中的reducer函数去执行</strong></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//为避免组件每次重新渲染使Reducer重复创建，通常会把Reducer定义到组件的外部</span><br><span class="line">const countReducer = (state, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#x27;ADD&#x27;:</span><br><span class="line">      return state + 1;</span><br><span class="line">    case &#x27;SUB&#x27;:</span><br><span class="line">      return state - 1;</span><br><span class="line">    default:</span><br><span class="line">      return state; //为防止上面所有条件都不满足，则返回最新的state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  const [count, countDispatch] = useReducer(countReducer, 1)</span><br><span class="line"></span><br><span class="line">  const addHandler = () =&gt; &#123;</span><br><span class="line">    countDispatch(&#123;type: &#x27;ADD&#x27;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const subHandler = () =&gt; &#123;</span><br><span class="line">    countDispatch(&#123;type: &#x27;SUB&#x27;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;addHandler&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &#123;count&#125;</span><br><span class="line">      &lt;button onClick=&#123;subHandler&#125;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10fetch</title>
      <link href="/posts/d3c9e26b.html"/>
      <url>/posts/d3c9e26b.html</url>
      
        <content type="html"><![CDATA[<h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><h2 id="fetch-1"><a href="#fetch-1" class="headerlink" title="fetch"></a>fetch</h2><blockquote><p><code>fetch</code>用来向服务器发送请求加载数据，基于Promise异步（数据加载完成后自动调用回调函数），是Ajax的升级版。</p><p>参数：</p><ul><li>参数1：请求地址</li><li>参数2：请求信息</li></ul></blockquote><p>Promise：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">  //定义一个state存放学生信息</span><br><span class="line">  const [stuData, setStuData] = useState([]);</span><br><span class="line">  //定义state用于请求stuData数据时，加载的状态 false表示数据没有加载或加载完毕</span><br><span class="line">  const [loading, setLoading] = useState(false);</span><br><span class="line">  //用于记录请求出错的信息</span><br><span class="line">  const [error, setError] = useState(null);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 进入Effect表示数据开始加载</span><br><span class="line">    setLoading(true);</span><br><span class="line">    setError(null); //重置错误</span><br><span class="line">    fetch(&#x27;http://localhost:1337/api/students&#x27;)</span><br><span class="line">      .then((Response) =&gt; &#123;</span><br><span class="line">        //判断是否正常返回响应信息</span><br><span class="line">        if (Response.ok) &#123;</span><br><span class="line">          // Response 表示响应信息</span><br><span class="line">          console.log(Response);</span><br><span class="line">          return Response.json(); //将响应信息的json转换为js对象</span><br><span class="line">        &#125;</span><br><span class="line">        // 程序执行到这里表示没有正常返回响应信息</span><br><span class="line">        setLoading(false);</span><br><span class="line">        // 抛出错误，让catch进行统一处理</span><br><span class="line">        throw new Error(&#x27;数据加载失败，请检查网络后重试&#x27;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(data =&gt; &#123;</span><br><span class="line">        console.log(data.data);</span><br><span class="line">        setStuData(data.data);</span><br><span class="line">        // 获取到数据表示加载完毕</span><br><span class="line">        setLoading(false);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch((error) =&gt; &#123;</span><br><span class="line">        // 所有的错误都要有catch进行统一处理</span><br><span class="line">        //  代码执行到这里，表示出现错误，没有加载到数据</span><br><span class="line">        setLoading(false);</span><br><span class="line">        //设置错误信息</span><br><span class="line">        console.log(error.message)</span><br><span class="line">        setError(error);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  return (&lt;div className=&#123;&#x27;app&#x27;&#125;&gt;</span><br><span class="line">      &#123;(!loading &amp;&amp; error) &amp;&amp; &lt;StudentList stus=&#123;stuData&#125;/&gt;&#125;</span><br><span class="line">      &#123;/* //数据正在加载时，loading一定为true*/&#125;</span><br><span class="line">      &#123;loading &amp;&amp; &lt;p&gt;数据正在加载。。。&lt;/p&gt;&#125;</span><br><span class="line">      &#123;/*与运算，找到false才返回，error是一个对象一旦出错就是true则执行error.message ，不出错则error的初始值是null，则不显示任何信息*/&#125;</span><br><span class="line">      &#123;error &amp;&amp; &lt;p&gt;&#123;error.message&#125;&lt;/p&gt;&#125;</span><br><span class="line">    &lt;/div&gt;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结合await：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">const App = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  //定义一个state存放学生信息</span><br><span class="line">  const [stuData, setStuData] = useState([]);</span><br><span class="line">  //定义state用于请求stuData数据时，加载的状态 false表示数据没有加载或加载完毕</span><br><span class="line">  const [loading, setLoading] = useState(false);</span><br><span class="line">  //用于记录请求出错的信息</span><br><span class="line">  const [error, setError] = useState(null);</span><br><span class="line">  console.log(!error)</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    const fetchData = async () =&gt; &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        setLoading(true);</span><br><span class="line">        setError(null);</span><br><span class="line">        const res = await fetch(&#x27;http://localhost:1337/api/students&#x27;);</span><br><span class="line">        if (res.ok) &#123;</span><br><span class="line">          const data = await res.json();</span><br><span class="line">          setStuData(data.data);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          throw new Error(&#x27;数据加载失败，请检查网络后重试&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        setError(e);</span><br><span class="line">        console.log(e.message)</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">        setLoading(false);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  return (&lt;div className=&#123;&#x27;app&#x27;&#125;&gt;</span><br><span class="line">    &#123;(!loading &amp;&amp; !error) &amp;&amp; &lt;StudentList stus=&#123;stuData&#125;/&gt;&#125;</span><br><span class="line">    &#123;/* //数据正在加载时，loading一定为true*/&#125;</span><br><span class="line">    &#123;loading &amp;&amp; &lt;p&gt;数据正在加载。。。&lt;/p&gt;&#125;</span><br><span class="line">    &#123;/*与运算，找到false才返回，error是一个对象一旦出错就是true则执行error.message ，不出错则error的初始值是null，则不显示任何信息*/&#125;</span><br><span class="line">    &#123;error &amp;&amp; &lt;p&gt;&#123;error.message&#125;&lt;/p&gt;&#125;</span><br><span class="line">  &lt;/div&gt;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11Redux</title>
      <link href="/posts/513d294b.html"/>
      <url>/posts/513d294b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><h2 id="Redux-Toolkit（RTK）"><a href="#Redux-Toolkit（RTK）" class="headerlink" title="Redux Toolkit（RTK）"></a>Redux Toolkit（RTK）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">import ReactDOM from &#x27;react-dom/client&#x27;;</span><br><span class="line">import &#123;Provider, useDispatch, useSelector&#125; from &quot;react-redux&quot;;</span><br><span class="line">import &#123;configureStore, createSlice&#125; from &quot;@reduxjs/toolkit&quot;;</span><br><span class="line"></span><br><span class="line">const stuSlice = createSlice(&#123;</span><br><span class="line">    name: &#x27;stu&#x27;,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">        name: &#x27;孙悟空&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">        gender: &#x27;男&#x27;,</span><br><span class="line">        address: &#x27;花果山&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        setName(state, action) &#123;</span><br><span class="line">            state.name = action.payload;</span><br><span class="line">        &#125;,</span><br><span class="line">        setAge(state, action) &#123;</span><br><span class="line">            state.age = action.payload;</span><br><span class="line">        &#125;,</span><br><span class="line">        setGender(state, action) &#123;</span><br><span class="line">            state.gender = action.payload;</span><br><span class="line">        &#125;,</span><br><span class="line">        setAddress(state, action) &#123;</span><br><span class="line">            state.gender = action.payload;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">const &#123;setName, setAge, setGender, setAddress&#125; = stuSlice.actions;</span><br><span class="line">const schoolSlice = createSlice(&#123;</span><br><span class="line">    name: &#x27;school&#x27;,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">        name: &#x27;花果山一小&#x27;,</span><br><span class="line">        address: &#x27;花果山大街1号&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        setSchoolName(state, action) &#123;</span><br><span class="line">            state.name = action.payload;</span><br><span class="line">        &#125;,</span><br><span class="line">        setSchoolAddress(state, action) &#123;</span><br><span class="line">            state.address = action.payload;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">const &#123;setSchoolName, setSchoolAddress&#125; = schoolSlice.actions;</span><br><span class="line">const store = configureStore(&#123;</span><br><span class="line">    reducer: &#123;</span><br><span class="line">        stu: stuSlice.reducer,</span><br><span class="line">        school: schoolSlice.reducer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">    const stu = useSelector(state =&gt; state.stu);</span><br><span class="line">    const school = useSelector(state =&gt; state.school);</span><br><span class="line">    const dispatch = useDispatch();</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &#123;stu.name&#125; -- &#123;stu.age&#125; -- &#123;stu.gender&#125; -- &#123;stu.address&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">                dispatch(setName(&#x27;猪八戒&#x27;));</span><br><span class="line">            &#125;&#125;&gt;改name</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">                dispatch(setAge(28));</span><br><span class="line">            &#125;&#125;&gt;改age</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">                dispatch(setGender(&#x27;女&#x27;));</span><br><span class="line">            &#125;&#125;&gt;改gender</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">                dispatch(setAddress(&#x27;高老庄&#x27;));</span><br><span class="line">            &#125;&#125;&gt;改address</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &#123;school.name&#125; -- &#123;school.address&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">                dispatch(setSchoolName(&#x27;高老庄中心小学&#x27;));</span><br><span class="line">            &#125;&#125;&gt;改学校name</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">                dispatch(setSchoolAddress(&#x27;高老庄中心大街15号&#x27;));</span><br><span class="line">            &#125;&#125;&gt;改学校address</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">root.render(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">            &lt;App/&gt;</span><br><span class="line">        &lt;/Provider&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="RTK-Query"><a href="#RTK-Query" class="headerlink" title="RTK Query"></a>RTK Query</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const &#123;data: stusData, isSuccess, isLoading&#125; = useGetStudentsQuery(null, &#123;</span><br><span class="line">  // 返回值：</span><br><span class="line">  currentData: undefined, //当前参数的最新配置</span><br><span class="line">  data: undefined, // 最新的数据，不关注参数</span><br><span class="line">  isError: false,// 是否有错误 布尔值</span><br><span class="line">  error: Error(),// 有错时才存在 对象</span><br><span class="line">  isFetching: false,//数据是否在加载 布尔值</span><br><span class="line">  isLoading: false,//数据是否为第一次加载 布尔值</span><br><span class="line">  isSuccess: true,//请求是否成功 布尔值</span><br><span class="line">  isUninitialized: false,// 数据是否还没开始发送 布尔值</span><br><span class="line">  refetch: f(),//用来重新加载数据 函数</span><br><span class="line">  statstatus: &quot;fulfilled&quot;// 请求状态 字符串</span><br><span class="line">  // 参数：</span><br><span class="line">  selectFromResult: result =&gt; &#123;</span><br><span class="line">    if (result.data) &#123;</span><br><span class="line">      result.data = result.data.filter(item =&gt; item.attributes.age &lt; 20);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;, // 用于指定useQuery的返回结果</span><br><span class="line">  pollingInterval: 6000, //请求的轮询间隔</span><br><span class="line">  skip: true, //跳过请求</span><br><span class="line">  refetchOnMountOrArgChange: true, //不使用缓存, 可用数字作为参数来指定缓存时间</span><br><span class="line">  refetchOnFocus: true, //获取焦点时，重新发送请求</span><br><span class="line">  refetchOnReconnect: true, //断网重连时，重新发送请求</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">// 创建Api对象</span><br><span class="line">import &#123;createApi, fetchBaseQuery, setupListeners&#125; from &#x27;@reduxjs/toolkit/dist/query/react&#x27;</span><br><span class="line"></span><br><span class="line">//createApi() 用来创建RTKQ中的api对象，rtkq的所有功能都需要通过该对象进行操作</span><br><span class="line"> const studentApi = createApi(&#123; //需要一个对象作为参数</span><br><span class="line">  reducerPath: &#x27;studentApi&#x27;, //Api的标识，不能和其他的Api或者reducer重复</span><br><span class="line">  baseQuery: fetchBaseQuery(&#123;</span><br><span class="line">    baseUrl: &quot;http://localhost:1337/api/&quot;</span><br><span class="line">  &#125;), //指定查询的基础信息，发送请求使用的工具</span><br><span class="line">   tagTypes: [&#x27;student&#x27;], // 指定标签中的工具类型</span><br><span class="line">  endpoints(build) &#123;</span><br><span class="line">  //build 是请求构建器， 通过build 来设置请求的相关信息</span><br><span class="line">    return &#123;</span><br><span class="line">      //</span><br><span class="line">      getStudents: build.query(&#123;</span><br><span class="line">        // 指定请求的功能</span><br><span class="line">        query() &#123;</span><br><span class="line">        //  指定请求的子路径</span><br><span class="line">          return &#x27;students&#x27;;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 用来专换响应数据的格式</span><br><span class="line">        transformResponse(baseQueryReturnValue, meta, arg) &#123;</span><br><span class="line">          return baseQueryReturnValue.data;</span><br><span class="line">        &#125;,</span><br><span class="line">        providesTags:  [&#123;type: &#x27;student&#x27;, id: &#x27;LIST&#x27;&#125;], //指定标签</span><br><span class="line">      &#125;),</span><br><span class="line">      getStudentById: build.query(&#123;</span><br><span class="line">        query(id) &#123;</span><br><span class="line">          return `students/$&#123;id&#125;`</span><br><span class="line">        &#125;,</span><br><span class="line">        transformResponse(baseQueryReturnValue, meta, arg) &#123;</span><br><span class="line">          return baseQueryReturnValue.data;</span><br><span class="line">        &#125;,</span><br><span class="line">        providesTags: (id) =&gt; [&#123;type: &#x27;student&#x27;, id&#125;],</span><br><span class="line">        // keepUnusedDataFor: 10 //设置 保持没使用过数据的时间（缓存），单位s，默认60s</span><br><span class="line">      &#125;),</span><br><span class="line">      delStudent: build.mutation(&#123;</span><br><span class="line">        query(id) &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            url: `students/$&#123;id&#125;`,</span><br><span class="line">            method: &#x27;delete&#x27;</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      addStudent: build.mutation(&#123;</span><br><span class="line">        query(stu) &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            url: &#x27;students&#x27;,</span><br><span class="line">            method: &#x27;post&#x27;,</span><br><span class="line">            body: &#123;data: stu&#125;,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        invalidatesTags: [&#123;type: &#x27;student&#x27;, id: &#x27;LIST&#x27;&#125;], // 使标签失效</span><br><span class="line">      &#125;),</span><br><span class="line">      updateStudent: build.mutation(&#123;</span><br><span class="line">        query(stu) &#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            url: `students/$&#123;stu.id&#125;`,</span><br><span class="line">            method: &#x27;put&#x27;,</span><br><span class="line">            body: &#123;data: stu.attributes&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        invalidatesTags: (result,error,stu) =&gt;</span><br><span class="line">          [&#123;type: &#x27;student&#x27;, id: stu.id&#125;, &#123;type: &#x27;student&#x27;, id: &#x27;LIST&#x27;&#125;],</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; //endpoints 用于指定Api中的各种功能。是一个方法,需要一个对象作为返回值</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export const &#123;</span><br><span class="line">  useGetStudentsQuery,</span><br><span class="line">  useGetStudentByIdQuery,</span><br><span class="line">  useDelStudentMutation,</span><br><span class="line">  useAddStudentMutation,</span><br><span class="line">  useUpdateStudentMutation,</span><br><span class="line">&#125; = studentApi;</span><br><span class="line"></span><br><span class="line">export default studentApi;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12React-Router，5</title>
      <link href="/posts/7ad70bcb.html"/>
      <url>/posts/7ad70bcb.html</url>
      
        <content type="html"><![CDATA[<h1 id="React-Router，5"><a href="#React-Router，5" class="headerlink" title="React-Router，5"></a>React-Router，5</h1><p>单页应用（SPA）。整个应用只存在一个页面，一个请求地址，这就使得用户只能通过一个地址访问应用，当我们点击组件中的不同链接时应用的地址是不会发生变化的，不利于分享链接，刷新时整个页面都会重新加载。</p><p>React Router为我们提供一种被称为客户端路由的东西，<strong>通过客户端路由可以将URL地址和React组件进行映射</strong>，当URL地址发生变化时，它会根据设置自动的切换到指定组件。并且这种切换完全不依赖于服务器。换句话说，在用户看来浏览器的地址栏确实发生了变化，但是这一变化并不由服务器处理，而是通过客户端路由进行切换。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>添加<code>&lt;BrowserRouter&gt;</code>标签使路由生效，<code>&lt;Router&gt;</code>来对路由和组件进行映射</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line">const root = ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;));</span><br><span class="line">/* HashRouter 会通过url地址中的hash值来对地址进行匹配</span><br><span class="line">*  BrowserRouter 直接通过url地址进行组件的跳转，使用过程中和普通的url地址没什么区别</span><br><span class="line">* 当我们通过点击Link构建的链接进行跳转时，跳转并没有经过服务器，所以没有问题</span><br><span class="line">* 但是当我们刷新页面，或通过普通链接进行跳转时，会向服务器发送请求记载数据（服务器并没有该数据），</span><br><span class="line">* 这时请求并没有经过react Router,所以会返回404</span><br><span class="line">* 解决方案：</span><br><span class="line">* 1.使用HashRouter，服务器不会去判断hash值，所以使用HashRouter后请求仍会有React Router进行处理而不经过路由器</span><br><span class="line">* 2.修改服务器的配置，将所有请求都转发到index.html，交给React Router进行处理</span><br><span class="line">* */</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//App.js</span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&#123;&#x27;App&#x27;&#125;&gt;</span><br><span class="line">      &lt;Menu/&gt;</span><br><span class="line">    &#123;/*  将路由与组件进行映射，使用Route来映射地址和组件</span><br><span class="line">          属性：</span><br><span class="line">            path 映射的url地址</span><br><span class="line">            component 要挂载的组件</span><br><span class="line">            exact 路径是否严格匹配，默认为false</span><br><span class="line">          当Route的路径被访问时，其对应的组件就会被挂载</span><br><span class="line">    */&#125;</span><br><span class="line">      &lt;Route exact path=&quot;/&quot; component = &#123;Home&#125;/&gt;</span><br><span class="line">      &lt;Route exact path=&#123;&#x27;/about&#x27;&#125; component = &#123;About&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &#123;/*&lt;a href=&quot;/&quot;&gt;主页&lt;/a&gt; 使用a标签创建的超链接，会自动向服务器发送请求，重新加载页面</span><br><span class="line">      使用Link或者NavLink标签来代替a标签</span><br><span class="line">      NavLink标签可以指定链接被激活后的样式（内联或者外部样式）</span><br><span class="line">    */&#125;</span><br><span class="line">    &lt;Link to=&quot;/&quot;&gt;主页&lt;/Link&gt;</span><br><span class="line">    &lt;NavLink exact activeClassName=&#123;classes.active&#125; to=&quot;/&quot;&gt;主页&lt;/NavLink&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;Link to=&quot;/about&quot;&gt;关于&lt;/Link&gt;</span><br><span class="line">    &lt;NavLink exact activeStyle=&#123;&#123;textDecoration:&#x27;underline&#x27;&#125;&#125; to=&quot;/about&quot;&gt;关于&lt;/NavLink&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="Router参数"><a href="#Router参数" class="headerlink" title="Router参数"></a>Router参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;/*</span><br><span class="line">        component用来指定路由匹配后被挂载的组件，需要直接传递组件的类，</span><br><span class="line">        通过component构建的组件，会自动创建组件且传递参数</span><br><span class="line">        match -- 匹配的信息</span><br><span class="line">          isExact -- 检查路径是否匹配</span><br><span class="line">          params -- 请求的参数</span><br><span class="line">        location -- 地址信息</span><br><span class="line">        history -- 控制页面的跳转</span><br><span class="line">           需要一个location作为参数</span><br><span class="line">           push() -- 跳转页面</span><br><span class="line">           replace() -- 替换页面</span><br><span class="line">      */&#125;</span><br><span class="line">      &lt;Route exact path=&quot;/&quot; component=&#123;Home&#125;/&gt;</span><br><span class="line">      &lt;Route exact path=&#123;&#x27;/about&#x27;&#125; component=&#123;About&#125;/&gt;</span><br><span class="line">      &#123;/*</span><br><span class="line">          render 也可以用来指定要挂载的组件，它需要一个回调函数来作为参数，回调函数的返回值最终会被挂载</span><br><span class="line">          render 不会自动传递 match，location history 这三个参数，需要通过routePros来传递</span><br><span class="line">      */&#125;</span><br><span class="line">      &#123;/*&lt;Route exact path=&quot;/students/:id&quot; component=&#123;Students&#125;/&gt;*/&#125;</span><br><span class="line">      &#123;/*&lt;Route exact path=&quot;/students/:id&quot; render=&#123;(routePros) =&gt; &#123;*/&#125;</span><br><span class="line">      &#123;/*  return &lt;Students &#123;...routePros&#125; /&gt;*/&#125;</span><br><span class="line">      &#123;/*&#125;&#125;/&gt;*/&#125;</span><br><span class="line">      &#123;/*</span><br><span class="line">      children 也可以用来指定要挂载的函数</span><br><span class="line">        用法一：根render类似，但是不受路径的限制，总会匹配到组件</span><br><span class="line">        用法二：可以传递组件，参数要通过钩子函数手动获取</span><br><span class="line">          useRouteMatch(); useLocation(); useHistory(); useParams();</span><br><span class="line"> */&#125;</span><br><span class="line">      &lt;Route path=&#123;&quot;/students/:id&quot;&#125; children=&#123;&lt;Students/&gt;&#125;/&gt;</span><br><span class="line">      &lt;Route path=&#123;&quot;/students/:id&quot;&#125;&gt;</span><br><span class="line">        &lt;Students/&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/div&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const &#123;path&#125; = useRouteMatch();</span><br><span class="line">&lt;Router path=&#123;`$&#123;path&#125;/hello`&#125;&gt;</span><br><span class="line">&lt;Hello/&gt;</span><br><span class="line">&lt;/Router&gt;</span><br></pre></td></tr></table></figure><h2 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h2><p>Prompt：路由跳转时，提示消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const MyForm = () =&gt; &#123;</span><br><span class="line">  const [isPrompt, setIsPrompt] = useState(false);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Prompt</span><br><span class="line">        when=&#123;isPrompt&#125;</span><br><span class="line">        message=&#123;&#x27;将要离开此页面，你输入的内容将会丢失，确定吗？&#x27;&#125;/&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; onChange=&#123;e =&gt; setIsPrompt(e.target.value.trim().length !== 0)&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13React-Router，6</title>
      <link href="/posts/64789132.html"/>
      <url>/posts/64789132.html</url>
      
        <content type="html"><![CDATA[<h1 id="React-Router，6"><a href="#React-Router，6" class="headerlink" title="React-Router，6"></a>React-Router，6</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  return (&lt;div className=&#123;&#x27;App&#x27;&#125;&gt;</span><br><span class="line">    &lt;Menu/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&#123;&quot;/&quot;&#125; element=&#123;&lt;Home/&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;Route path=&#123;&quot;/about&quot;&#125; element=&#123;&lt;About/&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;Route path=&#123;&quot;/students/:id&quot;&#125; element=&#123;&lt;Students/&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">    &lt;/div&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>&lt;Routes/&gt;</code>标签来创建路由，<code>&lt;Route/&gt;</code>作为Routes的子标签来建立路由与组件的映射关系，通过，<code>element</code>标签属性来挂载组件，默认严格匹配</p></blockquote><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const Students = () =&gt; &#123;</span><br><span class="line">  //获取指定路径的参数</span><br><span class="line">  const param = useParams();</span><br><span class="line">  console.log(param)</span><br><span class="line">  //获取当前的地址信息</span><br><span class="line">  const location = useLocation();</span><br><span class="line">  console.log(location);</span><br><span class="line">  //如果路径匹配则返回一个对象，不匹配则返回null</span><br><span class="line">  const match = useMatch(&quot;/students/:id&quot;);</span><br><span class="line">  console.log(match);</span><br><span class="line">  //获取一个用于跳转页面的对象</span><br><span class="line">  const nav = useNavigate();</span><br><span class="line">  console.log(nav);</span><br><span class="line">  const clickHandler = () =&gt; &#123;</span><br><span class="line">    // nav(&quot;/about&quot;); //默认使用 push方法，保留历史记录</span><br><span class="line">    nav(&quot;/about&quot;, &#123;replace: true&#125;); // 使用replace方法，不保存历史记录</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const stu = STU_DATA.find(item =&gt; item.id === +param.id);</span><br><span class="line">  console.log(stu);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;clickHandler&#125;&gt;&lt;/button&gt;</span><br><span class="line">      &lt;h2&gt;&#123;stu.id&#125;---&#123;stu.name&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//App.js      </span><br><span class="line">&lt;Route path=&#123;&quot;/about&quot;&#125; element=&#123;&lt;About/&gt;&#125;&gt;</span><br><span class="line">        &lt;Route path=&#123;&quot;hello&quot;&#125; element=&#123;&lt;Hello/&gt;&#125;&gt;&lt;/Route&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//About.js</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">     &lt;li&gt;张三&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;李四&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;瑞克&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;莫蒂&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;Outlet/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>&lt;Outlet/&gt;</code>标签进行路由嵌套</p></blockquote><h2 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h2><h3 id="Navigate"><a href="#Navigate" class="headerlink" title="Navigate"></a>Navigate</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const About = (props) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;/*默认使用 push 进行跳转（无法进行回退），*/&#125;</span><br><span class="line">      &lt;Navigate to=&#123;&quot;/students/1&quot;&#125; replace/&gt;</span><br><span class="line">      &lt;h2&gt;关于我们，师徒四人&lt;/h2&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;张三&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;李四&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;瑞克&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;莫蒂&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;Outlet/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;</span><br><span class="line">  &#123;/*&lt;Link to=&#123;&quot;/about&quot;&#125;&gt;关于&lt;/Link&gt;*/&#125;</span><br><span class="line">  &lt;NavLink</span><br><span class="line">    style=&#123;(&#123;isActive&#125;) =&gt; &#123; //style 需要传递回调函数作为参数</span><br><span class="line">      return isActive ? &#123;background: &quot;#bfa&quot;&#125; : null</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    to=&#123;&quot;/about&quot;&#125;&gt;关于&lt;/NavLink&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07模块化规范</title>
      <link href="/posts/66c18ba1.html"/>
      <url>/posts/66c18ba1.html</url>
      
        <content type="html"><![CDATA[<h1 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h1><h2 id="CommonJs模块化"><a href="#CommonJs模块化" class="headerlink" title="CommonJs模块化"></a>CommonJs模块化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//m1.js</span></span><br><span class="line"><span class="comment">// const a = 10;</span></span><br><span class="line"><span class="comment">// const b = 20;</span></span><br><span class="line"><span class="comment">// console.log(&#x27;我是m1模块&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(exports); //空对象</span></span><br><span class="line"><span class="comment">//通过exports单独暴露</span></span><br><span class="line"><span class="comment">// exports.a = &#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// exports.b = &#123;name: &#x27;李四&#x27;&#125;</span></span><br><span class="line"><span class="comment">// exports.c = function fn() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;哈哈&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 通过module.exports来暴露多个值</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;哈哈&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>],</span><br><span class="line">  <span class="attr">c</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hhh&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: 不能通过这种方式来暴露多个值,(module.exports是改对象, exports是改变量)</span></span><br><span class="line"><span class="comment">// exports = &#123;</span></span><br><span class="line"><span class="comment">//   a: &#x27;哈哈&#x27;,</span></span><br><span class="line"><span class="comment">//   b: [1, 3, 5, 7],</span></span><br><span class="line"><span class="comment">//   c: () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;hhh&#x27;);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//Common.js</span></span><br><span class="line"><span class="comment">// 引入自定义模块</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="built_in">require</span>(<span class="string">&#x27;./m1.js&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(m1.a);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1);</span><br><span class="line">m1.<span class="title function_">c</span>();</span><br><span class="line"><span class="comment">// 引入核心模块</span></span><br><span class="line"><span class="comment">// const path = require(&#x27;path&#x27;);</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;node:path&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path);</span><br></pre></td></tr></table></figure><blockquote><p>早期的网页中,是没有一个实质的模块规范的,我们实现模块化的方式,就是最原始的通过script标签来引入多个js文件</p><p><strong>问题</strong>:</p><ul><li>无法选择要引入模块的哪些内容</li><li>在复杂的模块场景下非常容易出错</li></ul><p>在Node中,默认支持的模块化规范叫做CommonJs,在CommonJs中一个js文件就是一个模块</p><p><strong>CommonJs规范</strong>:</p><p>引入模块:</p><ul><li>使用<code>require(&#39;模块的相对路径&#39;)</code>函数来引入模块</li></ul><p>引入自定义模块时:</p><ul><li>模块名要以<code>./或者../开头</code></li><li>扩展名可以省略,Node会自动补全,补全顺序(<code>js&gt;json&gt;node(特殊文件格式)</code>)</li></ul><p>引入核心模块(或第三方模块)时:</p><ul><li>直接写核心模块的名字即可,也可在核心模块前加上<code>node:</code>来提高查找速度</li></ul><p>在定义模块时,模块中的内容默认是不能被外部看到的,可以通过exports来设置要向外暴露的内容</p><p>访问exports的方式有两种:</p><ul><li><code>exports</code>,暴露单个</li><li><code>module.exports</code>,暴露多个</li></ul><p>当我们在其他模块中引入当前模块时,require函数返回的就是exports</p><p>我们可以将希望暴露给外部模块的内容,设置为exports的属性</p><p>默认情况下Node.js会将以下内容视为CommonJs模块:</p><ul><li>使用<code>.cjs</code>为扩展名的文件</li></ul></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename); <span class="comment">//当前模块的绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname); <span class="comment">//当前模块所在目录的路径</span></span><br></pre></td></tr></table></figure><blockquote><p>所有的CommonJs的模块都会被包装到一个函数中:</p><p><code>(function(exports, require, module, __filename, __dirname) &#123;模块化代码&#125;)</code></p><ul><li><code>__filename</code>,当前模块所在的绝对路径</li><li><code>__dirname</code>,当前模块所在目录的路径</li></ul></blockquote><h2 id="ES模块化"><a href="#ES模块化" class="headerlink" title="ES模块化"></a>ES模块化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Es.mjs</span></span><br><span class="line"><span class="comment">// import &#123;a, b, c&#125; from &#x27;./m1.mjs&#x27;;</span></span><br><span class="line"><span class="comment">// 通过as 来指定属性的别名</span></span><br><span class="line"><span class="comment">// import &#123;a as e, b as f, c as g&#125; from &#x27;./m1.mjs&#x27;;</span></span><br><span class="line"><span class="comment">// * 表示全部引用, 尽量使用按需引入, 避免全部引入</span></span><br><span class="line"><span class="comment">// import * as m1 from &#x27;./m1.mjs&#x27;</span></span><br><span class="line"><span class="comment">// console.log(a, b, c);</span></span><br><span class="line"><span class="comment">// console.log(e, f, g);</span></span><br><span class="line"><span class="comment">// console.log(m1, m1.a);</span></span><br><span class="line"><span class="comment">// 默认导出可以随意命名</span></span><br><span class="line"><span class="keyword">import</span> hello, &#123;a, b, c&#125; <span class="keyword">from</span> <span class="string">&quot;./m1.mjs&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hello, a, b, c);</span><br><span class="line"><span class="comment">//m1.mjs</span></span><br><span class="line"><span class="comment">// 命名导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> c = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(&#x27;我是m1.mjs模块&#x27;)</span></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下,node中的模块化标准是CommonJs,要想使用ES的模块化,可以采用两种方式:</p><ul><li>使用<code>mjs</code>为扩展名</li><li>修改<code>package.json</code>将模块化规范设置为ES模块,当设置<code>&quot;type&quot;: &quot;module&quot;</code>时当前项目下所有的js文件都默认为ES模块化规范</li></ul><p>命名暴露:</p><ul><li>引入时名字必须与暴露时保持一致</li></ul><p>默认暴露:</p><ul><li>默认暴露可以随意命名</li><li>一个模块只能有一个默认暴露,且<strong>默认暴露后面必须是一个值</strong></li></ul><p><strong>通过ES模块化,导入的内容都是常量,ES模块都是运行在严格模式下</strong>,Es模块化在浏览器中同样支持,但我们通常不会直接使用,<strong>一般要结合打包工具使用</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08Node核心模块</title>
      <link href="/posts/28b6b532.html"/>
      <url>/posts/28b6b532.html</url>
      
        <content type="html"><![CDATA[<h1 id="Node-核心模块"><a href="#Node-核心模块" class="headerlink" title="Node 核心模块"></a>Node 核心模块</h1><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span> === globalThis);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line"><span class="comment">// process.exit(0) //终止状态码: 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line"><span class="comment">// 宏任务队列</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 微任务队列</span></span><br><span class="line"><span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// tick队列</span></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用栈</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 4 3 2 1</span></span><br></pre></td></tr></table></figure><blockquote><p>核心模块,是 node 中自带的模块,可以在 node 中直接使用</p><ul><li><code>global</code>是 node 中的全局对象,类似于 window,ES 标准下全局作用的标准名是<code>globalThis</code></li></ul><p><strong>核心模块</strong>:</p><p><code>process</code>:表示当前的 node 进程,通过该对象可以获取进程信息,或者对进程做各种操作</p><p><strong>属性和方法</strong>:</p><ul><li><p><code>process.exit()</code>:结束当前进程,终止 node,可以传递终止的状态码</p></li><li><p><code>process.nextTick()</code>:将函数插入到 tick 队列中</p><p>此时代码的执行顺序: <strong>调用栈&gt;tick 队列&gt;微任务队列&gt;宏任务队列</strong></p></li><li><p>tick 队列中的代码,会在下一次事件循环之前执行,在微任务与宏任务队列中的任务之前执行,tick 队列在早期用来代替微任务队列</p></li></ul></blockquote><h3 id="path-fs"><a href="#path-fs" class="headerlink" title="path,fs"></a>path,fs</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//path</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;node:path&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path);</span><br><span class="line"><span class="keyword">let</span> result = path.<span class="title function_">resolve</span>();</span><br><span class="line">result = path.<span class="title function_">resolve</span>(<span class="string">&quot;./模块化/Common.js&quot;</span>);</span><br><span class="line">result = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./模块化/Common.js&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">//fs</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;node:fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fsp = <span class="built_in">require</span>(<span class="string">&quot;node:fs/promises&quot;</span>); <span class="comment">//Promise方式</span></span><br><span class="line"><span class="keyword">const</span> &#123; buffer &#125; = <span class="built_in">require</span>(<span class="string">&quot;stream/consumers&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fs);</span><br><span class="line"><span class="comment">//相对路径不安全</span></span><br><span class="line"><span class="comment">//同步读取文件</span></span><br><span class="line"><span class="comment">// let buf = fs.readFileSync(path.resolve(__dirname, &#x27;./hello.txt&#x27;));</span></span><br><span class="line"><span class="comment">// console.log(buf.toString()); //hello文件内容为字符串,只需转化为字符串即可</span></span><br><span class="line"><span class="comment">//异步读取文件</span></span><br><span class="line"><span class="comment">//回调函数方式</span></span><br><span class="line"><span class="comment">// fs.readFile(</span></span><br><span class="line"><span class="comment">//   path.resolve(__dirname, &#x27;./hello.txt&#x27;),</span></span><br><span class="line"><span class="comment">//   (err, buffer) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     if (err) &#123;</span></span><br><span class="line"><span class="comment">//       console.log(err);</span></span><br><span class="line"><span class="comment">//     &#125;else &#123;</span></span><br><span class="line"><span class="comment">//       console.log(buffer.toString());</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise方式</span></span><br><span class="line"><span class="comment">// fsp.readFile(path.resolve(__dirname, &quot;./hello.txt&quot;))</span></span><br><span class="line"><span class="comment">// .then(buffer =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(buffer.toString());</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// .catch(e =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(e, &#x27;出错了&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//async方式</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> buffer = <span class="keyword">await</span> fsp.<span class="title function_">readFile</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./hello.txt&quot;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="title function_">toString</span>());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//创建新文件或者将数据添加到已有的文件中</span></span><br><span class="line">fsp.<span class="title function_">appendFile</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./hello.txt&quot;</span>), <span class="string">&quot;张三&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//通过读写复制文件</span></span><br><span class="line">fsp</span><br><span class="line">  .<span class="title function_">readFile</span>(<span class="string">&quot;c:\\Users\\w3112\\Desktop\\class91\\hello.txt&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">buffer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fsp.<span class="title function_">appendFile</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./helloCopy.txt&quot;</span>), buffer);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;复制完成&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>path</strong>:表示路径,通过 path 可以用来获取各种路径,要使用 path 要先进行引入</p><p><strong>方法</strong>:</p><ul><li><code>path.resolve()</code>:用来生成一个绝对路径<ul><li>相对路径: <code>./xxx ../xxx xxx</code></li><li>绝对路径:<ul><li>在计算机本地:windows:<code>c:\xxx </code>,linux:<code>/User/xxx</code></li><li>在网络中:<code>http://www.xxx/..., https://www.xxx/...</code></li></ul></li><li>直接调用 resolve 会返回当前工作目录,且通过不同方式执行代码时,获取的工作目录会不同</li><li>将一个相对路径作为参数时,会转换为绝对路径,此时根据工作目录的不同,产生的绝对路径也不同</li><li>为防止产生不同的结果,一般第一个参数传递绝对路径(即<code>__dirname</code>),第二个参数传递相对路径</li></ul></li></ul><p><strong>fs(File System)</strong>:fs 用来帮助 node 来操作磁盘中的文件(即 I&#x2F;O 操作),使用 fs 前也需要进行引入</p><p><strong>方法</strong>:</p><ul><li><code>fs.readFileSync()</code>:同步的读取文件的方法,会阻塞后面代码的执行<ul><li>当我们通过 fs 模块读取磁盘中的数据时,读取到的数据总会以<code>Buffer</code>对象的形式返回</li><li><code>Buffer</code>是从磁盘读取到内存时的缓冲区,用来临时存储数据</li></ul></li><li><code>fsp.appendFile()</code>:创建新文件或者将数据添加到已有文件中</li><li><code>fs.mkdir()</code>:创建目录</li><li><code>fs.rmkdir()</code>:删除目录</li><li><code>fs.rm()</code>:创建文件</li><li><code>fs.rename()</code>:重命名</li><li><code>fs.copyFile()</code>:复制文件</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// //创建目录</span></span><br><span class="line">fsp</span><br><span class="line">  .<span class="title function_">mkdir</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./hello&quot;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//mkdir可以接收一个 配置对象作为第二个参数,通过该对象可以对方法进行配置</span></span><br><span class="line"><span class="comment">//recursive默认为为false,设置为true后,会自动创建不存在的上级目录</span></span><br><span class="line">fsp</span><br><span class="line">  .<span class="title function_">mkdir</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./hello/abc&quot;</span>), &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>, r);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误&quot;</span>, e);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//删除目录</span></span><br><span class="line">fsp</span><br><span class="line">  .<span class="title function_">rmdir</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./hello&quot;</span>), &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>, e);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">fsp</span><br><span class="line">  .<span class="title function_">rm</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./helloCopy.txt&quot;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>, e);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//重命名</span></span><br><span class="line">fsp</span><br><span class="line">  .<span class="title function_">rename</span>(</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./hello.txt&quot;</span>),</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./helloworld.txt&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>, e);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//复制</span></span><br><span class="line">fsp</span><br><span class="line">  .<span class="title function_">copyFile</span>(</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./helloworld.txt&quot;</span>),</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./hello.txt&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>, e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09两道面试题</title>
      <link href="/posts/5f7d6ba1.html"/>
      <url>/posts/5f7d6ba1.html</url>
      
        <content type="html"><![CDATA[<h1 id="两道面试题"><a href="#两道面试题" class="headerlink" title="两道面试题"></a>两道面试题</h1><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><blockquote><p><strong>网络的服务器基于请求(request)和响应(response)</strong>,请求和响应实际上就是一段数据,只是这段数据需要遵循特殊的格式,</p><p>这个特殊的格式由HTTP决定(请求报文与响应报文)</p><p><a href="https://github.com/ehco666">https://github.com/ehco666</a></p><p><code>https://</code>:<strong>协议名</strong> 使用那种协议进行请求,列如:<code>http</code>,<code>ftp</code>等</p><p><code>github.com</code>:<strong>域名</strong>,(domain),整个网络中有数不清的服务器,每一个服务器都有自己的唯一标识,这个标识被称为<strong>ip地址</strong>,列如:192.168.1.17,但是ip地址不方便记忆,因此域名就相当于ip地址的别称</p><p><code>/ehco666</code>:网站资源的路径,表示你要访问网站中的某个资源</p></blockquote><h3 id="TCP-x2F-IP-协议族"><a href="#TCP-x2F-IP-协议族" class="headerlink" title="TCP&#x2F;IP 协议族"></a>TCP&#x2F;IP 协议族</h3><ul><li>TCP&#x2F;IP协议族中包含了一组协议，这道协议规定了互联网中所有的通信的细节</li><li>网络通信的过程有四层组成<ol><li>应用层(http等协议)<ul><li>软件的层面，浏览器，服务器都属于应用层</li></ul></li><li>传输层(tcp等协议)<ul><li>负责对数据进行拆分，把大数据拆分成一个一个的小包</li></ul></li><li>网络层(ip等协议)<ul><li>负责给数据包添加信息</li></ul></li><li>数据链路层(一大堆协议)<ul><li>传输数据包</li></ul></li></ol></li><li>http协议就是应用层的协议,用来规定客户端与服务器间通信的报文格式</li></ul><h3 id="报文-message"><a href="#报文-message" class="headerlink" title="报文(message)"></a>报文(message)</h3><blockquote><p><strong>请求报文(request)</strong>:</p><ul><li><p>请求报文格式:</p><ol><li><p>请求首行,请求报文的第一行,(列如:<code>GET /index.html?username=admin&amp;password=123456 HTTP/1.1</code>)</p><ul><li><p>第一部分<code>GET</code></p><p>get表示请求的方式,常见的方式为get和post请求,get请求用来向服务器请求资源,post请求用来向服务器发送数据</p></li><li><p>第二部分<code>index.html?username=admin&amp;password=123456</code></p><p>表示请求资源的路径,<code>?</code>后面的内容叫做查询字符串,查询字符串是一个名值对结构(一个名字对应一个值),使用<code>=</code>链接,多个名值对之间使用<code>&amp;</code>分割</p><p><strong>get请求</strong>:<br>通过查询字符串将数据发送给服务器,由于查询字符串会在浏览器地址栏中显示出来,所以安全性较差,同时由于url地址长度有限制,所以get请求无法发送较大的数据</p><p><strong>post请求</strong>:</p><p>通过请求体来发送数据,在chrome中可以通过载荷查看,无法通过地址栏查看,安全性较好,且请求体没有大小限制,尽量使用post向服务器发送数据</p></li><li><p>第三部分<code>HTTP/1.1</code></p><p>http协议的版本</p></li></ul></li><li><p>请求头</p><ul><li><p>请求头也是名值对结构,用来告诉服务器我们浏览器的信息,每一个请求头都有他的作用</p></li><li><p><code>Accept</code> 浏览器可以接受的文件类型(列如:text&#x2F;html)</p></li><li><p><code>Accept-Encoding</code>浏览器允许的压缩编码</p></li><li><p><code>User-Agent</code>用户代理,他是用来描述浏览器信息的字符串</p></li></ul></li><li><p>空行</p><ul><li>用来分割请求头和请求体</li></ul></li><li><p>请求体</p><ul><li>post请求通过请求体来发送数据</li></ul></li></ol></li></ul><p><strong>响应报文(response)</strong>:</p><ul><li><p>响应报文格式:</p><ol><li><p>响应首行</p><ul><li><p><code>HTTP/1.1 200 OK</code></p><p><code>HTTP/1.1</code>协议版本</p><p><code>200</code>响应状态码</p><p><code>ok</code>对响应状态码的描述</p><p>响应状态码的规则:</p><p><code>1xx</code>请求处理中</p><p><code>2xx</code>表示成功</p><p><code>3xx</code>表示请求的重定向</p><p><code>4xx</code>客户端错误</p><p><code>5xx</code>服务器错误</p></li></ul></li><li><p>响应头</p><p>响应头也是一个一个的名值对结构,用来告诉浏览器响应的信息</p><p><code>Content-Type</code>:用来描述响应体的类型</p><p><code>Content-Length</code>:用来描述响应体的大小</p></li><li><p>空行</p><p>分割响应头与响应体</p></li><li><p>响应体</p><p>网页主体(body)</p></li></ol></li></ul></blockquote><p><strong>服务器的主要功能</strong>:</p><ul><li>可以接收到浏览器发送的请求报文</li><li>可以向浏览器返回响应报文</li></ul><h2 id="1-当在浏览器中输入地址以后发生了什么"><a href="#1-当在浏览器中输入地址以后发生了什么" class="headerlink" title="1.当在浏览器中输入地址以后发生了什么?"></a>1.当在浏览器中输入地址以后发生了什么?</h2><ol><li><p>DNS解析,获取网站的IP地址(获取网站的真实地址)</p></li><li><p>浏览器需要和服务器建立链接(tcp&#x2F;ip)(三次握手)</p><p>客户端如何与服务器建立(断开)链接(tcp)</p><ul><li>通过三次握手建立链接,通过四次挥手断开链接</li><li>三次握手<ol><li>客户端向服务器发送连接请求(SYN–同步标识)</li><li>服务器收到连接请求,向客户端返回消息(消息:1:同意链接(ACK–同意标识),消息2:申请与客户端建立连接(SYN)</li><li>客户端向服务器发送同意连接的信息(ACK)</li></ol></li><li>四次挥手(断开连接时,不一定为客户端进行断开)<ol><li>客户端向服务器发送请求,通知服务器数据发送完毕(FIN–完成标识),请求断开链接</li><li>服务器向客户端返回数据,得知客户端发送完毕(ACK)</li><li>服务器向客户端返回数据,表示数据接受完毕(FIN),同意断开连接(ACK)</li><li>客户端向服务器发送数据,同意断开连接(ACK)</li></ol></li></ul></li><li><p>向服务器发送请求(http协议)</p></li><li><p>服务器处理请求,并返回响应(http协议)</p></li><li><p>浏览器将响应的页面渲染</p></li><li><p>断开和服务器的连接(四次挥手)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10Express</title>
      <link href="/posts/102acd90.html"/>
      <url>/posts/102acd90.html</url>
      
        <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="路由和中间件"><a href="#路由和中间件" class="headerlink" title="路由和中间件"></a>路由和中间件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">//获取服务器的实例(对象)</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//路由</span></span><br><span class="line"><span class="comment">//在路由的执行中需要做两件事</span></span><br><span class="line"><span class="comment">//1.读取用户的请求(request)</span></span><br><span class="line"><span class="comment">// 2.根据用户的请求返回响应(response)</span></span><br><span class="line"><span class="comment">// 路由的回调执行时,会接收两个参数</span></span><br><span class="line"><span class="comment">// 1. request 2.response</span></span><br><span class="line"><span class="comment">// app.get(&quot;/&quot;, (req, res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   //req 表示用户的请求信息,通过req可以获取用户传递的数据</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;正在访问根目录&#x27;);</span></span><br><span class="line"><span class="comment">//   console.log(req);</span></span><br><span class="line"><span class="comment">//   console.log(req.url);</span></span><br><span class="line"><span class="comment">//   // res表示服务器发送给服务器的响应信息,通过res向客户端返回数据</span></span><br><span class="line"><span class="comment">//   console.log(res);</span></span><br><span class="line"><span class="comment">//   // res.sendStatus(404);</span></span><br><span class="line"><span class="comment">//   res.status(200);</span></span><br><span class="line"><span class="comment">//   res.send(&#x27;你的请求没问题,但是不能给你看&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/hello&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到请求111&quot;</span>);</span><br><span class="line">  <span class="comment">// res.send(&#x27;这是通过中间件返回的响应111&#x27;) //未放行,后续中间件不会执行</span></span><br><span class="line">  <span class="title function_">next</span>(); <span class="comment">//放行,后续中间件执行</span></span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/hello&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到请求222&quot;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;这是通过中间件返回的响应222&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line"><span class="comment">//app.listen(端口号) 监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已经启动&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>express 是 node 中的服务器软件，通过 express 可以快速的在 node 中搭建一个 web 服务器</p><ol><li><p>通过创建<strong>实例对象</strong>来<strong>创建服务器实例</strong></p></li><li><p>通过<code>listen(端口号)</code>来启动服务器</p></li><li><p>路由</p><ul><li><p>如果希望服务器能够正常访问,则需要为服务器设置路由,路由可以根据不同的请求方式和请求地址来处理用户的请求</p></li><li><p><code>app.METHOD(...)</code>:方法可以是<code>get</code>或者<code>post</code>…来创建路由</p></li></ul></li><li><p>中间件</p><ul><li>在 express 中我们使用<code>.use</code>来定义一个中间件,中间件作用和路由很像,用法也很像但是不区分请求方式,只看路径</li><li>会匹配所有请求(模糊匹配,匹配开头路径及以下的子路径),路径设置父目录</li></ul></li><li><p>(路由&#x2F;中间件)回调函数的参数</p><ul><li><strong>requset</strong>:<ul><li><code>.url</code>:返回请求的 url 地址</li><li><code>.query(get请求)</code>:表示查询字符串中的参数</li></ul></li></ul></li></ol><ul><li><p><strong>response</strong>:</p><ul><li><p><code>.sendStatus()</code>:向客户端发送响应状态码</p></li><li><p><code>.status()</code>:设置响应状态码,但是不发送</p></li><li><p><code>.send()</code>:设置状态码并发送响应体</p></li><li><p><strong>next</strong>:</p><ol><li><code>next()</code>是一个函数,调用函数后会触发后续的中间件</li></ol></li></ul><ol start="2"><li><code>next()</code>不能在响应处理完毕后调用</li></ol></li></ul></blockquote><blockquote><p>第一次使用 yarn 安装 nodemon 时,需要配置 yarn 的环境变量</p></blockquote><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">//获取服务器的实例(对象)</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>)); <span class="comment">//将public设置为静态资源目录</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;根目录&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求已经收到&quot;</span>);</span><br><span class="line">  <span class="comment">//获取用户输入的用户名和密码</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">username</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">password</span>);</span><br><span class="line">  <span class="comment">//判断密码是否正确</span></span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">username</span> === <span class="string">&quot;zhang&quot;</span> &amp;&amp; req.<span class="property">query</span>.<span class="property">password</span> === <span class="string">&quot;123456&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;登陆成功&lt;/h1&gt;&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;用户名或密码错误&lt;/h1&gt;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line"><span class="comment">//app.listen(端口号) 监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已经启动&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>服务器中的代码对外部来说都是不可见的,一般情况下我们编写的 html 页面浏览器都无法直接访问,如果希望浏览器能够访问,则需要将页面所在的目录设置为<strong>静态资源</strong>目录</p><ul><li><code>express.static</code>:设置 static 中间件后,浏览器访问时,会自动去 public 目录下寻找是否有匹配的静态资源</li></ul></blockquote><h2 id="param-和-post"><a href="#param-和-post" class="headerlink" title="param 和 post"></a>param 和 post</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">//获取服务器的实例(对象)</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 引入解析请求体的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public&quot;</span>))); <span class="comment">//将public设置为静态资源目录</span></span><br><span class="line"><span class="comment">//添加路由</span></span><br><span class="line"><span class="comment">//get请求发送参数的第二种方式</span></span><br><span class="line"><span class="comment">// /hello/:id 表示用户访问 /hello/xxx 时会触发,</span></span><br><span class="line"><span class="comment">// 在路径中以冒号命名的部分我们称为param,在git请求中它可以被解析为请求参数,一般情况下不会设置太多的参数</span></span><br><span class="line"><span class="comment">// app.get(&quot;/hello/:id&quot;, (req, res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   //可以通过req.params属性来获取这些参数</span></span><br><span class="line"><span class="comment">//   console.log(req.params);</span></span><br><span class="line"><span class="comment">//   res.send(&#x27;hello页面&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//post请求发送参数</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="comment">// res.send(&#x27;&lt;h1&gt;post请求发送参数&lt;/h1&gt;&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line">  <span class="keyword">const</span> password = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">  <span class="keyword">if</span> (username === <span class="string">&quot;admin&quot;</span> &amp;&amp; password === <span class="string">&quot;123456&quot;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line"><span class="comment">//app.listen(端口号) 监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已经启动&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>param</strong>:(约定优于配置)</p><ul><li>在路径中以冒号命名的部分我们称为 param,在 git 请求中它可以被解析为请求参数,一般情况下不会设置太多的参数</li></ul><p><strong>post</strong>:</p><ul><li><code>.body</code>:获取 post 请求的参数(请求体中的参数)</li><li>默认情况下 express 不会自动解析请求体,需要通过中间件来添加功能</li></ul></blockquote><p><strong>登录注册小练习</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">//获取服务器的实例(对象)</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 引入解析请求体的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public&quot;</span>))); <span class="comment">//将public设置为静态资源目录</span></span><br><span class="line"><span class="comment">//创建一个数组来模拟数据库</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">USERS</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;100000&quot;</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&quot;超级管理员&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;120000&quot;</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">//添加路由</span></span><br><span class="line"><span class="comment">//post请求发送参数</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="comment">// res.send(&#x27;&lt;h1&gt;post请求发送参数&lt;/h1&gt;&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line">  <span class="keyword">const</span> password = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">  <span class="comment">//遍历数组</span></span><br><span class="line">  <span class="comment">// for (const user of USERS) &#123;</span></span><br><span class="line">  <span class="comment">//   if (user.username === username &amp;&amp; user.password === password) &#123;</span></span><br><span class="line">  <span class="comment">//     res.send(`登录成功$&#123;user.nickname&#125;`);</span></span><br><span class="line">  <span class="comment">//     return;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// res.send(&quot;登录失败&quot;);</span></span><br><span class="line">  <span class="keyword">const</span> loginUser = <span class="variable constant_">USERS</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">username</span> === username &amp;&amp; item.<span class="property">password</span> === password;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (loginUser) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`登录成功<span class="subst">$&#123;loginUser.nickname&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注册post请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/register&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取用户输入的数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="comment">//解构赋值,把req.body获取到的数据解构出来</span></span><br><span class="line">  <span class="keyword">const</span> &#123; username, password, repwd, nickname &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="comment">//验证用户名是否存在</span></span><br><span class="line">  <span class="keyword">const</span> user = <span class="variable constant_">USERS</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">username</span> === username || item.<span class="property">password</span> === password;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">    <span class="variable constant_">USERS</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">      nickname,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line"><span class="comment">//app.listen(端口号) 监听端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已经启动&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>());</span><br><span class="line"><span class="comment">//将ejs设置为默认的模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="comment">//配置模板引擎的路径</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;瑞克&quot;</span>;</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/students&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;students&quot;</span>, &#123; name &#125;, &#123; <span class="attr">hello</span>: <span class="string">&quot;&lt;h1&gt;张三&lt;/h1&gt;&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/set_name&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  name = req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//配置错误路由</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//该中间件执行时,说明上面所有的路由都没有匹配</span></span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">404</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;你访问的网页被外星人劫持了!!!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;ejs模板引擎&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;hello ejs&lt;/h1&gt;</span><br><span class="line">  &lt;!--通过它可以将render传递进来的数据,直接在网页中显示出来 --&gt;</span><br><span class="line">  &lt;%#=hello%&gt;</span><br><span class="line">  &lt;!-- 存在xss注入风险 --&gt;</span><br><span class="line">  &lt;%#-hello%&gt;</span><br><span class="line">  &lt;%-name %&gt;</span><br><span class="line">  &lt;form action=&quot;/set_name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;请输入名字&quot;&gt;&lt;/input&gt;</span><br><span class="line">    &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;% if(name === &#x27;张三&#x27;) &#123; %&gt;</span><br><span class="line">    &lt;h2&gt;1111&lt;/h2&gt;</span><br><span class="line">  &lt;% &#125;else&#123; %&gt;</span><br><span class="line">    &lt;h2&gt;2222&lt;/h2&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>ejs 模板引擎</strong>:</p><ul><li>ejs 是 node 中的一款模板引擎<ol><li>安装 ejs</li><li>配置 express 的模板引擎为 ejs</li></ol></li><li>注意:模板引擎需要被 express 渲染后才能使用</li><li>通过<code>res.render()</code>来渲染引擎模板,并将其返回给浏览器<ol><li>第一个参数传递 ejs 名称</li><li>可以将一个对象作为第二个参数传递,这样在模板中就可以访问到对象中的数据</li><li>在 ejs 模板中可以通过:<ul><li><code>&lt;%=对象名%&gt;</code>:传递的数据带有标签则会被转义</li><li><code>&lt;%-对象名%&gt;</code>:传递的数据带有标签,不会被转义,存在被 xss 注入的风险</li><li><code>&lt;% %&gt;</code>:可以在其中直接编写 js 代码,js 代码会在服务器中执行</li></ul></li><li>注意: 在 ejs 模板中因为是服务器进行的渲染,要使用<code>&lt;%# %&gt;</code>来注释代码</li></ol></li><li><code>res.redirect()</code>:重定向,告诉浏览器向另外一个地址再发送一个请求</li></ul></blockquote><p><strong>学生列表的增删改查练习</strong>:</p><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs/promises&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>());</span><br><span class="line"><span class="comment">//将ejs设置为默认的模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="comment">//配置模板引擎的路径</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">STUDENT</span> = <span class="built_in">require</span>(<span class="string">&quot;./data/students.json&quot;</span>);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/students&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;students&quot;</span>, &#123; <span class="attr">stus</span>: <span class="variable constant_">STUDENT</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建添加学生信息的路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/add_student&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//在路由中要做什么</span></span><br><span class="line">  <span class="comment">//生成一个id</span></span><br><span class="line">  <span class="keyword">const</span> id = <span class="variable constant_">STUDENT</span>.<span class="title function_">at</span>(-<span class="number">1</span>) ? <span class="variable constant_">STUDENT</span>.<span class="title function_">at</span>(-<span class="number">1</span>).<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//1.获取用户填写的信息</span></span><br><span class="line">  <span class="keyword">const</span> &#123; name, age, gender &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">const</span> newUser = &#123;</span><br><span class="line">    id,</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">age</span>: +age,</span><br><span class="line">    <span class="attr">gender</span>: gender,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="comment">//2.验证用信息(略)</span></span><br><span class="line">  <span class="comment">//3.将用户信息添加到数据中</span></span><br><span class="line">  <span class="variable constant_">STUDENT</span>.<span class="title function_">push</span>(newUser);</span><br><span class="line">  fs.<span class="title function_">writeFile</span>(</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./data/students.json&quot;</span>),</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable constant_">STUDENT</span>)</span><br><span class="line">  )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//重定向</span></span><br><span class="line">      res.<span class="title function_">redirect</span>(<span class="string">&quot;/students&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(失败);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">//4.返回响应</span></span><br><span class="line">  <span class="comment">//这种方式体验不好,添加成功还需要回退,刷新才能显示</span></span><br><span class="line">  <span class="comment">// res.send(&#x27;添加成功&#x27;);</span></span><br><span class="line">  <span class="comment">//直接在路由中渲染ejs虽然能够实现效果,但是会存在表单重复提交的问题</span></span><br><span class="line">  <span class="comment">// res.render(&quot;students&quot;, &#123;stus: STUDENT&#125;);</span></span><br><span class="line">  <span class="comment">//使用res.redirect进行重定向, 告诉浏览器向另外一个地址在发送一个请求</span></span><br><span class="line">  <span class="comment">// res.redirect(&quot;/students&quot;);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建删除学生信息的路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/delete&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.获取要删除的学生id</span></span><br><span class="line">  <span class="keyword">const</span> id = +req.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="comment">//2.根据id删除学生</span></span><br><span class="line">  <span class="variable constant_">STUDENT</span> = <span class="variable constant_">STUDENT</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">stu</span>) =&gt;</span> stu.<span class="property">id</span> !== id);</span><br><span class="line">  fs.<span class="title function_">writeFile</span>(</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./data/students.json&quot;</span>),</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable constant_">STUDENT</span>)</span><br><span class="line">  )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//重定向</span></span><br><span class="line">      res.<span class="title function_">redirect</span>(<span class="string">&quot;/students&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(失败);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建修改学生信息的路由</span></span><br><span class="line"><span class="comment">//数据回显</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/to-update&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取学生id</span></span><br><span class="line">  <span class="keyword">const</span> id = +req.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> student = <span class="variable constant_">STUDENT</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === id);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;update&quot;</span>, &#123; student &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//数据提交</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/update-student&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取id(通过查询字符串,注意要用query获取)</span></span><br><span class="line">  <span class="comment">// const id = req.query.id;</span></span><br><span class="line">  <span class="keyword">const</span> &#123; id, name, age, gender &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id, name, age, gender);</span><br><span class="line">  <span class="comment">//根据id修改学生信息</span></span><br><span class="line">  <span class="keyword">const</span> student = <span class="variable constant_">STUDENT</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> == id);</span><br><span class="line">  student.<span class="property">name</span> = name;</span><br><span class="line">  student.<span class="property">age</span> = +age;</span><br><span class="line">  student.<span class="property">gender</span> = gender;</span><br><span class="line">  <span class="comment">//写入文件, 重定向</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./data/students.json&quot;</span>),</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable constant_">STUDENT</span>)</span><br><span class="line">  )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//重定向</span></span><br><span class="line">      res.<span class="title function_">redirect</span>(<span class="string">&quot;/students&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(失败);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 配置错误路由</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//该中间件执行时,说明上面所有的路由都没有匹配</span></span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">404</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;&lt;h1&gt;你访问的网页被外星人劫持了!!!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>students.ejs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;ejs模板引擎&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    table &#123;</span><br><span class="line">      border-collapse: collapse;</span><br><span class="line">    &#125;</span><br><span class="line">    th, td &#123;</span><br><span class="line">      border: 1px #000 solid;</span><br><span class="line">      font-size: 20px;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    caption &#123;</span><br><span class="line">      font-size: 25px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;hello ejs&lt;/h1&gt;</span><br><span class="line">  &lt;%for(const stu of stus) &#123; %&gt;</span><br><span class="line">    &lt;%= stu.id%&gt; - &lt;%= stu.name %&gt; - &lt;%= stu.age %&gt; - &lt;%= stu.gender %&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">  &lt;% if(stus &amp;&amp; stus.length&gt;0) &#123; %&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;caption&gt;学生信息&lt;/caption&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;学号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;% for(const stu of stus) &#123; %&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;&lt;%= stu.id%&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;%= stu.name%&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;%= stu.age%&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;%= stu.gender%&gt;&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;</span><br><span class="line">            &lt;a onclick=&quot;return confirm(&#x27;确认删除吗?&#x27;)&quot; href=&quot;/delete?id=&lt;%=stu.id%&gt; &quot;&gt;删除&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;/to-update?id=&lt;%=stu.id%&gt; &quot;&gt;修改&lt;/a&gt;</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;% &#125;else&#123; %&gt;</span><br><span class="line">    &lt;p&gt;学生列表为空!!&lt;/p&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;form action=&quot;/add_student&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      姓名: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      年龄: &lt;input type=&quot;number&quot; max=&quot;150&quot; min=&quot;0&quot; name=&quot;age&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      性别: &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot;&gt;男&lt;/input&gt;</span><br><span class="line">      &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot;&gt;女&lt;/input&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button&gt;添加&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>update.ejs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;修改学生列表信息&lt;/h1&gt;</span><br><span class="line">  &lt;form action=&quot;/update-student&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;!-- 通过hidden隐藏表单项,这样可以传递一些不希望被用户看到的数据 --&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&lt;%=student.id %&gt; &quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      姓名: &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&lt;%=student.name %&gt; &quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      年龄: &lt;input type=&quot;number&quot; max=&quot;150&quot; min=&quot;0&quot; name=&quot;age&quot; value=&quot;&lt;%=student.age %&gt;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      性别: &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; &lt;%= student.gender === &#x27;男&#x27; &amp;&amp; &quot;checked&quot; %&gt; &gt;男&lt;/input&gt;</span><br><span class="line">      &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot; &lt;%= student.gender === &#x27;女&#x27; &amp;&amp; &quot;checked&quot; %&gt; &gt;女&lt;/input&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button&gt;修改&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><p><strong>使用 router 对 index.js 进行解耦</strong>:</p><p><code>student.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs/promises&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">STUDENT</span> = <span class="built_in">require</span>(<span class="string">&quot;../data/students.json&quot;</span>);</span><br><span class="line"><span class="comment">//学生列表路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/list&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;students&quot;</span>, &#123; <span class="attr">stus</span>: <span class="variable constant_">STUDENT</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//添加学生路由</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/add&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//生成一个id</span></span><br><span class="line">  <span class="keyword">const</span> id = <span class="variable constant_">STUDENT</span>.<span class="title function_">at</span>(-<span class="number">1</span>) ? <span class="variable constant_">STUDENT</span>.<span class="title function_">at</span>(-<span class="number">1</span>).<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//1.获取用户填写的信息</span></span><br><span class="line">  <span class="keyword">const</span> &#123; name, age, gender &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">const</span> newUser = &#123;</span><br><span class="line">    id,</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">age</span>: +age,</span><br><span class="line">    <span class="attr">gender</span>: gender,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">  <span class="comment">//2.验证用信息(略)</span></span><br><span class="line">  <span class="comment">//3.将用户信息添加到数据中</span></span><br><span class="line">  <span class="variable constant_">STUDENT</span>.<span class="title function_">push</span>(newUser);</span><br><span class="line">  <span class="comment">//调用next让后续路由继续处理,进入存储文件中间件</span></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//删除学生路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/delete&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1.获取要删除的学生id</span></span><br><span class="line">  <span class="keyword">const</span> id = +req.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="comment">//2.根据id删除学生</span></span><br><span class="line">  <span class="variable constant_">STUDENT</span> = <span class="variable constant_">STUDENT</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">stu</span>) =&gt;</span> stu.<span class="property">id</span> !== id);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//修改学生路由</span></span><br><span class="line"><span class="comment">//数据回显</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/to-update&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取学生id</span></span><br><span class="line">  <span class="keyword">const</span> id = +req.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> student = <span class="variable constant_">STUDENT</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === id);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;update&quot;</span>, &#123; student &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//数据提交</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/update-student&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取id(通过查询字符串,注意要用query获取)</span></span><br><span class="line">  <span class="comment">// const id = req.query.id;</span></span><br><span class="line">  <span class="keyword">const</span> &#123; id, name, age, gender &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id, name, age, gender);</span><br><span class="line">  <span class="comment">//根据id修改学生信息</span></span><br><span class="line">  <span class="keyword">const</span> student = <span class="variable constant_">STUDENT</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> == id);</span><br><span class="line">  student.<span class="property">name</span> = name;</span><br><span class="line">  student.<span class="property">age</span> = +age;</span><br><span class="line">  student.<span class="property">gender</span> = gender;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建处理存储文件的中间件</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">writeFile</span>(</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../data/students.json&quot;</span>),</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable constant_">STUDENT</span>)</span><br><span class="line">  )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//重定向</span></span><br><span class="line">      res.<span class="title function_">redirect</span>(<span class="string">&quot;/students/list&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(操作失败);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p><code>index.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs/promises&quot;</span>);</span><br><span class="line"><span class="comment">//引入router</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./router/user&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> goodsRouter = <span class="built_in">require</span>(<span class="string">&quot;./router/goods&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>());</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"><span class="comment">//使用router</span></span><br><span class="line"><span class="comment">//指定路径,可以防止路由的路径命名冲突</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/user&quot;</span>, userRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/goods&quot;</span>, goodsRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/students&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;./router/student&quot;</span>));</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote><p>Http 协议是一个无状态的协议,服务器无法区分发送请求的是同一个客户端</p><p><strong>Cookie</strong>:</p><ul><li>cookie 是 http 协议中用来解决无状态问题的技术</li><li>cookie 的本质是一个头<ol><li>服务器以响应头的形式将 cookie 发送给客户端,客户端收到以后会将其存储,并在下次向服务器发送请求时将其传回,这样服务器就可以根据 cookie 来识别出客户端了</li></ol></li><li><code>res.cookie()</code>来向客户端发送一个 cookie<ol><li>第一个参数传递 cookie 的名称</li><li>第二个参数传递 cookie 的值</li><li>第三个参数传递一个配置对象<em>options</em></li></ol></li><li><code>req.cookies.发送的cookie</code>:客户端携带 cookie</li><li>注意 cookie 发送给浏览器后就不能再进行删除,但是可以通过新的 cookie 替换旧的 cookie<ol><li>在配置对象中通过<code>maxAge: </code>(单位毫秒),来传递一个有效期为 0 毫秒的 cookie,对旧 cookie 进行替换,达到删除 cookie 的目的</li></ol></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs/promises&quot;</span>);</span><br><span class="line"><span class="comment">//引入router</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"><span class="comment">//使用router</span></span><br><span class="line"><span class="comment">//指定路径,可以防止路由的路径命名冲突</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/students&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;./router/student&quot;</span>));</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/set&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// maxAge: 10000, //10S</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>, <span class="comment">//一个月</span></span><br><span class="line">  &#125;);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;发送cookie&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/get&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;接收,携带cookie&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/delete-cookie&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//替换旧的cookie</span></span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;删除cookie&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//引入session</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs/promises&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>());</span><br><span class="line"><span class="comment">//使用session</span></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/set&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>);</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">username</span> = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;查看session&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/get&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">session</span>.<span class="property">username</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;获取session&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>cookie 的不足</strong>:</p><ul><li>由于 cookie 是有服务器创建,浏览器保存,每次浏览器访问服务器时都需要将 cookie 发回,导致了不能在 cookie 中存放较多的数据</li><li>cookie 是明文保存的(不能存放敏感信息)且直接存放在客户端,容易被窜改盗用</li></ul><p><strong>session</strong>:</p><ul><li>session 服务器中的一个对象,这个对象用来存储用户的数据</li><li>每一个 session 对象都有一个唯一的 id,id 会通过 cookie 的形式发送给客户端,客户端每次访问时只需要将存储有 id 的 cookie 发回即可获取他在服务器中存储的数据</li><li>使用<code>require.session</code>可以查看 session 或设置 session 的属性</li><li>session 默认的时效为一次会话</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//引入cookie</span></span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs/promises&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="comment">//引入FileStore</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FileStore</span> = <span class="built_in">require</span>(<span class="string">&quot;session-file-store&quot;</span>)(session);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="attr">store</span>: <span class="keyword">new</span> <span class="title class_">FileStore</span>(&#123;</span><br><span class="line">      <span class="comment">//设置session存放路径</span></span><br><span class="line">      <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./sessions&quot;</span>),</span><br><span class="line">      <span class="comment">//加密session</span></span><br><span class="line">      <span class="attr">secret</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="comment">//session的有效期(最大闲置时间)单位秒,默认1小时</span></span><br><span class="line">      <span class="attr">ttl</span>: <span class="number">3600</span>,</span><br><span class="line">      <span class="comment">//清除过期的session,单位秒,默认一小时</span></span><br><span class="line">      <span class="attr">reapInterval</span>: <span class="number">3600</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"><span class="comment">//使用router</span></span><br><span class="line"><span class="comment">//指定路径,可以防止路由的路径命名冲突</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/students&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;./router/student&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (username === <span class="string">&quot;admin&quot;</span> &amp;&amp; password === <span class="string">&quot;123000&quot;</span>) &#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">loginUser</span> = username; <span class="comment">//由于此时username存储在了内存中,并未保存在文件中,所以在第一次登录时拿不到username</span></span><br><span class="line">    <span class="comment">//使username立刻存储到文件中</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">save</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">redirect</span>(<span class="string">&quot;/students/list&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/logout&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//立刻销毁session</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/set&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// maxAge: 10000, //10S</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>, <span class="comment">//一个月</span></span><br><span class="line">  &#125;);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;发送cookie&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/get&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;接收,携带cookie&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/delete-cookie&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//替换旧的cookie</span></span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;删除cookie&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已启动~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>session 持久化(写入文件&#x2F;存储数据库)</strong>:</p><ul><li>引入 FileStore 使 session 写入文件</li><li>FileStore 常用的配置对象:<ol><li><code>path</code>:设置 session 存放路径</li><li><code>secret</code>:加密 session</li><li><code>ttl</code>:session 的有效期(最大闲置时间)单位秒,默认 1 小时</li><li><code>reapInterval</code>:清除过期的 session,单位秒,默认一小时</li></ol></li><li>session 的方法:<ol><li><code>destroy</code>:立刻销毁 session</li><li><code>save</code>:立刻存储到文件</li></ol></li></ul></blockquote><h2 id="csrf-攻击"><a href="#csrf-攻击" class="headerlink" title="csrf 攻击"></a>csrf 攻击</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>csrf攻击<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这个网站里有你想要的所有东西<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:3000/students/delete?id=7&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;正在加载中...&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;iframe style=&quot;display: none;&quot; name=&quot;hello&quot;&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="comment">  &lt;form action=&quot;http://localhost:3000/students/add&quot; method=&quot;post&quot; target=&quot;hello&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;张三&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;text&quot; name=&quot;age&quot; value=&quot;18&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;text&quot; name=&quot;gender&quot; value=&quot;女&quot;&gt;</span></span><br><span class="line"><span class="comment">  &lt;/form&gt;</span></span><br><span class="line"><span class="comment">  &lt;script&gt;</span></span><br><span class="line"><span class="comment">    document.forms[0].submit();</span></span><br><span class="line"><span class="comment">  &lt;/script&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>csrf 攻击(跨站请求伪造)</strong>:</p><p>简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的</p></blockquote><h2 id="处理-csrf-攻击"><a href="#处理-csrf-攻击" class="headerlink" title="处理 csrf 攻击"></a>处理 csrf 攻击</h2><p><strong>referer 头检查请求的来源</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一权限检查</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//检查请求头</span></span><br><span class="line">  <span class="comment">//获取请求头</span></span><br><span class="line">  <span class="keyword">const</span> referer = req.<span class="title function_">get</span>(<span class="string">&quot;referer&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(referer);</span><br><span class="line">  <span class="keyword">if</span> (!referer || !referer.<span class="title function_">startsWith</span>(<span class="string">&quot;http://localhost:3000/&quot;</span>)) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;你没有这个权限&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">loginUser</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>post 请求结合 token</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生列表路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/list&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//生成一个token</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">CsrfToken</span> = <span class="title function_">uuid</span>();</span><br><span class="line">  <span class="comment">//将token添加到session中</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">csrfToken</span> = <span class="title class_">CsrfToken</span>;</span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">save</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;students&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">stus</span>: <span class="variable constant_">STUDENT</span>,</span><br><span class="line">      <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">loginUser</span>,</span><br><span class="line">      <span class="title class_">CsrfToken</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加学生路由</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/add&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//拿到客户端发送的token</span></span><br><span class="line">  <span class="keyword">const</span> csrfToken = req.<span class="property">body</span>.<span class="property">_csrf</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(csrfToken);</span><br><span class="line">  <span class="comment">//session的token</span></span><br><span class="line">  <span class="keyword">const</span> sessionToken = req.<span class="property">session</span>.<span class="property">csrfToken</span>;</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">csrfToken</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sessionToken);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sessionToken === csrfToken);</span><br><span class="line">  <span class="comment">//把客户端的token与session的token进行比对</span></span><br><span class="line">  <span class="keyword">if</span> (sessionToken.<span class="title function_">trim</span>() === csrfToken.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="comment">//生成一个id</span></span><br><span class="line">    <span class="keyword">const</span> id = <span class="variable constant_">STUDENT</span>.<span class="title function_">at</span>(-<span class="number">1</span>) ? <span class="variable constant_">STUDENT</span>.<span class="title function_">at</span>(-<span class="number">1</span>).<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//1.获取用户填写的信息</span></span><br><span class="line">    <span class="keyword">const</span> &#123; name, age, gender &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">const</span> newUser = &#123;</span><br><span class="line">      id,</span><br><span class="line">      <span class="attr">name</span>: name,</span><br><span class="line">      <span class="attr">age</span>: +age,</span><br><span class="line">      <span class="attr">gender</span>: gender,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//2.验证用信息(略)</span></span><br><span class="line">    <span class="comment">//3.将用户信息添加到数据中</span></span><br><span class="line">    <span class="variable constant_">STUDENT</span>.<span class="title function_">push</span>(newUser);</span><br><span class="line">    <span class="comment">//调用next让后续路由继续处理,进入存储文件中间件</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">save</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;token出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>处理 csrf 攻击的方式</strong>:</p><ul><li>检查请求头,使用<code>referer</code>头来检查请求的来源</li><li>使用验证码</li><li>尽量使用 post 请求(结合 token)</li></ul><p><strong>token</strong>:</p><ul><li>可以在创建表单时随机生成一个令牌,存储到 session 中,并通过模板发送给用户,用户提交表单时,必须将 token 发回,才可以进行后续操作</li><li>可以用 uuid 来生成唯一的 token</li></ul></blockquote><p><strong>遇到的问题</strong>:</p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/uuid%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="image-20221117223448659"></p><p><code>https://raw.githubusercontent.com/ehco666/to-picgo/main/img/uuid%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.png</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01Node.js简介</title>
      <link href="/posts/cbe485bd.html"/>
      <url>/posts/cbe485bd.html</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js简介"><a href="#Node-js简介" class="headerlink" title="Node.js简介"></a>Node.js简介</h1><h2 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h2><blockquote><p><strong><code>Node.js</code>是一个构建在v8引擎之上</strong>的<code>JavaScript</code><strong>运行环境</strong>,<strong>它使得js可以运行在浏览器以外的地方</strong>,相对于大部分的服务端语言来说,node.js有很大的不同,<strong>它采用单线程,且通过异步的方式来处理并发的问题.</strong></p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><blockquote><p><strong>特点</strong>:</p><ul><li>运行在服务端的js</li><li>用来编写服务器</li><li>单线程,<strong>异步</strong>,非阻塞**,统一API**</li></ul><p><strong>node.js与javascript的区别</strong>:</p><ul><li><code>ECMAJavaScript</code>标准一样</li><li>node.js保留了js的DOM,BOM中,一些有用的方法</li></ul></blockquote><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><blockquote><p><strong>nvm(node版本控制)</strong>:</p><ul><li><code>nvm list</code>显示已安装的node版本</li><li><code>nvm install 版本</code>安装指定版本的味道</li><li><code>nvm use 版本</code>指定要使用的node版本</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02同步与异步</title>
      <link href="/posts/cace4ac6.html"/>
      <url>/posts/cace4ac6.html</url>
      
        <content type="html"><![CDATA[<h1 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><blockquote><p><strong>进程</strong>:</p><ul><li>程序的运行环境,(相当于一个工厂)</li></ul><p><strong>线程</strong>:</p><ul><li>线程是实际进行运算的东西,(相当于工厂里的工人)</li></ul></blockquote><h2 id="同步与异步-1"><a href="#同步与异步-1" class="headerlink" title="同步与异步"></a>同步与异步</h2><p><strong>程序同步执行</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序同步执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// 阻塞</span></span><br><span class="line">  <span class="keyword">const</span> begin = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="comment">// 阻塞程序五秒</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - begin &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//sum会在111执行5秒后才会执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>程序异步执行</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序异步执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, cb</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// return在异步中拿不到返回结果</span></span><br><span class="line">    <span class="comment">// return a + b;</span></span><br><span class="line">    <span class="comment">// 使用回调函数来返回结果</span></span><br><span class="line">    <span class="title function_">cb</span>(a + b);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//异步执行,在111执行完毕后,程序不会在阻塞5秒来等待sum函数的执行结果,而是紧接着执行222,等5秒过后在返回sum的返回值</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// console.log(result);//sum会在111执行5秒后才会执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"><span class="comment">// 回调地狱</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">sum</span>(result, <span class="number">1</span>, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">sum</span>(result, <span class="number">2</span>, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">sum</span>(result, <span class="number">3</span>, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>同步</strong>:</p><ul><li>通常情况下代码都是自上向下一行一行执行的,因此前边的代码不执行后边的代码也不会执行</li><li>同步的代码执行会出现阻塞的情况</li><li>一行代码执行慢,会影响到整个程序的执行</li></ul><p><strong>解决同步的问题</strong>:</p><ul><li><code>java, python</code>等语言的处理:<ul><li>通过<strong>多线程来处理</strong>,(对计算机性能的要求较高)</li></ul></li><li><code>node.js</code>:<ul><li>通过<strong>异步方式来处理</strong>,(<strong>单线程</strong>):<ul><li>一段代码的执行不会影响到其他代码</li><li>需要通过<strong>回调函数来返回结果</strong></li></ul></li><li><strong>异步存在的问题</strong>:<ul><li>异步的代码无法通过<code>retrurn</code>来设置返回值,(因为return为立即执行函数,与异步冲突)</li></ul></li><li>基于回调函数的异步带来的问题<ul><li>容易造成回调地狱,(可读性差, 可调试性差)</li><li>解决方法:<ul><li><code>Promise</code>的横空出世可代替回调函数来返回结果</li><li>Promise是一个用来存储数据的对象<ul><li>Promise存储数据的方式比较特殊,这种方式使得Promise用来存储异步调用的数据</li></ul></li></ul></li></ul></li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02Promise</title>
      <link href="/posts/c60d450e.html"/>
      <url>/posts/c60d450e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="Promise简介"><a href="#Promise简介" class="headerlink" title="Promise简介"></a>Promise简介</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 存储</span></span><br><span class="line">    <span class="comment">// resolve(&#x27;resolve存储的数据&#x27;);</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;reject存储的数据&#x27;</span>);</span><br><span class="line">    <span class="comment">// throw new Error(&#x27;哈哈,出错啦!&#x27;);</span></span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// console.log(promise); //undefined 因为console.log 立即执行,此时异步还没执行完毕</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(promise);</span></span><br><span class="line"><span class="comment">// &#125;, 2000);</span></span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="comment">// 1.then()</span></span><br><span class="line"><span class="comment">// promise.then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;1&#x27;, result);//promise中存储的数据正常时执行</span></span><br><span class="line"><span class="comment">// &#125;, (reason) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;2&#x27;, reason);//promise中存储的数据出现异常时执行</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 2.catch()</span></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="string">&#x27;22222&#x27;</span>, reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// // 3.finally()</span></span><br><span class="line"><span class="comment">// promise.finally(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;总会执行&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>异步调用必须要通过回调函数来返回数据,当我们进行一些复杂的调用时,会出现’回调地狱’</p><p><strong>Promise</strong>:</p><ul><li><code>Promise</code>可以帮我们解决异步任务中的回调函数的问题</li><li><code>Promise</code>是一个用来存储数据的容器,它拥有一套特殊的存取数据的方式,该方式使得它可以存储异步异步调用结果</li></ul><p><strong>创建Promise</strong>:</p><ul><li>创建Promise时,构造函数中需要一个函数作为参数</li><li>Promise构造函数的回调函数,会在创建Promise时调用,调用时会传递进来连个参数(<code>resolve, reject</code>)</li><li><strong>在Promise中维护了两个隐藏的属性</strong>:<ul><li><code>PromiseResult</code>:用来存储数据</li><li><code>PromiseState</code>:记录了Promise的三种状态:<ul><li>pending:(进行中)</li><li>fulfilled:(完成)</li><li>rejected:(拒绝,出错)</li><li>state只能修改一次,修改以后永远不会在变</li></ul></li><li><strong>流程</strong>:<ul><li>当Promise创建时,PromiseState的初始值为pending</li><li>当通过resolve存储数据时,PromiseState 变为fulfilled(完成),PromiseResult变为存储的数据</li><li>当通过reject存储数据或出错时,PromiseState 变为reject(拒绝,出错了),PromiseResult变为存储的数据或异常对象</li></ul></li></ul></li></ul><p><strong>Promise中存储数据</strong>:</p><ul><li>resolve 和 reject 是两个函数,通过这两个函数可以向Promise中存储数据<ul><li>resolve 会在执行正常时存储数据</li><li>reject 会在执行错误时存储数据</li><li>通过函数来向Promise中添加数据,好处就是可以用来添加异步调用的数据</li></ul></li></ul><p><strong>Promise中读取数据</strong>:</p><ul><li><strong>通过Promise的实例方法<code>then()</code>来读取Promise中存储的数据</strong>:<ul><li><code>then()</code>需要两个回调函数作为参数,回调函数用来获取Promise中的数据<ul><li>通过resolve存储的数据,会调用第一个函数返回</li><li>通过reject存储的数据或出现异常时,会调用第二个函数返回</li></ul></li></ul></li><li><strong>通过Promise的实例方法<code>catch()</code>来读取Promise中存储的数据</strong>:<ul><li><code>catch()</code>只需要一个函调函数作为参数</li><li>相当于:<code>then(null, reason =&gt; &#123;&#125;)</code><ul><li><code>catch()</code>专门用来处理Promise异常的方法</li></ul></li></ul></li><li><strong>通过Promise的实例方法<code>finally()</code>来读取Promise中存储的数据</strong>:<ul><li>finally不需要任何函数作为参数,因此也无法接收到任何的数据</li><li>无论是正常存储数据还是出现异常,finally总会执行</li></ul></li></ul></blockquote><h2 id="Promise的特点"><a href="#Promise的特点" class="headerlink" title="Promise的特点"></a>Promise的特点</h2><h3 id="Promise的链式调用"><a href="#Promise的链式调用" class="headerlink" title="Promise的链式调用"></a>Promise的链式调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;Promise&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// const p2 = promise.then();</span></span><br><span class="line"><span class="keyword">const</span> p2 = promise.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//   console.log(&quot;回调函数1&quot;, result); //Promise</span></span><br><span class="line"><span class="comment">//   return &#x27;张三&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// const p3 = p2.then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;回调函数2&quot;, result); //张三</span></span><br><span class="line"><span class="comment">//   return &#x27;李四&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// p3.then(result =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;回调函数3&#x27;, result); //李四</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(p2);</span></span><br><span class="line"><span class="comment">//   console.log(p3);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//Promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//张三</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//李四</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Promise的链式调用</strong>:</p><p>Promise中的<code>then(), catch(), finally()</code>这三个方法都会返回一个新的Promise,新的Promise中会存储回调函数的返回值,(<code>finally</code>的返回值不会存储到新的Promise中)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(a + b);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const result = sum(123, 456);</span></span><br><span class="line"><span class="comment">// console.log(result); //此时sum(123, 456)为Promise本身</span></span><br><span class="line"><span class="comment">// promise的回调地狱</span></span><br><span class="line"><span class="comment">// sum(123, 456).then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   sum(result, 7).then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     sum(result, 8).then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//       console.log(result);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// promise的链式调用</span></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result + <span class="number">7</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result + <span class="number">8</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;张三&#x27;);</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  <span class="comment">// .then(r =&gt; &#x27;李四&#x27;)</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个then&quot;</span>, r))</span><br><span class="line">  <span class="comment">// .catch(r =&gt; console.log(&#x27;异常处理&#x27;, r))</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了, 但我在这不处理&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异常处理&quot;</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;哈哈&quot;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二个then&quot;</span>, r))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;又出错了&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure><blockquote><ul><li>对Promise进行链式调用时,后边的方法(then和catch)读取的是上一步的执行结果,如果上一部的执行结果不是当前想要的结果,则会跳过当前的方法</li><li>当Promsie出现异常时,而整个调用链中没有出现catch, 则异常会向外抛出,catch只处理前面的异常,不对后面的及自身的错误进行处理,因此我们通常把catch写在后面进行统一处理.</li></ul></blockquote><h2 id="Promise的静态方法"><a href="#Promise的静态方法" class="headerlink" title="Promise的静态方法"></a>Promise的静态方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;哈哈&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(r));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;嘻嘻&#x27;</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(r));</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(a + b);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Promise.all([sum(123, 456), sum(2, 5), sum(3, 6)]).then((r) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(r);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// Promise.all([sum(123, 456),</span></span><br><span class="line"><span class="comment">//   sum(2, 5),</span></span><br><span class="line"><span class="comment">//   Promise.reject(&quot;哈哈&quot;), //程序执行到这里报错</span></span><br><span class="line"><span class="comment">//   sum(3, 6)]).then(</span></span><br><span class="line"><span class="comment">//   (r) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(r);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"><span class="comment">// Promise.allSettled([</span></span><br><span class="line"><span class="comment">//   sum(123, 456),</span></span><br><span class="line"><span class="comment">//   sum(2, 5),</span></span><br><span class="line"><span class="comment">//   Promise.reject(&quot;哈哈&quot;),</span></span><br><span class="line"><span class="comment">//   sum(3, 6)]).then(</span></span><br><span class="line"><span class="comment">//   (r) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(r);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"><span class="comment">// Promise.race([</span></span><br><span class="line"><span class="comment">//   // Promise.resolve(&#x27;1111&#x27;),</span></span><br><span class="line"><span class="comment">//   Promise.reject(&#x27;1111&#x27;),</span></span><br><span class="line"><span class="comment">//   sum(123, 456),</span></span><br><span class="line"><span class="comment">//   sum(2, 5),</span></span><br><span class="line"><span class="comment">//   sum(3, 6)]).then(</span></span><br><span class="line"><span class="comment">//   (r) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(r);</span></span><br><span class="line"><span class="comment">//   &#125;).catch(r =&gt; console.log(&#x27;出错&#x27;));</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([</span><br><span class="line">  <span class="comment">// Promise.resolve(&#x27;1111&#x27;),</span></span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;1111&#x27;</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;2222&#x27;</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;3333&#x27;</span>),]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错&#x27;</span>));</span><br></pre></td></tr></table></figure><blockquote><p><code>Promise.resolve()</code>:创建一个立即完成的Promise</p><p><code>Promise.reject()</code>:创建一个立即拒绝的Promsie</p><p><code>Promsie.all([...])</code>:同时返回多个Promise的执行结果,其中一个报错,就返回错误</p><p><code>Promsie.allSettled([...])</code>:同时返回多个Promise的执行结果,无论成功还是失败都返回数据</p><ul><li><code>&#123;status: &#39;fulfilled&#39;, value: 579&#125;</code>成功</li><li><code>&#123;status: &#39;rejected&#39;, reason: &#39;哈哈&#39;&#125;</code></li></ul><p><code>Promsie.race([...])</code>:返回执行最快的Promise(不考虑对错)</p><p><code>Promsie.any([...])</code>:返回执行最快的完成的Promise,全部出错才会执行错误</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04宏任务与微任务</title>
      <link href="/posts/5f7d6bb9.html"/>
      <url>/posts/5f7d6bb9.html</url>
      
        <content type="html"><![CDATA[<h1 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h1><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;哈哈&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//3 2 1</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202210181538024.png"></p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202210181606199.png" alt="image-20221018160604414"></p><blockquote><p><strong>Promise的执行原理</strong>:</p><ul><li>Promise在执行时,then就相当于给Promise绑定了一个回调函数,当Promise的状态从pending变为fulfilled时,then的回调函数会被放入到任务队列中</li></ul><p><strong>任务队列</strong>:</p><p><strong>在js中有两种任务队列</strong>:</p><ul><li>宏任务队列(大部分代码都在宏任务队列排队)</li><li>微任务队列(Promise的回调函数(then,catch,finally))</li></ul><p><strong>执行流程</strong>:  </p><ul><li>先执行调用栈里的代码</li><li>然后执行微任务队列中的所有任务</li><li>最后执行宏任务队列中的所有任务</li></ul><p><code>queueMicrotask()</code>:用来向微任务队列中添加一个任务</p></blockquote><h2 id="执行循序练习"><a href="#执行循序练习" class="headerlink" title="执行循序练习"></a>执行循序练习</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(1);</span></span><br><span class="line"><span class="comment">// &#125;, 0);</span></span><br><span class="line"><span class="comment">// queueMicrotask(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(2);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// Promise.resolve().then(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(3);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">//2 3 1</span></span><br><span class="line"><span class="comment">// Promise.resolve().then(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(1);</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// queueMicrotask(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(2);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 2 1</span></span><br><span class="line"><span class="comment">// Promise.resolve().then(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   Promise.resolve().then(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(1);</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// queueMicrotask(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(2);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">//2 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line"><span class="comment">//1 7 3 5 2 6 4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05手写Promise</title>
      <link href="/posts/ae459a89.html"/>
      <url>/posts/ae459a89.html</url>
      
        <content type="html"><![CDATA[<h1 id="手写Promsie"><a href="#手写Promsie" class="headerlink" title="手写Promsie"></a>手写Promsie</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PROMISE_STATE</span> = &#123;</span><br><span class="line">  <span class="attr">PENDING</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">FULFILLED</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">REJECT</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="comment">// 创建一个变量用来存储Promise的结果</span></span><br><span class="line">  #result;</span><br><span class="line">  <span class="comment">// 创建一个变量记录Promise的状态</span></span><br><span class="line">  #state = <span class="variable constant_">PROMISE_STATE</span>.<span class="property">PENDING</span>;</span><br><span class="line">  <span class="comment">// 创建一个变量,存储Promise的回调函数</span></span><br><span class="line">  <span class="comment">// #callback</span></span><br><span class="line">  <span class="comment">// 由于回调函数可能存在多个, 因此我们创造一个数组来存储</span></span><br><span class="line">  #callbacks = [];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// 接受一个 执行器 作为参数</span></span><br><span class="line">    <span class="title function_">executor</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有的resolve()用来存储成功的数据</span></span><br><span class="line">  <span class="comment">// 设为私有使其无法通过mp.resolve()来访问</span></span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this); //undefined</span></span><br><span class="line">    <span class="comment">// 禁止值被重复修改</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#state !== <span class="variable constant_">PROMISE_STATE</span>.<span class="property">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.#result = value;</span><br><span class="line">    <span class="comment">// 数据填充完成</span></span><br><span class="line">    <span class="variable language_">this</span>.#state = <span class="variable constant_">PROMISE_STATE</span>.<span class="property">FULFILLED</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当resolve调用,则说明数据已经进入了Promise中,需要通过then进行调用</span></span><br><span class="line">    <span class="comment">// 放入微任务队列中</span></span><br><span class="line">    <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// this.#callback &amp;&amp; this.#callback(this.#result); //相当于--&gt; onFulfilled(this.#result);</span></span><br><span class="line">      <span class="comment">// 调用#callbacks中的所有回调函数</span></span><br><span class="line">      <span class="variable language_">this</span>.#callbacks.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">cb</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有的resolve()用来存储拒接的数据</span></span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">reason</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加一个用来读取数据的then方法(成功时的回调,失败时的回调)</span></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 使其能够链式调用</span></span><br><span class="line">    <span class="comment">// then中回调函数的返回值, 会成为新的Promise中的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 进入判断则说明数据还没进入Promise,则将回调函数设置为Promise中callback的值</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.#state === <span class="variable constant_">PROMISE_STATE</span>.<span class="property">PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">// this.#callback = onFulfilled;</span></span><br><span class="line">        <span class="comment">// 将回调函数添加到#callbacks数组中</span></span><br><span class="line">        <span class="variable language_">this</span>.#callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// onFulfilled(this.#result);</span></span><br><span class="line">          <span class="comment">// 将onFulfilled(this.#result)的返回值作为resolve的参数</span></span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.#result));</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.#state === <span class="variable constant_">PROMISE_STATE</span>.<span class="property">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="comment">// 数据进来后, 不在直接调用, 而是放到微任务队列中</span></span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// onFulfilled(this.#result);</span></span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.#result));</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mp = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;张三&#x27;)</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">  <span class="comment">// resolve(&#x27;李四&#x27;)</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// console.log(mp);</span></span><br><span class="line"><span class="comment">// mp.then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;读取数据&#x27;, result);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// mp.then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;读取数据1&quot;, result);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="keyword">const</span> fh = mp.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取数据2&quot;</span>, result);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取数据3&#x27;</span>, r);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;杰克&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取数据4&#x27;</span>, r);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fh) <span class="comment">//MyPromise</span></span><br><span class="line">&#125;, <span class="number">3001</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06async</title>
      <link href="/posts/4e11ea07.html"/>
      <url>/posts/4e11ea07.html</url>
      
        <content type="html"><![CDATA[<h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><h2 id="async简介"><a href="#async简介" class="headerlink" title="async简介"></a>async简介</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般函数返回值</span></span><br><span class="line"><span class="comment">// function fn() &#123;</span></span><br><span class="line"><span class="comment">//   return 10;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let r = fn();</span></span><br><span class="line"><span class="comment">// console.log(r); //10</span></span><br><span class="line"><span class="comment">// Promise函数返回值</span></span><br><span class="line"><span class="comment">// function fn() &#123;</span></span><br><span class="line"><span class="comment">//   return Promise.resolve(10);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// async function fn() &#123;</span></span><br><span class="line"><span class="comment">//   return 10;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let r = fn();</span></span><br><span class="line"><span class="comment">// console.log(r); //Promise</span></span><br><span class="line"><span class="comment">// fn().then((r) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(r) //10</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>通过async可以快速的创建异步函数,该<strong>返回值会自动封装到一个Promsie中返回</strong></p></blockquote><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(a + b);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// sum(123, 456).then(r =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(r);</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="comment">// Promise的链式调用</span></span><br><span class="line">  <span class="comment">// sum(123, 456)</span></span><br><span class="line">  <span class="comment">//   .then(r =&gt; sum(r, 8))</span></span><br><span class="line">  <span class="comment">//   .then(r =&gt; sum(r, 9))</span></span><br><span class="line">  <span class="comment">//   .then(r =&gt; console.log(r))</span></span><br><span class="line">  <span class="comment">// 通过await调用异步函数</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title function_">sum</span>(result, <span class="number">8</span>);</span><br><span class="line">    result = <span class="keyword">await</span> <span class="title function_">sum</span>(result, <span class="number">9</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;全局作用域下的代码不受await阻塞的影响&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>在async声明的异步函数中,可以使用await关键字来调用异步函数</p><p>虽然通过Promsie的链式调用解决了回调地狱的问题,但这种调用过多时,也会比较复杂</p><p><strong>通过await来调用异步函数</strong>:</p><ul><li>当通过await来调用异步函数时,它会暂停代码的运行,直到异步代码执行有结果时,才将结果返回</li></ul><p><strong>注意</strong>:</p><ul><li><p>await只能用于async声明的异步函数中,或es模块的顶级作用域中,</p><p>(await is only valid in async functions and the top level bodies of modules)</p></li><li><p>**await只会阻塞异步函数内部的代码(且要在await后面)**不影响外部代码</p></li><li><p>通过await调用的异步代码时,需要通过<code>try-catch</code>来处理异常</p></li><li><p>如果async声明的函数中<strong>没有写await</strong>,那么就<strong>按照同步代码的执行顺序执行</strong></p></li><li><p>当我们使用await调用函数后,<strong>当前函数后面的所有代码会在当前函数执行完毕后</strong>,被放入微任务队列中去</p></li></ul></blockquote><p><strong>await阻塞顺序练习</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async function fn() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(1);</span></span><br><span class="line"><span class="comment">//   console.log(2);</span></span><br><span class="line"><span class="comment">//   console.log(3);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn();</span></span><br><span class="line"><span class="comment">// console.log(4);</span></span><br><span class="line"><span class="comment">// function fn1() &#123;</span></span><br><span class="line"><span class="comment">//   return new Promise(resolve =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(1);</span></span><br><span class="line"><span class="comment">//     console.log(2);</span></span><br><span class="line"><span class="comment">//     console.log(3);</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn1();</span></span><br><span class="line"><span class="comment">// console.log(4);</span></span><br><span class="line"><span class="comment">//1 2 3 4</span></span><br><span class="line"><span class="comment">// async function fn() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(1);</span></span><br><span class="line"><span class="comment">//   await console.log(2);</span></span><br><span class="line"><span class="comment">//   console.log(3);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn();</span></span><br><span class="line"><span class="comment">// console.log(4);</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3.1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 1 2 4 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01js数据类型转换</title>
      <link href="/posts/338f2ecd.html"/>
      <url>/posts/338f2ecd.html</url>
      
        <content type="html"><![CDATA[<h1 id="js数据类型转换"><a href="#js数据类型转换" class="headerlink" title="js数据类型转换"></a>js数据类型转换</h1><h2 id="1-转换为字符串"><a href="#1-转换为字符串" class="headerlink" title="1.转换为字符串"></a>1.转换为字符串</h2><ol><li><p>显示(强制)类型转换: </p><ul><li>调用<code>toString</code>放法, (<code>null</code>, 与<code>undefined</code>, 没有<code>toString</code>放法)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a, a) <span class="comment">//number 10</span></span><br><span class="line">a = a.<span class="title function_">toString</span>() </span><br><span class="line"><span class="comment">//`toString` 放法实际上是创建了一个新的字符串10, 因此需要重新赋值给a, 使a指向字符串10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a, a) <span class="comment">//string 10</span></span><br></pre></td></tr></table></figure><ul><li>调用<code>String</code>函数, (解决<code>null</code>, 与<code>undefined</code>, 对于有<code>toString</code>放法的基本数据类型, 实际上还是调用<code>toString</code>放法, 只是在<code>String</code>函数内部调用)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">33</span> <span class="comment">//&quot;33&quot;</span></span><br><span class="line">b= <span class="literal">null</span> <span class="comment">//&quot;null&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b, b);</span><br><span class="line">b = <span class="title class_">String</span>(b)</span><br><span class="line"><span class="comment">//`toString` 函数实际上也是创建了一个新的字符串null, 因此需要重新赋值给b, 使b指向字符串null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b, b)</span><br></pre></td></tr></table></figure></li><li><p>隐式类型转换:</p><p>任意其他基本类型, 通过运算符 <code>+ 上一个空的字符串</code>, 本质上还是调用<code>toString</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b</span><br><span class="line">b = <span class="number">5</span> + <span class="string">&quot;&quot;</span> <span class="comment">//string 5</span></span><br><span class="line">b = <span class="literal">true</span> + <span class="string">&quot;&quot;</span> <span class="comment">//string true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b, b)</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-转换为Number"><a href="#2-转换为Number" class="headerlink" title="2.转换为Number"></a>2.转换为Number</h2><ol><li><p>显示(强制)类型转换:</p><ul><li>调用<code>Number</code>函数:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;123&quot;</span> <span class="comment">//123</span></span><br><span class="line">b = <span class="string">&quot;1ab&quot;</span> <span class="comment">//NaN</span></span><br><span class="line">b = <span class="literal">null</span> <span class="comment">//0</span></span><br><span class="line">b = <span class="literal">true</span> <span class="comment">//1</span></span><br><span class="line">b = <span class="literal">false</span> <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b, b);</span><br><span class="line">b = <span class="title class_">Number</span>(b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b, b)</span><br></pre></td></tr></table></figure><blockquote><p>字符串: 合法数字(“123”)转换为对应的**<code>Number</code><strong>, 不合法数字(“a4b1c3”)则转换为</strong><code>NaN</code><strong>, 空串或者空格转为</strong>0**</p><p>布尔值: true转为**<code>1</code><strong>, false转为</strong><code>0</code>**</p><p>null: –&gt; <strong><code>0</code></strong>, undefined: –&gt; <strong><code>NaN</code></strong>,NaN: –&gt; <strong><code>NaN</code></strong></p></blockquote><ul><li><p>针对字符串的两个函数: </p><p><code>parseInt</code> :将一个字符串转为一个整数</p><p>​——解析时会自左向右读取一个字符串, 保留有效 整数位数字</p><p><code>parseFloat</code>:将一个字符串转为浮点数</p><p>​——解析时会自左向右读取一个字符串, 保留有效 小数位数字</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;a123&quot;</span> <span class="comment">//NaN</span></span><br><span class="line">a = <span class="number">315.14</span> <span class="comment">//315</span></span><br><span class="line">a = <span class="string">&quot;315.14ff48px&quot;</span> <span class="comment">//315.14</span></span><br><span class="line">a = <span class="built_in">parseInt</span>(a) </span><br><span class="line"><span class="comment">//也可以用来对Number类型进行取整(实际上是把Number转为String在转为Number),并不是最佳取整放法</span></span><br><span class="line">a = <span class="built_in">parseFloat</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="keyword">typeof</span> a)</span><br></pre></td></tr></table></figure></li><li><p>隐式转换:</p><p>对非数值的基本类型, 进行一元运算, <code>+  </code>  本质上还是调用<code>Number</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="string">&quot;10&quot;</span></span><br><span class="line">c = +c <span class="comment">//number 10</span></span><br><span class="line">c = +<span class="literal">true</span> <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> c, c)</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-转化为Boolean"><a href="#3-转化为Boolean" class="headerlink" title="3.转化为Boolean"></a>3.转化为Boolean</h2><ol><li><p>显示(强制)类型转换:</p><p>调用<code>Blooean</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span> <span class="comment">//true</span></span><br><span class="line">b = -<span class="number">1</span> <span class="comment">//true</span></span><br><span class="line">b = <span class="number">0</span> <span class="comment">//false</span></span><br><span class="line">b = <span class="title class_">NaN</span> <span class="comment">//false</span></span><br><span class="line">b = <span class="title class_">Infinity</span> <span class="comment">//true</span></span><br><span class="line">b = <span class="title class_">Boolean</span>(b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b, b)</span><br></pre></td></tr></table></figure><blockquote><p><code>Number</code>:0 和 <code>NaN </code>转化为 <code>false</code>,其他为true</p><p><code>String</code>:空串 转为<code>false</code>,其他为true</p><p><code>Null</code>:–&gt; <code>false</code>,<code>Undefined</code>:–&gt; <code>false</code>,<code>false</code>:–&gt; <code>false</code>,</p><p>对象: –&gt; true</p><p>所有表示空性的, 错误的, 没有的 都会转化为 <code>false</code></p></blockquote></li><li><p>隐式转换:</p><p>对非布尔值的基本数据类型, 进行逻辑非运算, <code>!</code>, 本质上还是调用<code>Boolean</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span></span><br><span class="line">a = !a <span class="comment">// Boolean true</span></span><br><span class="line">a = !!<span class="number">123</span> <span class="comment">//Boolean true //取两次反, 保证123 为原本的 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a, a); </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02js运算符</title>
      <link href="/posts/4b818218.html"/>
      <url>/posts/4b818218.html</url>
      
        <content type="html"><![CDATA[<h1 id="js运算符"><a href="#js运算符" class="headerlink" title="js运算符"></a>js运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><strong>算数运算符, 并不会影响变量的值, 只有通过赋值后才会对变量进行修改</strong></p><ol><li><p><code>Number</code>运算:  与数学上的运算一样</p><p>加减乘除:<code>+ ,  - , * , / </code> </p><p>次幂:<code>**</code> </p><p>取余数:<code>%</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a</span><br><span class="line">a = <span class="number">10</span> / <span class="number">0</span> <span class="comment">//Infinity</span></span><br><span class="line">a = <span class="number">2</span> ** <span class="number">10</span> <span class="comment">//次幂</span></span><br><span class="line">a = <span class="number">2</span> ** <span class="number">.5</span> <span class="comment">//开放</span></span><br><span class="line">a = <span class="number">8</span> % <span class="number">3</span> <span class="comment">//两个数相除, 取余数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure></li><li><p><code>Number</code>与其他基本类型进行运算:</p><p><code>js</code>是一门弱类型语言, 当进行运算时, 会通过自动的类型转换, 来完成运算</p><p>01, 算数运算时, 除了字符串的加法, 其他运算符的操作数是非数值时, 都会转换为数值在运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b</span><br><span class="line">b = <span class="number">10</span> - <span class="string">&quot;5&quot;</span> <span class="comment">// 10 - 5</span></span><br><span class="line">b = <span class="number">10</span> + <span class="literal">true</span> <span class="comment">//10 + 1</span></span><br><span class="line">b = <span class="number">5</span> + <span class="literal">null</span> <span class="comment">//5 + 0</span></span><br><span class="line">b = <span class="number">5</span> - <span class="literal">undefined</span> <span class="comment">//5 - NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><p>02,  <strong>字符串加法</strong>:当任意一个值, 与字符串做加法运算时, 都会把非字符串的值, 转换为字符串在运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b</span><br><span class="line">b = <span class="number">10</span> - <span class="string">&quot;5&quot;</span> <span class="comment">// 10 - 5</span></span><br><span class="line">b = <span class="number">5</span> + <span class="string">&quot;12&quot;</span> <span class="comment">//512 -- 字符串拼串</span></span><br><span class="line">b = <span class="number">5</span> + <span class="string">&quot;null&quot;</span> <span class="comment">//5null -- 字符串拼串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><blockquote><p>因此我们可以利用这一特点,来完成, 向字符串的类型转换, 即<code>String</code>的隐式转换</p></blockquote></li></ol><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><strong>赋值运算符(&#x3D;): 用来将一个值 赋值给 一个变量(对变量进行修改)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="comment">//a /= 10 // --&gt; a = a / 10</span></span><br><span class="line"><span class="comment">//a += 2  //12</span></span><br><span class="line"><span class="comment">//a *= 2  //20</span></span><br><span class="line">a %= <span class="number">8</span>  <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><p>空赋值: <code>?? =</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a</span><br><span class="line">a ??= <span class="number">100</span>  <span class="comment">//只有当变量为undefined 或者 null 时才会对变量进行赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>一元(±):即只需要一个操作数,  <code>+(不会改变数值的符号) 或 -(对数值进行符号位的 取反)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">10</span></span><br><span class="line">c = +c <span class="comment">//number 10</span></span><br><span class="line">c = -c <span class="comment">//number -10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> c, c)</span><br></pre></td></tr></table></figure><blockquote><p>当我们对非数值类型进行正负运算时, 会将其转换为数值, 然后在进行运算</p><p>我们可以利用这一特点, 来完成, 向数值Number基本类型的, 隐式转换</p></blockquote><h2 id="自增与自减运算"><a href="#自增与自减运算" class="headerlink" title="自增与自减运算"></a>自增与自减运算</h2><ol><li><strong>自增运算符(++):</strong> 会立即使变量加一</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> result =  d++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">let</span> e = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> result2 = ++e</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2) <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> result3 = n++ + ++n + n <span class="comment">//5+7+7 = 19</span></span><br></pre></td></tr></table></figure><blockquote><p>++d(前自增):返回值为自增前的值(旧值)</p><p>e++(后自增):返回值为自增后的值(新值)</p></blockquote><ol><li><strong>自减运算符(–):</strong>与自增性质一样,  会立即使变量减一</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>! 逻辑非:</p><ul><li><p>可以对一个数值进行非运算,</p></li><li><p>可以对一个布尔值进行取反操作:</p></li></ul><p>   true –&gt; false,false–&gt;true</p><ul><li>如果对一个非布尔值进行取反,它会先把非布尔值转换为布尔值, 然后再取反, 我们可以利用这一特性, 将其他非布尔值类型转换为布尔值类型 – <strong>即向布尔值类型的转换的隐式转换</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span></span><br><span class="line">a = !a <span class="comment">// Boolean true</span></span><br><span class="line">a = !!<span class="number">123</span> <span class="comment">//Boolean true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a, a); </span><br></pre></td></tr></table></figure><p>&amp;&amp; 逻辑与:</p><ul><li>可以对两个值进行与运算</li><li>当 &amp;&amp; 左右都为<code>true</code>时,  返回<code>true</code>, 否则返回<code>false</code></li><li>与运算都是短路的与, 如果第一个值为<code>false</code>, 则第二个值不会在执行</li><li>对于非布尔值进行与运算, 则会先转换成布尔值然后运算, 但是最终会返回原值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="literal">true</span> &amp;&amp; <span class="title function_">alert</span>(<span class="number">123</span>); <span class="comment">//第一个值为true, 执行第二个</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">false</span> &amp;&amp; <span class="title function_">alert</span>(<span class="number">123</span>); <span class="comment">// 第一个值为false, 不会执行第二个</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">1</span> || <span class="number">0</span> <span class="comment">// 1 为true执行, 0 为false 中断执行,反回原值</span></span><br></pre></td></tr></table></figure><blockquote><p>与运算如果找到了false, 就会直接返回, 没有false才会返回true</p></blockquote><p>|| 逻辑或:</p><ul><li>可以对两个值进行与运算</li><li>当 || 左右其中一边有<code>true</code>时, 则返回<code>true</code>, 否则返回<code>false</code></li><li>或运算也是短路或运算, 如果第一个为<code>true</code>, 则不会执行第二个值 </li><li>对于非布尔值进行与运算, 则会先转换成布尔值然后运算, 但是最终会返回原值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="literal">true</span> &amp;&amp; <span class="title function_">alert</span>(<span class="number">123</span>); <span class="comment">//第一个值为true, 执行第一个并返回</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">false</span> &amp;&amp; <span class="title function_">alert</span>(<span class="number">123</span>); <span class="comment">// 第一个值为false, 则执行第二个</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">1</span> || <span class="number">0</span> <span class="comment">// 1 为true执行,反回原值</span></span><br></pre></td></tr></table></figure><blockquote><p>或运算如果找到了true, 就会直接返回, 没有true才会返回false</p></blockquote><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li><p>关系运算符用来检查两个值之间的关系是否成立</p><p>成立返回<code>true</code>, 不成立返回<code>false</code></p></li><li><p>&gt; :  用来检查左值是否大于右值</p></li><li><p>&gt;&#x3D; :  用来检查左值是否大于或者等于右值</p></li><li><p>&lt; :  用来检查左值是否小于右值</p></li><li><p>&lt;&#x3D; :   用来检查左值是否小于或者等于右值</p></li><li><p>对于非数值进行关系运算时, 则会先转换成数值然后在运算</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a </span><br><span class="line">a = <span class="string">&quot;bbc&quot;</span> &gt; <span class="string">&quot;b&quot;</span> <span class="comment">// false --&gt; &quot;c&quot;&gt;&quot;b&quot;</span></span><br><span class="line">a = <span class="string">&quot;1&quot;</span> &gt; <span class="literal">false</span> <span class="comment">// true --&gt; 1 &gt; 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><blockquote><p><strong>但是关系运算符的两边都为字符串时</strong>, 则不会转换成数值, 而是逐位的比较字符的<code>Unicode</code>编码</p><p>利用这个特点可以对字符,按照字母顺序进行排序</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a </span><br><span class="line">a = <span class="string">&quot;bbc&quot;</span> &gt; <span class="string">&quot;b&quot;</span></span><br><span class="line">a = <span class="string">&quot;1&quot;</span> &gt; <span class="literal">false</span></span><br><span class="line">a = <span class="string">&quot;12&quot;</span> &gt; <span class="string">&quot;2&quot;</span> <span class="comment">//false --&gt; 1 &gt; 2</span></span><br><span class="line">a = +<span class="string">&quot;12&quot;</span> &gt; <span class="string">&quot;2&quot;</span> <span class="comment">//true --&gt; 12 &gt; 2 </span></span><br><span class="line"><span class="comment">//利用一元运算,隐式转换&quot;12&quot;为12, 因此比较两个字符串格式的数字时要得到正确的返回值, 一定要进行类型转换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>一个问题:  检查<code>num=6</code>是否在5到10之间?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">5</span> &lt; num &lt;<span class="number">10</span> <span class="comment">//true</span></span><br><span class="line"><span class="comment">//按照数学上的逻辑这样写是没问题的, 但是在js中下面的表达式result的值恒为true, 因为运算符在优先级一样的情况下按照从左向右的顺序执行,当5&lt;num成立返回true时则是用返回值true与10比较:-&gt;true&lt;10</span></span><br><span class="line">num = <span class="number">60</span></span><br><span class="line">result = <span class="number">5</span> &lt; num &lt;<span class="number">10</span> <span class="comment">//true</span></span><br><span class="line"><span class="comment">//可以拆分成两个关系运算,然后使用与运算 &amp;&amp; 来链接, 成立返回true,不成立返回false, 并返回最终的结果</span></span><br><span class="line">result = <span class="number">5</span> &lt; num &amp;&amp; num &lt; <span class="number">10</span> <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h2 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h2><ul><li>&#x3D;&#x3D; :相等运算符, 用来比较两个值是否相等</li><li>对两个不同类型进行关系运算时, 则会先转换相同的基本数据类型在运算</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d </span><br><span class="line">d = <span class="number">1</span> == <span class="string">&quot;1&quot;</span> <span class="comment">//true</span></span><br><span class="line">d = <span class="literal">true</span> == <span class="string">&quot;1&quot;</span> <span class="comment">//true</span></span><br><span class="line">d = <span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line">d = <span class="title class_">NaN</span> == <span class="title class_">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br></pre></td></tr></table></figure><blockquote><p>null与undefined进行相等运算时会返回true</p><p>NaN不与任何值相等, 包括他自己本身, 可以用isNaN来检查一个数是否为NaN</p></blockquote><ul><li>&#x3D;&#x3D;&#x3D; :   全等运算符, 用来比较两个值是否全等</li><li>它不会进行自动的类型转换, 如果两个值不同则返回false, 相等则返回true</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d </span><br><span class="line">d = <span class="number">1</span> === <span class="string">&quot;1&quot;</span> <span class="comment">//false</span></span><br><span class="line">d = <span class="literal">true</span> === <span class="number">1</span> <span class="comment">//false</span></span><br><span class="line">d = <span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">//false</span></span><br><span class="line">d = <span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br></pre></td></tr></table></figure><ul><li>!&#x3D; :  不等,比较两个值得是否<strong>不相等</strong>,  对相等运算符进行取反(会自动进行基本数据类型的转换)</li><li>!&#x3D;&#x3D; :  不全等, 比较两个值得是否<strong>不全等,</strong> 对全等运算符进行取反(不会自动进行基本数据类型的转换))</li></ul><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><ul><li><p>结构: 条件表达式 ? 表达式1 : 表达式2</p><p>程序在执行时, 会对条件表达式进行求值判断,</p><p>​如果为<code>true</code>, 则返回表达式1</p><p>​如果为<code>false</code>, 则返回表达式2</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> ? <span class="title function_">alert</span>(<span class="number">1</span>) : <span class="title function_">alert</span>(<span class="number">2</span>) <span class="comment">//false</span></span><br><span class="line"><span class="keyword">let</span> e = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> g = <span class="number">20</span></span><br><span class="line">e &gt; g ? <span class="title function_">alert</span>(<span class="string">&quot;e大&quot;</span>) : <span class="title function_">alert</span>(<span class="string">&quot;g大&quot;</span>) <span class="comment">//g大</span></span><br><span class="line"><span class="keyword">let</span> max = e &gt; g ? e : g</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">//20</span></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>优先级表汇总:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03js流程控制语句</title>
      <link href="/posts/9ab87891.html"/>
      <url>/posts/9ab87891.html</url>
      
        <content type="html"><![CDATA[<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句 :"></a><strong>if语句 :</strong></h3><ol><li><code>if(条件表达式)&#123;语句..&#125;</code>语句:条件表达式为<code>true</code>则执行, 为<code>false</code>则不执行, (条件表达式的返回值只有true与false)</li><li><code>if(条件表达式)&#123;语句1&#125;else&#123;语句2&#125;</code>:   条件表达式为<code>true</code>则执行语句1, 为<code>false</code>则执行语句2</li></ol><p> </p><p>小练习:判断输入的数值,是偶数还是奇数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="title function_">prompt</span>(<span class="string">&quot;请输入整数:&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> m = <span class="built_in">parseInt</span>(num)</span><br><span class="line"><span class="comment">// 把取整后的值与取整前的值进行比较, 如果小于取整前的值则一定为小数,也可以对1取模看是否有余数</span></span><br><span class="line"><span class="keyword">if</span>(m &lt; num || <span class="built_in">isNaN</span>(m) ) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;不能输入小数或非法数字&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(m % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;m&#125;</span> 是偶数`</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;m&#125;</span> 是奇数`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句 :"></a><strong>switch语句 :</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123; <span class="comment">//switch后的表达式与case后的表达式全等, 则执行case后的代码</span></span><br><span class="line">  <span class="keyword">case</span> 表达式 :</span><br><span class="line">    代码...</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 表达式 :</span><br><span class="line">    代码...</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 表达式 :</span><br><span class="line">    代码...</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">default</span> 表达式 : <span class="comment">//default: 所有case都不满足, 执行default</span></span><br><span class="line">    代码...</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch语句执行当比较为true时, 会从当前case处开始执行后续代码, 需要加上break来打断后续代码的执行,switch语句与if语句的功能是重复的</p></blockquote><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环 :"></a><strong>while 循环 :</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化表达式</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 条件表达式</span></span><br><span class="line"><span class="keyword">while</span>(a &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="comment">// 循环表达式</span></span><br><span class="line">  a++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小练习: 在年利率5%的情况下, 存1000元, 多少年后可以存到5000元</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1000</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0</span> <span class="comment">//计数器: 记录循环执行了几次</span></span><br><span class="line"><span class="keyword">while</span>(a &lt; <span class="number">5000</span>) &#123;</span><br><span class="line"> <span class="comment">//a  =  a + 50  //利息固定(单利)</span></span><br><span class="line">  a  =  a + a * <span class="number">0.05</span> <span class="comment">//一年的收益(本金加利息,复利的情况下)</span></span><br><span class="line">  b++</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;需要&quot;</span> + b + <span class="string">&quot;年&quot;</span>) <span class="comment">//33</span></span><br></pre></td></tr></table></figure><blockquote><p> while(条件表达式){循环体}, 条件表达式为true , 则循环体会一直执行</p></blockquote><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do..while 循环 :"></a><strong>do..while 循环 :</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化表达式</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 条件表达式</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="comment">// 循环表达式</span></span><br><span class="line">  a++;</span><br><span class="line">&#125;<span class="keyword">while</span>(a &lt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure><blockquote><p>do{循环体}while(条件表达式), 先执行循环体, 在对条件表达式进行判断, 因此确保程序最少可以执行一次, (在程序执行多次的情况下, 与while循环没有区别)</p></blockquote><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环 :"></a><strong>for 循环 :</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(①: let a = 0; ②: a &lt; 10; ③: a++) &#123;</span></span><br><span class="line"><span class="comment">  ④: 语句...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">执行流程:</span></span><br><span class="line"><span class="comment">① 执行初始化状态, 初始化变量</span></span><br><span class="line"><span class="comment">② 执行条件表达式, 判断循环体是否执行(true执行, false终止)</span></span><br><span class="line"><span class="comment">③ 执行更新表达式, 对初始化变量进行修改</span></span><br><span class="line"><span class="comment">④ 重复② ,直到判断为false为止*/</span></span><br></pre></td></tr></table></figure><blockquote><p>初始化变量在循环语句中, 只会执行一次</p></blockquote><p>小练习:  </p><p>求100以内3的倍数, 打印个数与总和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line"><span class="comment">//方法一:</span></span><br><span class="line"><span class="comment">// for(let a = 1; a &lt;= 100; a++) &#123;</span></span><br><span class="line"><span class="comment">//   if (a % 3 === 0) &#123;</span></span><br><span class="line"><span class="comment">//     b++;</span></span><br><span class="line"><span class="comment">//     result = result + a</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= <span class="number">100</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">  b++</span><br><span class="line">  result = result + i</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`3的倍数一共有<span class="subst">$&#123;b&#125;</span>个, 总和为<span class="subst">$&#123;result&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>求1000以内水仙花数的个数, </p><p>(水仙花数: 一个n位数(n&gt;&#x3D;3), 如果它各个位上的数字的n次幂之和还等于这个数, 那么就是水仙花数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一:</span></span><br><span class="line"><span class="comment">// for(let a = 100; a&lt;1000; a++) &#123;</span></span><br><span class="line"><span class="comment">//   // 获取百位数</span></span><br><span class="line"><span class="comment">//   let bai = parseInt(a / 100);</span></span><br><span class="line"><span class="comment">//   // 获取十位数</span></span><br><span class="line"><span class="comment">//   let shi = parseInt((a - bai*100)/10)</span></span><br><span class="line"><span class="comment">//   // 获取个位数</span></span><br><span class="line"><span class="comment">//   let ge = a % 10</span></span><br><span class="line"><span class="comment">//   if(bai ** 3 + shi ** 3 + ge ** 3 === a)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(a)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   // console.log(a, ge);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//方法二: </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">100</span>; a &lt; <span class="number">1000</span>; a++ ) &#123;</span><br><span class="line">  <span class="keyword">let</span> str = a + <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span>(str[<span class="number">0</span>] ** <span class="number">3</span> + str[<span class="number">1</span>] ** <span class="number">3</span> + str[<span class="number">2</span>] ** <span class="number">3</span> === a) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断输入的数值是否为质数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = +<span class="title function_">prompt</span>(<span class="string">&quot;请输入一个大于一的整数: &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(num) || num &lt; <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;请输入大于一的整数&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; num; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (flag = <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;num&#125;</span>是质数`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">`<span class="subst">$&#123;num&#125;</span>不是质数`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套 :"></a>循环嵌套 :</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外层循环控制图形高度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>; a &lt; <span class="number">5</span>; a++) &#123;</span><br><span class="line">  <span class="comment">// 内层循环控制图形宽度</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> b = <span class="number">0</span>; b &lt; <span class="number">5</span>; b++) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;* &amp;nbsp&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;<strong>外层循环执行一次,内层循环执行一个循环周期</strong>&#x3D;&#x3D;</p></blockquote><p>小练习: </p><p>打印99乘法表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">1</span>; a &lt;= <span class="number">9</span> ; a++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> b = <span class="number">1</span>; b &lt;= a; b++) &#123;</span><br><span class="line">      <span class="comment">// 外层循环执行一次,内层循环执行一个循环周期</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`<span class="subst">$&#123;b&#125;</span> x <span class="subst">$&#123;a&#125;</span> = <span class="subst">$&#123;a * b&#125;</span> &amp;nbsp &amp;nbsp &amp;nbsp`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印100以内所有的质数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">2</span>; a &lt; <span class="number">100</span>; a++) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span> <span class="comment">//flag这个变量也必须进入循环, 不然为true的只有 a=3(只打印了一次a++后的值)</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> b = <span class="number">2</span>; b &lt; a; b++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(a % b == <span class="number">0</span>) &#123;</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;  &quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h3><blockquote><p>break:终止switch与循环语句,多个循环嵌套时, 会终止最近的循环</p><p>continue:用来跳过当次循环, 然后继续执行</p></blockquote><p>优化质数练习:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//for(let a = 2; a &lt; 100000; a++) &#123;</span></span><br><span class="line">  <span class="comment">//偶数一定不是质数, 因此从3开始循环, 每次执行更新 a + 2</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">3</span>; a &lt; <span class="number">100000</span>; a+=<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span> <span class="comment">//flag这个变量也必须进入循环, 不然为true的只有 a=3(只打印了一次a++后的值)</span></span><br><span class="line">  <span class="comment">//for(let b = 2; b &lt; a; b++) &#123;</span></span><br><span class="line">  <span class="comment">//对a进行开放, 缩小查找距离, (类似于二分查找)</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> b = <span class="number">2</span>; b &lt;= a ** <span class="number">.5</span>; b++) &#123; </span><br><span class="line">    <span class="keyword">if</span>(a % b == <span class="number">0</span>) &#123;</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">//进入此判断, 说明不是质数, 没必要在继续循环判断, 因此这次终止循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;  &quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04js对象</title>
      <link href="/posts/4b7503ac.html"/>
      <url>/posts/4b7503ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h1><h2 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h2><h3 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a><strong>创建一个对象</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象那</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>()</span><br><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="comment">// 修改属性</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="comment">// 删除属性</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">age</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><blockquote><p>对象中可以存储多个各种种类的数据, 对象中存储的数据,我们称为, 属性</p><p>向对象中添加属性:对象.属性名(key) &#x3D; 属性值(value)</p><p>读取对象中的属性:对象.属性名 (如果找不到该属性不会报错, 而是返回<code>undefined</code>)</p></blockquote><h3 id="对象的属性名-属性值"><a href="#对象的属性名-属性值" class="headerlink" title="对象的属性名, 属性值"></a><strong>对象的属性名, 属性值</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>()</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;address&#x27;</span></span><br><span class="line">obj[<span class="string">&quot;str&quot;</span>] = <span class="string">&quot;孙悟空&quot;</span> <span class="comment">//str : &quot;孙悟空&quot; --&gt; obj.str = &quot;孙悟空&quot;</span></span><br><span class="line">obj[str] = <span class="string">&quot;孙悟空&quot;</span> <span class="comment">//address : &quot;孙悟空&quot; --&gt; obj.address = &quot;孙悟空&quot;</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="string">&quot;aa&quot;</span></span><br><span class="line">obj.<span class="property">b</span> = <span class="literal">true</span></span><br><span class="line">obj.<span class="property">c</span> = <span class="number">123</span></span><br><span class="line">obj.<span class="property">d</span> = <span class="title class_">Object</span>()</span><br><span class="line">obj.<span class="property">d</span>.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str&quot;</span> <span class="keyword">in</span> obj) <span class="comment">//检查obj对象中是否有str这个属性</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>[]</code>来操作对象的属性,  可以使用变量,  对象的属性值可以是任何的数据类型,  也可以是一个对象, <code>console.log(&quot;属性名&quot; in 对象)</code>可以用来检查一个对象中是否有某个属性</p></blockquote><h3 id="对象字面量创建对象"><a href="#对象字面量创建对象" class="headerlink" title="对象字面量创建对象 :"></a><strong>对象字面量创建对象 :</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  [<span class="string">&quot;gender&quot;</span>]: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="attr">hello</span>: &#123; <span class="comment">// obj的属性为一个 hello 对象</span></span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用对象字面量创建对象, 可以直接在 <code>&#123;&#125;</code>里向对象中添加属性</p></blockquote><h3 id="枚举属性"><a href="#枚举属性" class="headerlink" title="枚举属性"></a>枚举属性</h3><p>使用<code>for-in</code>语句来获取对象中的全部属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  [<span class="string">&quot;gender&quot;</span>]: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="attr">hello</span>: &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123; </span><br><span class="line"> <span class="comment">//获取obj对象中的全部属性(包括hello下的属性)并赋值给变量 i</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i, obj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>for-in 的循环体会执行多次, 有几个属性会执行几次, 每次执行时, 都会将一个属性值赋给我们定义的变量, 符号添加的属性不可以被枚</p></blockquote><h2 id="可变类型"><a href="#可变类型" class="headerlink" title="可变类型"></a>可变类型</h2><h3 id="不可变类型"><a href="#不可变类型" class="headerlink" title="不可变类型"></a>不可变类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">//a --&gt; x11(内存地址)</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>; <span class="comment">//b --&gt; x11</span></span><br><span class="line">a = <span class="number">12</span> <span class="comment">//a --&gt; x12(内存地址指向x12), 不会对x11地址的值产生任何影响</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br></pre></td></tr></table></figure><blockquote><p>原始值属于不可变类型, 一旦创建无法修改它的值</p><p>在内存中不会存在重复的原始值</p></blockquote><h3 id="可变类型-1"><a href="#可变类型-1" class="headerlink" title="可变类型"></a>可变类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>() <span class="comment">//obj --&gt; x010</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">15</span></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Object</span>()<span class="comment">//obj2 --&gt; x011</span></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="title class_">Object</span>()<span class="comment">//obj3 --&gt; x012</span></span><br><span class="line"><span class="comment">//一但创建一个新的对象 就会在内存中立即创建一个新的内存空间地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2 == obj3) <span class="comment">//false</span></span><br><span class="line"><span class="keyword">let</span> obj4 = obj <span class="comment">//obj4 --&gt; obj(x010)指向obj的内存地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == obj4)<span class="comment">//true</span></span><br><span class="line">obj4.<span class="property">name</span> = <span class="string">&quot;猪八戒&quot;</span> <span class="comment">//当修改一个对象的属性时, 所有指向该对象的变量(内存地址)都会发生改变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, obj4)<span class="comment">//name属性都为猪八戒</span></span><br></pre></td></tr></table></figure><blockquote><p>对象创建完成后, 可以任意的添加删除修改对象中的属性</p><p>如果有两个变量(<code>obj, obj4</code>)都指向同一个对象时, 通过一个变量修改对象的属性时, 对另一个变量也会产生影响</p></blockquote><h3 id="变量与对象"><a href="#变量与对象" class="headerlink" title="变量与对象"></a>变量与对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;猪八戒&quot;</span> <span class="comment">//修改对象</span></span><br><span class="line">obj2 = <span class="literal">null</span> <span class="comment">//修改变量(指针释放, 不在指向obj所在的地址)</span></span><br><span class="line">obj2 = &#123;  <span class="comment">//新的对象, 不会对obj产生影响</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;猪八戒&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, obj2)</span><br></pre></td></tr></table></figure><blockquote><p>修改对象: 修改对象时, 如果其他变量(内存地址)指向该对象, 则所有变量都会受到影响</p><p>修改变量:修改变量时, 只会影响当前的变量(通过<code>const</code>可以控制该变量不能再次被赋值)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05js函数</title>
      <link href="/posts/b31b0823.html"/>
      <url>/posts/b31b0823.html</url>
      
        <content type="html"><![CDATA[<h1 id="js函数"><a href="#js函数" class="headerlink" title="js函数"></a>js函数</h1><h2 id="创建一个函数"><a href="#创建一个函数" class="headerlink" title="创建一个函数"></a>创建一个函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;阿尼哈赛有&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;口你急哇&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">//调用函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> fn) <span class="comment">//返回function</span></span><br></pre></td></tr></table></figure><blockquote><p>把一些语句存储在函数中, 在需要时进行调用</p></blockquote><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1, 一般创建方式(函数声明)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数声明定义的函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2, 函数表达式(匿名函数)</span></span><br><span class="line"><span class="comment">//function() 没有函数名, 因此需要定义一个变量来接收</span></span><br><span class="line"><span class="keyword">let</span> fun2 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数表达式定义的函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3, 箭头函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn3</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;箭头函数&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数内只有一个语句时可以省略 &#123;&#125;与()</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun4</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;箭头函数&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123; <span class="comment">//a, b 为形式参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//1, 2 为实际参数</span></span><br><span class="line">cosnt fn2 = (a=<span class="number">10</span>, b=<span class="number">20</span>, c=<span class="number">30</span>) &#123; <span class="comment">//可以传递默认参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>形式参数:在<strong>定义函数</strong>时, 可以在函数中指定一些形参, 在函数中定义的形参, 相当于在函数内部声明了一个变量但是没有赋值</p><p>实际参数:在<strong>调用函数</strong>时, 可以在函数的<code>()</code>传递一些实参, 实参会赋值给形参</p><p>在<code>js</code>不会检查参数的类型, 可以传递任意类型的值作为参数</p><p>默认参数: 没在函数调用时, 传递实参, 就会传递默认参数</p></blockquote><h3 id="对象参数"><a href="#对象参数" class="headerlink" title="对象参数"></a>对象参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  a.<span class="property">name</span> = <span class="string">&quot;猪八戒&quot;</span> <span class="comment">//改对象</span></span><br><span class="line">  a= &#123;&#125; <span class="comment">// 改变量</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;孙悟空&quot;</span>&#125;</span><br><span class="line"><span class="title function_">fn</span>(obj)</span><br></pre></td></tr></table></figure><blockquote><p>传递参数时, 传递的并不是变量本身, 而是变量中存储的值, 因此也有改变量与改对象区别</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入形参对象 (每次函数调用都会创建一个新的对象, 每次调用都为不同的对象)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a = &#123;name: <span class="string">&quot;张三&quot;</span>&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">  a.<span class="property">name</span> = <span class="string">&quot;唐僧&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//张三 唐僧</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//张三 唐僧</span></span><br><span class="line"><span class="comment">//在函数外面创建对象, 然后赋值给形参(函数每次调用都为obj对象, 每次调用始终都为一个对象)</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">a = obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">  a.<span class="property">name</span> = <span class="string">&quot;唐僧&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>()<span class="comment">//李四 唐僧</span></span><br><span class="line"><span class="title function_">fn2</span>()<span class="comment">//唐僧 唐僧</span></span><br></pre></td></tr></table></figure><blockquote><p>函数每次调用都会重新创建默认值, 因此对象作为形参时, 每次调用就会创建一个新的对象</p></blockquote><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (a) &#123;</span><br><span class="line">  <span class="title function_">a</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是fn2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数作为参数传递</span></span><br><span class="line"><span class="title function_">fn</span>(fn2)</span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是匿名函数&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">fn</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是箭头函数&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// return &quot;hello&quot;</span></span><br><span class="line">  <span class="comment">// return &#123;name: &quot;李四&quot;&#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="comment">//箭头函数的返回值 (返回值只有一个时, 可以省略 &#123;&#125; 与 return关键字)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params"></span>) =&gt; (&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;) <span class="comment">// 返回对象(返回对时, 要套一个括号, 避免&#123;&#125;冲突)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params"></span>) =&gt; <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="number">456</span>) <span class="comment">// 返回函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn2</span>())</span><br><span class="line"><span class="comment">//return后 不跟返回值, 或者不写return 都会打印undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>return</code>关键字来指定函数的返回值 (可以控制函数返回结果, 不会直接在调用函数时就进行打印) , 返回值就是函数执行的结果, 函数调用完毕返回值就会作为结果返回, 函数的返回值可以指定任何类型值, 且return一旦执行则函数立即终止</p></blockquote><h2 id="函数的作用域"><a href="#函数的作用域" class="headerlink" title="函数的作用域"></a>函数的作用域</h2><p><strong>作用域 : 指一个变量的可见区域</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;全局&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="string">&quot;局部1&quot;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="string">&quot;局部2&quot;</span></span><br><span class="line">    conloe.<span class="title function_">log</span>(a, b, c) <span class="comment">//可以访问到所有的变量(a,b,c)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">// 只访问到变量a</span></span><br></pre></td></tr></table></figure><blockquote><p>全局作用域:生命周期 –&gt; 在网页运行时创建, 在网页关闭时销毁</p><p>直接编写在script标签下的代码都为全局作用域, 其中的变量为全局变量(包括函数与对象等), 可以在任何地方访问</p><p>局部作用域:生命周期 –&gt; 在代码块执行时创建, 代码块实行完毕时销毁</p><p>在局部作用域声明的变量(包括函数与对象等) 只能在代码块内部(包括子代码块)访问, 外部无法访问</p></blockquote><p><strong>函数作用域 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&quot;fn中的变量&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//a未定义</span></span><br></pre></td></tr></table></figure><blockquote><p>函数作用域:是一种局部作用域 只能在函数内部访问, 在函数调用时创建, 调用完毕后销毁, 函数的每次调用都会产生一个新的函数作用域, </p></blockquote><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">11</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">22</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn2</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()<span class="comment">// b=22</span></span><br></pre></td></tr></table></figure><blockquote><p>作用域链(就近原则): 当使用一个变量时, 会在当前作用域内寻找, 如果没有则到上一层作用域去寻找, 直到找到全局作用域, 如果还没有则报错</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">obj.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">obj.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><blockquote><p>方法: 当一个对象指向一个函数, 则该函数就是这个对象的方法, 调用函数就是调用对象的方法</p></blockquote><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="number">123</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">console</span>.<span class="title function_">log</span>(<span class="number">456</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">10</span> <span class="comment">//向window对象中添加的属性会自动转化为全局变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><blockquote><p>window对象: 在浏览器中, 为我们提供了一个window对象, 可以直接访问. window对象代表浏览器窗口, 通过该对象可以对浏览器窗口进行各种操作, window对象还负责存储js中的内置对象与宿主对象, window对象的属性可以window对象访问, 也可以直接访问, 函数可以认为是window对象的方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">11</span> </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">22</span> <span class="comment">//var 虽然没有块作用域, 但存在函数作用域</span></span><br><span class="line">    a = <span class="number">33</span> <span class="comment">//在局部作用域中如果没使用 var 与 let 则会自动成为window对象的属性(全局变量)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量的提升</span></span><br><span class="line"><span class="comment">//var声明的变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="comment">//let声明的变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">//初始化前不能访问</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span></span><br><span class="line"><span class="comment">//函数的提升</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;fn的函数&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>变量的提升: </p><p><strong>使用var声明的变量</strong>, 会在所有代码执行前被声明, 因此可以在变量声明前访问变量</p><p>**使用let声明的变量, **实际上也会被提升, 但在赋值之前js解释器会禁止对该变量的访问</p><p>函数的提升:</p><p>使用函数声明(必须是以 function 开头创建的函数, 不能是匿名, 箭头函数)创建的函数, 会在其他代码执行前被创建, 因此可以在函数声明前调用函数</p></blockquote><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let定义变量, 可以使用代码块来创建块作用域, 避免变量冲突</span></span><br><span class="line">&#123;<span class="keyword">let</span> a = <span class="number">10</span>&#125;</span><br><span class="line">&#123;<span class="keyword">let</span> a = <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">//var定义变量, 可以使用立即执行函数,创建一个函数作用域,来避免变量的冲突</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">&#125;()); <span class="comment">//这个 ; 号一定要手动添加, 否则js会解释成()()函数调用</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><blockquote><p>立即执行函数:立即执行函数是一个匿名函数, 并且只会调用一次, 可以用来创建一个一次性的函数作用域, 避免变量冲突的问题</p></blockquote><h2 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn调用&quot;</span>,<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// --&gt; window.fn() this--&gt;window</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;</span><br><span class="line">obj.<span class="property">test</span> = fn <span class="comment">//this--&gt;obj1</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>, <span class="attr">test</span>: fn&#125; <span class="comment">// this--&gt;obj2</span></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;沙和尚&quot;</span></span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)<span class="comment">//this--&gt;name(沙和尚)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj4 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;唐僧&quot;</span></span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)<span class="comment">//this--&gt;name(唐僧)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">obj3.<span class="title function_">sayHello</span>()<span class="comment">//修改name的值就会修改sayHello的返回值</span></span><br><span class="line">obj4.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><blockquote><p>函数在执行时,js解释器每次都会传递进一个隐含的参数–&gt;this,this会指向一个对象,这个对象会根据函数调用的方式不同而不同,以函数形式调用时,this会指向window,以方法的形式调用时, this指向的是调用方法的对象</p><p>通过this可以在方法中引用调用方法的对象(如obj3与obj4)</p></blockquote><h3 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//this--&gt;fn</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//this --&gt; window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    fn, <span class="comment">//属性名与属性值相同可以简化</span></span><br><span class="line">    fn2,</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">//张三</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">t</span>(<span class="params"></span>) &#123;</span><br><span class="line">            cosnole.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//this --&gt; window</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">t</span>()</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">t2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//张三</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">t2</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数没有自己的this, 它的this由外层作用域决定,箭头函数的this和他的调用方式无关</p></blockquote><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//全局严格模式</span><br><span class="line">&quot;use strict&quot;</span><br><span class="line">//函数严格模式</span><br><span class="line">function fn() &#123;</span><br><span class="line">&quot;use strict&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在严格模式下, 会禁止一些语法,更容易报错,提高代码执行性能</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06js面向对象</title>
      <link href="/posts/f9dc628f.html"/>
      <url>/posts/f9dc628f.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>面向对象编程(OOP)</p><ol><li><p>程序是干嘛的?</p><p>程序是对现实世界的抽象(列如: 照片就是对人的抽象)</p></li><li><p>对象是干嘛的?</p><p>一个事物抽象到程序中后就变成了对象, 在程序中一切皆对象</p><p>一个事物通常有两部分组成:   数据和功能</p><p>一个对象有两部分组成:   属性和方法</p></li></ol><blockquote><p>面向对象编程:</p><p>程序中的所有操作都是通过对象来完成</p><p>做任何事之前都要先找到它的对象, 然后通过对象来完成各种操作</p></blockquote><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>使用<code>object</code>创建对象的问题:</p><ol><li>无法区分出不同类型的对象</li><li>不方便批量创建对像</li></ol><p>在<code>JS</code>中可以通过类(class)来解决这个问题:</p><ol><li>类是对象的模板, 可以将对象中的属性和方法直接定义在类中, 定义后就可以直接通过类来创建对象</li><li>通过同一个类创建的对象, 称为同类对象</li></ol><p>可以使用<code>instanceof</code>来检查一个对象是否有某个类创建, 如果某个对象是由某个类创建的, 则称该对象是这个类的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用构造函数创建对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span></span><br><span class="line"><span class="keyword">const</span> d1 = <span class="keyword">new</span> <span class="title class_">Dog</span></span><br><span class="line"><span class="keyword">const</span> d2 = <span class="keyword">new</span> <span class="title class_">Dog</span></span><br><span class="line"><span class="comment">//使用instanceof检查是否为同类对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d2 <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//实例属性</span></span><br><span class="line">    name = <span class="string">&quot;孙悟空&quot;</span> <span class="comment">//Person的实例属性name, 实例属性只能通过实例访问--&gt;p1.name p2.age</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    <span class="comment">//静态属性</span></span><br><span class="line">    <span class="keyword">static</span> test = <span class="string">&quot;test为静态属性&quot;</span></span><br><span class="line">    <span class="keyword">static</span> hh = <span class="string">&quot;静态属性&quot;</span> </span><br><span class="line">    <span class="comment">//使用static声明的的属性为静态属性(类属性)只能通过类去访问 Person.test Person.hh</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1, p2)</span><br></pre></td></tr></table></figure><blockquote><p><strong>类是创建对象的模块, 要创建的第一件事就是定义类</strong></p><p>类的代码块, 默认为严格模式, <strong>类的代码块只能用来设置对象的属性, 不能什么代码都写</strong></p></blockquote><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    name = <span class="string">&quot;猪八戒&quot;</span></span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//实例方法, 通过类的实例(p1)调用, this指向当前实例</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是猪八戒&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">   <span class="keyword">static</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">//静态方法, 通过类调用, this指向当前的类</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;text静态方法&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的实例赋值给 p1</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p1.<span class="title function_">sayHello</span>() <span class="comment">//类实例调用, 实例方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">test</span>() <span class="comment">//类调用, 静态方法</span></span><br></pre></td></tr></table></figure><blockquote><p>类的方法调用与类的属性调用方式一样,</p><p>实例属性(方法)通过类实例来调用</p><p>静态属性(方法)直接通过类调用</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//在类中可以添加一个特殊的方法(constructor), 该方法我们称为构造函数(构造方法), 构造函数会在调用类创建对象时执行</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>)<span class="comment">// cosntructor执行</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">28</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;白骨精&quot;</span>, <span class="number">38</span>, <span class="string">&quot;女&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p3)</span><br></pre></td></tr></table></figure><blockquote><p><strong>构造函数会在我们调用类创建对象时执行</strong></p><p>可以在构造函数中,为实例属性进行赋值,this 指向当前所创建的对象</p></blockquote><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">#address = <span class="string">&quot;花果山&quot;</span> <span class="comment">//实例使用 # 号开头就变成了私有属性</span></span><br><span class="line">#name</span><br><span class="line">#age</span><br><span class="line">#gender</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#name = name</span><br><span class="line">        <span class="variable language_">this</span>.#age = age</span><br><span class="line">        <span class="variable language_">this</span>.#gender = gender</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.#address)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#name = name</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">setName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#name = name</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 控制数据的 读 权限</span></span><br><span class="line">      <span class="comment">//getAge() &#123;</span></span><br><span class="line">        <span class="comment">//return this.#age = age</span></span><br><span class="line">      <span class="comment">//&#125;</span></span><br><span class="line">      <span class="title function_">setAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">          <span class="comment">//对属性的值进行验证</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isNaN</span>(age) &amp;&amp; age &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.#age = age</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//简便方式</span></span><br><span class="line">      <span class="keyword">get</span> <span class="title function_">gender</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getter(gender)执行了&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#gender</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">set</span> <span class="title function_">gender</span>(<span class="params">gender</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setter(gender)执行了&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.#gender = gender</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span> ,<span class="string">&quot;男&quot;</span>)</span><br><span class="line">p1.<span class="title function_">setAge</span>(<span class="number">18</span>)</span><br><span class="line">p1.<span class="title function_">setName</span>(<span class="string">&quot;猪八戒&quot;</span>)</span><br><span class="line">p1.<span class="property">gender</span> = <span class="string">&quot;女&quot;</span> <span class="comment">//实际上在调用set方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">gender</span>) <span class="comment">//p1.gender实际上在调用get方法</span></span><br></pre></td></tr></table></figure><blockquote><p>封装:<br>  (装) 对象就是一个用来存储不同属性的容器<br>  对象不仅负责属性的存储, 还要负责属性的安全<br>  (封) 保证数据的安全:<br>    - 私有化数据:  将需要保护的数据设置为私有, 只能在类的内部使用<br>        - 提供 setter 和 getter 方法来开放对数据的操作<br>      - 属性设置私有, 通过getter 和 setter方法操作属性的优点<br>        - 控制数据的 读, 写 权限<br>        - 可以在方法中对属性的值进行验证</p></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog, person)</span><br><span class="line"><span class="comment">//多态</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> + obj.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>(text)<span class="comment">//静态属性也能访问</span></span><br></pre></td></tr></table></figure><blockquote><p>多态:</p><ul><li>在 js 中不会检查参数的类型, 因此任何数据都可以作为参数传递</li><li>要调用某个函数, 无需指定类型, 只要对象满足某些条件即可</li><li>多态为我们提供了灵活性</li></ul></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动物再叫&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;汤姆&quot;</span>)</span><br><span class="line">dog.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog)</span><br><span class="line">cat.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat)</span><br></pre></td></tr></table></figure><blockquote><p>继承:<br>  -通过extends关键字可以完成继承<br>  -顶一个类继承另一个类时, 相当于把被继承的类, 的代码复制到当前类(继承类)中<br>  -继承发生时, 被继承的称为父类, 继承的类称为子类<br>  -通过继承可以减少重复的代码, 并且可以在不修改一个类的前提下 对其进行改扩展<br>封装 –&gt; 安全性<br>继承 –&gt; 扩展性<br>多态 –&gt; 灵活性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动物再叫&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line"><span class="comment">//  在子类中, 可以通过创建同名方法来重写父类的方法</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line"><span class="comment">//  重写构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">//重写父类构造函数时, 构造函数的第一行代码必须为 super()</span></span><br><span class="line">  <span class="variable language_">super</span>(name) <span class="comment">//调用父类的构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//调用父类的sayHello()方法</span></span><br><span class="line">  <span class="variable language_">super</span>.<span class="title function_">sayHello</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;汤姆&quot;</span>, <span class="number">18</span>)</span><br><span class="line">dog.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog)</span><br><span class="line">cat.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat)</span><br></pre></td></tr></table></figure><blockquote><p>通过继承可以在不修改一个类的情况下 对其进行扩展, 使用super关键字可以调用父类的方法</p><p>OCP原则:</p><p>程序应该对修改关闭, 对扩展开放</p></blockquote><h2 id="对象的结构"><a href="#对象的结构" class="headerlink" title="对象的结构"></a>对象的结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  age = <span class="number">18</span> <span class="comment">//对象自身</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>  = <span class="string">&quot;张三&quot;</span> <span class="comment">//对象自身</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span> <span class="comment">//对象自身</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//对象自身</span></span><br><span class="line">  sayHello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello, 我是&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// //原型对象</span></span><br><span class="line">  <span class="comment">// sayHello(name) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&quot;hello, 我是&quot; + this.name)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p.<span class="property">address</span> = <span class="string">&quot;花果山&quot;</span> <span class="comment">// 对象自身</span></span><br><span class="line">p.<span class="property">sayHello</span> = <span class="string">&quot;hello&quot;</span> <span class="comment">// 对象自身(原型对象中也有,但是优先访问对象自身)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">sayHello</span>)</span><br></pre></td></tr></table></figure><blockquote><p>对象在内存中的存储位置</p><p>1.对象自身(优先级高, 优先访问)<br>直接通过对象所添加的属性, 位于对象自身中<br> 在类中通过 属性名 &#x3D; 属性值(函数, 对象)<br>2.原型对象(prototype)<br> -对象中还有一些内容, 会存储到其他的对象里(原型对象)<br> -在对象中会有一个属性来存储原型对象并,链接对象自身, 这个属性叫做 <code>__proto__</code><br> -原型对象也负责对象的存储属性<br>-当我们访问对象中的属性时, 会优先访问自身的属性, 当该对象自身不包含该属性时, 则会去原型对象中寻找<br> -添加到原型对象的情况<br>-在类中通过xxx() {} 方法添加的方法, 为于原型中<br>   -主动向原型中添加属性或者方法</p></blockquote><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">  age = <span class="number">18</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line"><span class="comment">//访问一个对象的原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(p))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">constructor</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>) <span class="comment">//null</span></span><br></pre></td></tr></table></figure><blockquote><p>访问对象中的原型对象:<br>-对象.<strong>proto</strong><br>-<code>Object.getPrototypeOf</code>(对象)<br>原型对象中的数据:<br>-对象中的数据(属性, 方法, 等)<br>-constructor (对象的构造函数)<br>注意:<br>-原型对象也有对象, 以此类推就形成了一条原型链, 根据对象的复杂程度不同, 原型链的长度也会不同</p><p>-原型链:<br>  -读取对象属性时, 会优先使用对象自身属性, 如果对象自身没有则去原型对象中去寻找,  直到找不到返回null,如果对象原型链中没有这个属性则返回 undefined</p><p>-作用域链:<br>  -是找变量,  找不到会报错</p><p>-原型链:<br>  -找属性, 找不到返回undefined</p></blockquote><h3 id="原型链的作用"><a href="#原型链的作用" class="headerlink" title="原型链的作用"></a>原型链的作用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  age = <span class="number">18</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">//所有的同类型对象, 他们的原型对象都是同一个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p === p2) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span> === p2.<span class="property">__proto__</span>) </span><br><span class="line"><span class="comment">//true, 虽然是两个不同的对象, 但他们都是通过Person()创建的, 因此他们的原型对象一样</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">sayHello</span>) <span class="comment">//原型对象</span></span><br><span class="line">p.<span class="property">sayHello</span>  = <span class="string">&quot;hello&quot;</span> <span class="comment">// 添加与原型对象不同的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">sayHello</span>)<span class="comment">//自身对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">sayHello</span>)<span class="comment">//原型对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Cat</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原形型的作用:<br>  -原型相当于一个公共区域, 可以被所有这个类的实例 访问<br>  -可以将一个类的实例中, 存放所有公共属性(方法)进行统一存储<br>  -这样只需要创建一个属性, 即可被所有实例访问<br>在对象中有些值时对象独有的,  如属性(name, age, gender)每个对象都应该有自己的值<br>但有些值对于每个对象来说都是一样的, 象各种方法, 对于一样的值没必要重复创建<br>继承就是通过原型链来实现的, 当继承时, 子类的原型就是一个父类的实例</p></blockquote><h3 id="修改原型"><a href="#修改原型" class="headerlink" title="修改原型"></a>修改原型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  age = <span class="number">48</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">//不建议使用</span></span><br><span class="line"><span class="comment">// p.__proto__.run = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;跑&quot;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(p.run(), p2.run())</span></span><br><span class="line"><span class="comment">// //更不建议使用</span></span><br><span class="line"><span class="comment">// // p.__proto__ = new Dog()</span></span><br><span class="line"><span class="comment">// // console.log(p, p2)</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fly</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;飞&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(p, p2)</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">fly</span>, p2)</span><br></pre></td></tr></table></figure><blockquote><p> 一般情况下不需要修改原型<br>  -注意:<br>    -千万不要通过类的实例去修改原型<br>    1.通过一个对象影响所有同类对象, 不合适<br>    2.修改原型要先创建实例, 麻烦<br>    3.危险<br> 可以通过类的prototype属性, 来访问对象的原型, 也可以通过它来修改原型<br>  -修改会对所有实例产生影响<br>  -无需创建实例即可对类进行操作<br>  -不建议直接给prototype直接赋值</p></blockquote><h2 id="instanceof-hasOwn"><a href="#instanceof-hasOwn" class="headerlink" title="instanceof, hasOwn"></a><code>instanceof, hasOwn</code></h2><p><strong><code>instanceof :</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog <span class="keyword">instanceof</span> <span class="title class_">Dog</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog <span class="keyword">instanceof</span> <span class="title class_">Animal</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>instanceof会检查一个对象是否是一个类的实例<br>  -instanceof检查的是对象的原型链上是否有该类实例, 只要原型链上有就会返回true<br>  -Object是所有对象的原型, 所以任何对象和Object进行instanceof运算都会返回true</p></blockquote><p><strong><code>hasOwn :</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">  age = <span class="number">18</span></span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">//&quot;属性名&quot; in 对象</span></span><br><span class="line"><span class="comment">//  -使用in运算符检查属性时, 无论属性在原型中还是在对象自身中, 都会返回true, 除非没有这个属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sayHello&quot;</span> <span class="keyword">in</span> p) <span class="comment">//true</span></span><br><span class="line"><span class="comment">//对象.hasOwnProperty(&quot;属性名&quot;),(不推荐使用)</span></span><br><span class="line"><span class="comment">//  -用来检查一个属性是否在对象自身中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;sayHello&quot;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="comment">//Object.hasOwn(对象, &quot;属性名&quot;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(p, <span class="string">&quot;sayHello&quot;</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="旧类"><a href="#旧类" class="headerlink" title="旧类"></a>旧类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span>  <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">//在构造函数中, this就表示新建的对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">    <span class="comment">//旧的类添加方法, 会直接添加到对象本身</span></span><br><span class="line">    <span class="comment">// this.sayHello = function() &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(this.name)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//向函数中添加属性(方法)</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//添加静态属性</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">staticProperty</span> = <span class="string">&quot;jjjj&quot;</span></span><br><span class="line"><span class="comment">//添加静态方法</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">staticMethod</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Person</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Cat</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  继承Person</span></span><br><span class="line">    <span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cat</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat)</span><br></pre></td></tr></table></figure><blockquote><p>在早期的 js 中, 直接通过函数在定义类</p><ul><li>一个函数如果直接调用: xxx(), 那么就是一个普通的函数</li><li>一个函数如果通过new调用 new xxx() 那么这个函数就是一个构造函数</li></ul></blockquote><h2 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 3.使用实参来执行构造函数, 并且将新对象设置为函数中的this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">naem</span> = naem</span><br><span class="line">    <span class="comment">//2.将构造函数的prototype属性设置为新对象的原型</span></span><br><span class="line">    <span class="keyword">let</span> newInstance = &#123;&#125;</span><br><span class="line">    newInstance.<span class="property">__proto__</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="comment">//4.如果构造函数返回的是一个非原始值, 则该值会作为new运算符的返回值返回(千万不要这么做)</span></span><br><span class="line">    <span class="comment">//一旦指定了非原始值, 就会返回这个值, 就不会把新对象作为返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&quot;12&quot;</span>&#125; <span class="comment">//非原始值 永远会返回 &#123;name: &quot;12&quot;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="comment">//原始值(五大基本数据类型: Undefined,Null,Boolean,Number,String)--原始值不能更改, 会返回新对象Person</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.创建一个普通的js对象(Object 对象 &#123;&#125;), 为了方便, 称为新对象</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br></pre></td></tr></table></figure><blockquote><p>当时用new去调用一个函数时, 这个函数将会作为构造函数调用</p><ol><li>创建一个普通的js对象(Object 对象 {}), 为了方便, 称为新对象</li><li>将构造函数的prototype属性设置为新对象的原型</li><li>使用实参来执行构造函数, 并且将新对象设置为函数中的this</li><li>如果构造函数返回的是一个非原始值, 则该值会作为new运算符的返回值返回(千万不要这么做)<br>如果构造函数的返回值是一个原始值, 或者不指定返回值, 则新对象会作为返回值返回, 通常不指定返回值</li></ol></blockquote><h2 id="面向对象总结"><a href="#面向对象总结" class="headerlink" title="面向对象总结"></a>面向对象总结</h2><blockquote><p><strong>面向对象, 即所有的操作都是通过对象来进行的</strong></p><p>面向对象的编程步骤:</p><ol><li>找对象</li><li>搞对象</li></ol><p>学习对象:</p><ol><li>明确这个对象代表这什么(如, window代表浏览器窗口对象, document代表文档对象), 与对象的具体作用, 操作这个对象能干些什么?</li><li>如何使用这个对象(对象中的属性和方法), 具体的操作步骤</li></ol><p>对象的分类:</p><ol><li>内建对象:<ul><li>有Es标准所定义的对象</li><li>列如: String, Number, Boolean, Function, Object</li></ul></li><li>宿主对象:<ul><li>由浏览器提供的对象</li><li>BOM, DOM</li></ul></li><li>自定义对象:<ul><li>有开发人员自己定义</li></ul></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07js数组</title>
      <link href="/posts/d842d99a.html"/>
      <url>/posts/d842d99a.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组的简介"><a href="#数组的简介" class="headerlink" title="*数组的简介"></a>*数组的简介</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个数组:</span></span><br><span class="line"><span class="comment">//1.使用Array()的构造函数来创建数组</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="comment">//2.使用字面量创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = []</span><br><span class="line"><span class="comment">//向数组中添加元素</span></span><br><span class="line"><span class="comment">//1.通过索引向数组中添加数据</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line"><span class="comment">//2.直接在字面量中添加元素</span></span><br><span class="line">arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment">//不连续数组: (使用数组时, 尽量避免不连续数组)</span></span><br><span class="line">arr[<span class="number">100</span>] = <span class="number">100</span></span><br><span class="line"><span class="comment">//读取数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]) <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">2</span>])<span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">1000</span>]) <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr) <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr2) <span class="comment">//object</span></span><br><span class="line"><span class="comment">//使用length获取数组的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>)</span><br><span class="line"><span class="comment">//使用length向数组最后添加元素</span></span><br><span class="line">arr[arr.<span class="property">length</span>] = <span class="number">33</span></span><br><span class="line"><span class="comment">//使用length修改数组的长度</span></span><br><span class="line">arr.<span class="property">length</span> = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>数组: 数组与对象一样也是复合数据类型,在数组中可以存储多个不同类型的数据(元素),数组中存储的是有序数据,而对象中存储的是无序的数据, 数组中的每个数据都有唯一的一个索引, 可以通过索引来操作, 获取数据</strong></p><p><strong>索引(index):一组大于0, 且从0开始的整数,  读取数组中不存在的元素时, 不会报错, 而是返回undefined, 使用typeof检查数组会返回Object</strong></p></blockquote><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="*数组的遍历"></a>*数组的遍历</h2><h3 id="使用for循环遍历数组"><a href="#使用for循环遍历数组" class="headerlink" title="使用for循环遍历数组"></a>使用for循环遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任何类型的值都可以作为数组的元素 (尽量储存同类型的值)</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">&quot;String&quot;</span>, <span class="literal">true</span>, <span class="literal">null</span>, &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;, <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)&#125;]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;汤姆&quot;</span>, <span class="string">&quot;杰克&quot;</span>]</span><br><span class="line"><span class="comment">//可以使用for循环遍历数组</span></span><br><span class="line"><span class="comment">//正向遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr2.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反向遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=arr2.<span class="property">length</span>-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小练习--打印成年人与未成年人</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personArr = [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">49</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">50</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;杰克&quot;</span>, <span class="number">17</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;汤姆&quot;</span>, <span class="number">5</span>),</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personArr[<span class="number">0</span>].<span class="property">age</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;personArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(personArr[i].<span class="property">age</span>&gt;=<span class="number">18</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(personArr[i].<span class="property">name</span> + <span class="string">&quot;成年&quot;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(personArr[i].<span class="property">name</span> + <span class="string">&quot;未成年&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用for-of遍历数组"><a href="#使用for-of遍历数组" class="headerlink" title="使用for of遍历数组"></a>使用<code>for of</code>遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;汤姆&quot;</span>, <span class="string">&quot;杰克&quot;</span>]</span><br><span class="line"><span class="comment">//使用for in遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr2) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for of 可以遍历 可迭代对象(有下标的对象: 例如:数组, 字符串)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的方法-非破坏性"><a href="#数组的方法-非破坏性" class="headerlink" title="*数组的方法(非破坏性)"></a>*数组的方法(非破坏性)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;)) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment">//true</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;汤姆&quot;</span>, <span class="string">&quot;杰克&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">1</span>))<span class="comment">//&quot;李四&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">3</span>))<span class="comment">//&quot;李四&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">concat</span>(arr2, [<span class="string">&quot;fk&quot;</span>, <span class="string">&quot;fkAll&quot;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p>静态方法:<br><code>Array.isArray()</code></p><ul><li>用来检查一个对象是否为数组</li></ul><p>实例方法:<br><code>at()</code></p><ul><li>可以根据索引获取数组中的指定元素</li><li>at 可以接收负值做引作为参数, 即获取倒数第几个元素</li></ul><p><code>concat()</code></p><ul><li>用来链接两个或者多个数组</li><li>非破坏方法, 即不会影响旧数组, 而是返回一个新数组</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;汤姆&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;杰克&quot;</span>]</span><br><span class="line"><span class="comment">//indexOf()</span></span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">indexOf</span>(<span class="string">&quot;张三&quot;</span>) <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> result2 = arr.<span class="title function_">indexOf</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">4</span>) <span class="comment">//从索引4的元素开始 往后查询, 查询不到返回 -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result, result2)</span><br><span class="line"><span class="comment">//lastIndexOf()</span></span><br><span class="line"><span class="keyword">let</span> r = arr.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;张三&quot;</span>) <span class="comment">//3</span></span><br><span class="line"><span class="keyword">let</span> r2 = arr.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">0</span>) <span class="comment">//从索引0元素开始 往前查询, 第一个&quot;张三&quot;刚好位于索引0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r, r2)</span><br><span class="line"><span class="comment">//join()</span></span><br><span class="line"><span class="keyword">let</span> j = arr.<span class="title function_">join</span>()<span class="comment">//默认连接符号为 , 号</span></span><br><span class="line">j = arr.<span class="title function_">join</span>(<span class="string">&quot;╰(*°▽°*)╯&quot;</span>) <span class="comment">//指定 ╰(*°▽°*)╯ 为连接符号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line"><span class="comment">//slice()</span></span><br><span class="line"><span class="keyword">let</span> s = arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">// 张三</span></span><br><span class="line"><span class="keyword">let</span> s2 = arr.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>) <span class="comment">// &quot;张三&quot;, &quot;李四&quot;, &quot;汤姆&quot;, &quot;张三&quot;, &quot;李四&quot;</span></span><br><span class="line"><span class="keyword">let</span> s3 = arr.<span class="title function_">slice</span>() <span class="comment">// &quot;张三&quot;, &quot;李四&quot;, &quot;汤姆&quot;, &quot;张三&quot;, &quot;李四&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s, s2, s3)</span><br></pre></td></tr></table></figure><blockquote><p><code>indexOf()</code></p><ul><li>获取元素在数组中第一次出现的索引, 可以指定开始查询的位置 – (从前往后查), 返回值: 查询到则返回元素索引, 否则返回-1</li></ul><p><code>lastIndexOf()</code></p><ul><li>与indexOf使用方法类似, 查询顺序改为 从后往前查</li></ul><p><code>join()</code></p><ul><li>将一个数组中的元素连接成一个 字符串, 可以自定字符串的连接符号</li></ul><p><code>slice()</code></p><ul><li>截取数组, 包括起始位置, 不包括结束位置, 不写截取结束位置, 则一直截取到最后一个元素</li><li>可以传递负值, 从后往前数 , 如果不写开始位置与结束位置, 则截取全部 即 (<strong>浅拷贝</strong>)</li></ul></blockquote><h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="**浅拷贝与深拷贝"></a>**浅拷贝与深拷贝</h2><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202209172132631.png"></p><p><a href="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202209172132631.png">https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202209172132631.png</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>&#125;]</span><br><span class="line"><span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">slice</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2 === arr) <span class="comment">//false</span></span><br><span class="line">arr2[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr2) <span class="comment">//浅拷贝: 修改拷贝后的对象属性(,元素) 会对拷贝前的对象产生影响</span></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="comment">//structuredClone() -- 针对深拷贝</span></span><br><span class="line"><span class="keyword">const</span> arr3 = <span class="title function_">structuredClone</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3 === arr) <span class="comment">//false</span></span><br><span class="line">arr3[<span class="number">0</span>] = <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr3)<span class="comment">//深拷贝: 修改拷贝后的对象属性(,元素) 不会对拷贝前的对象产生影响</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>浅拷贝(shallow copy):</strong></p><ul><li>通常对对象的拷贝都是浅拷贝</li><li>浅拷贝只会对 对象拷贝一层, 即对对象本身进行拷贝, 不会拷贝对象中的属性(或者元素)</li></ul><p><strong>深拷贝(deep copy):</strong></p><ul><li>深拷贝不仅拷贝对象本身, 还拷贝对象的属性(或者元素)</li><li>通常情况下不使用深拷贝,(存在性能问题)</li></ul><p><strong>注意:   对象中存储的数据是原始值时,  没有浅拷贝与深拷贝的区别</strong></p></blockquote><h3 id="拷贝的方法"><a href="#拷贝的方法" class="headerlink" title="拷贝的方法"></a>拷贝的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的拷贝</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;瑞克&quot;</span>, <span class="string">&quot;莫蒂&quot;</span>]</span><br><span class="line"><span class="comment">//1.手动浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [arr[<span class="number">0</span>], arr[<span class="number">1</span>], arr[<span class="number">2</span>], arr[<span class="number">3</span>]]</span><br><span class="line"><span class="comment">// ...(展开运算符)</span></span><br><span class="line">arr2 = [...arr]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr, arr2)</span><br><span class="line"><span class="comment">//展开运算符作为函数的参数传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">10</span>, <span class="number">20</span> ,<span class="number">30</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...a))</span><br><span class="line"><span class="comment">//对象的拷贝</span></span><br><span class="line"><span class="comment">//1.静态属性 Object.assign()</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;<span class="attr">address</span>: <span class="string">&quot;高老庄&quot;</span>, <span class="attr">age</span>: <span class="number">48</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, obj) <span class="comment">//将对象obj拷贝到obj2中, age被obj的age覆盖</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, obj2)</span><br><span class="line"><span class="comment">//2.展开运算符 ...()</span></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;<span class="attr">address</span>: <span class="string">&quot;流沙河&quot;</span>, ...obj, <span class="attr">age</span>: <span class="number">50</span>&#125; <span class="comment">//将obj中的属性展开到obj3中, age在展开运算符后面, 不会被覆盖</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, obj3)</span><br></pre></td></tr></table></figure><blockquote><p>浅拷贝的方法:</p><ul><li>数组</li></ul><ol><li>手动拷贝</li><li>slice()方法</li><li>…() 展开运算符 – 使一个数组||对象, 展开到另个一数组||对象中</li></ol><ul><li>对象</li></ul><ol><li>Object.assign() – 将一个对象拷贝到目标对象, 并将目标对象返回, 同名属性将被覆盖</li><li>…() 展开运算符</li></ol></blockquote><h2 id="数组的方法-破坏性"><a href="#数组的方法-破坏性" class="headerlink" title="数组的方法(破坏性)"></a>数组的方法(破坏性)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;莫蒂&quot;</span>,<span class="string">&quot;杰克&quot;</span>, <span class="string">&quot;瑞克&quot;</span>, <span class="string">&quot;汤姆&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">push</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//返回新数组的长度 6</span></span><br><span class="line"><span class="keyword">let</span> result2 = arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2) <span class="comment">//返回删除的元素</span></span><br><span class="line"><span class="keyword">let</span> result3 = arr.<span class="title function_">unshift</span>(<span class="string">&quot;kt&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3) <span class="comment">//返回新数组的长度 6</span></span><br><span class="line"><span class="keyword">let</span> result4 = arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result4) <span class="comment">//返回删除的元素</span></span><br><span class="line"><span class="keyword">let</span> r</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">r = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="comment">//添加, 插入</span></span><br><span class="line">r = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;cr1&quot;</span>, <span class="string">&quot;cr2&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line">r = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;th1&quot;</span>, <span class="string">&quot;th2&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr2.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br></pre></td></tr></table></figure><blockquote><p>数组的方法(破坏性):<br><code>push()</code></p><ul><li>向数组末尾添加一个或多个元素, 并返回新数组的长度</li></ul><p><code>pop()</code></p><ul><li>删除并返回数组的最后一个元素</li></ul><p><code>unshift()</code></p><ul><li>向数组开头添加一个或多个元素, 并返回新数组的长度</li></ul><p><code>shift()</code></p><ul><li>删除并返回数组的第一个元素</li></ul><p><code>splice() -- 功能强大, 比较常用</code></p><ul><li><p>删除, 添加, 插入, 替换, 数组中的元素, 返回删除的元素</p></li><li><p>参数</p><ol><li>删除的起始位置</li><li>删除的数量</li><li>插入的元素</li></ol></li></ul><p><code>reverse()</code></p><ul><li>反转数组</li></ul></blockquote><h2 id="练习-数组去重"><a href="#练习-数组去重" class="headerlink" title="*练习: 数组去重"></a>*练习: 数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">// //获取数组中的元素</span></span><br><span class="line"><span class="comment">// for(let i=0; i&lt;a.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//   //获取索引i后面的所有元素</span></span><br><span class="line"><span class="comment">//   for(let j=i+1; j&lt;a.length; j++) &#123;</span></span><br><span class="line"><span class="comment">//     if(a[i] === a[j]) &#123;</span></span><br><span class="line"><span class="comment">//       //删除索引j对应的元素</span></span><br><span class="line"><span class="comment">//       a.splice(j, 1)</span></span><br><span class="line"><span class="comment">//       j-- // 回退一个索引,在进行比较, 方式漏删</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(a)</span></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="comment">// for(let i=0; i&lt;a.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//   const index = a.indexOf(a[i], i+1)</span></span><br><span class="line"><span class="comment">//   if(index !== -1) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(i, index)</span></span><br><span class="line"><span class="comment">//     a.splice(index, 1)</span></span><br><span class="line"><span class="comment">//     i--</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(a)</span></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="keyword">let</span> n = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> ele <span class="keyword">of</span> a) &#123;</span><br><span class="line">  <span class="keyword">if</span>(n.<span class="title function_">indexOf</span>(ele) === -<span class="number">1</span>) &#123;</span><br><span class="line">    n.<span class="title function_">push</span>(ele)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br></pre></td></tr></table></figure><blockquote><p>思路1: 破坏性方法, 在原数组上删除重复的元素–&gt; 方式1, 2</p><p>思路2: 非破坏性方法, 创建新的数组, 把原数组的元素添加到新数组, 判断重复的元素使其不会添加到新数组里</p></blockquote><h2 id="练习-数组排序"><a href="#练习-数组排序" class="headerlink" title="*练习: 数组排序"></a>*练习: 数组排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//思路 : 比较相邻两个元素的大小, 然后根据大小进行排序</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>-<span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// console.log(i)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;arr.<span class="property">length</span>-i-<span class="number">1</span>; j++) &#123; <span class="comment">//后面的值不用再进行比较, 因此数组长度减去 i</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i, <span class="string">&quot;--&gt;&quot;</span> +  j)</span><br><span class="line">    <span class="keyword">if</span> (arr[j] &lt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = arr[j+<span class="number">1</span>]</span><br><span class="line">      arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">      arr[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择排序</span></span><br><span class="line"><span class="comment">// 思路 : 选择一个元素, 与其他元素进行对比, 如果比它小就进行交换</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr2.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j=i+<span class="number">1</span>; j&lt;arr2.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="comment">// 每次交换位置以后, arr2[i]的元素都会改变, 并不是一直都为9</span></span><br><span class="line">    <span class="keyword">if</span> (arr2[i] &gt; arr2[j]) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = arr2[j]</span><br><span class="line">      arr2[j] = arr2[i]</span><br><span class="line">      arr2[i] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br></pre></td></tr></table></figure><blockquote><p>以上两种排序方法, 性能都比较差, 只适用于元素比较少的数组, 但<strong>排序的逻辑</strong>要掌握清楚</p></blockquote><h2 id="封装函数"><a href="#封装函数" class="headerlink" title="**封装函数"></a>**封装函数</h2><p><strong>封装一 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">short</span>(<span class="params">al</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = [...al]<span class="comment">// 转成非破坏性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;a.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j=i+<span class="number">1</span>; j&lt;a.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] &gt; a[j]) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = a[j]</span><br><span class="line">      a[j] = a[i]</span><br><span class="line">      a[i] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">short</span>(arr2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br></pre></td></tr></table></figure><p><strong>封装二 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personArr = [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">49</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">50</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;杰克&quot;</span>, <span class="number">17</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;汤姆&quot;</span>, <span class="number">5</span>),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filter</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"><span class="comment">//小练习--输出未成年人</span></span><br><span class="line">    <span class="keyword">const</span> a = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(arr[i].<span class="property">age</span>&gt;=<span class="number">18</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i].<span class="property">name</span> + <span class="string">&quot;成年&quot;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    a.<span class="title function_">push</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">filter</span>(personArr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><p><strong>封装三(修改封装二, 使其功能更加完善) :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personArr = [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">49</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">50</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;杰克&quot;</span>, <span class="number">17</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;汤姆&quot;</span>, <span class="number">5</span>),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filter</span>(<span class="params">arr, cb</span>) &#123; <span class="comment">//2.cb形参,接受传递的fn(函数)实参, </span></span><br><span class="line">    <span class="keyword">const</span> a = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">     <span class="comment">//3.cb() 调用传入的实参即: 调用fn --&gt; fn()(回调函数调用), 并传递实参 arr[i]</span></span><br><span class="line">  <span class="keyword">if</span>( <span class="title function_">cb</span>(arr[i]) ) &#123; </span><br><span class="line">    a.<span class="title function_">push</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">f</span>) &#123; <span class="comment">//4.定义函数 fn(回调函数), f形参, 接受传递的 arr[i](数组) 实参</span></span><br><span class="line">    <span class="comment">//return f.name === &quot;张三&quot; //返回name是张三的元素(对象)</span></span><br><span class="line">    <span class="comment">//return f.age &gt; 18 //返回age大于18的元素(对象)</span></span><br><span class="line">    <span class="keyword">return</span> f.<span class="property">age</span> === <span class="number">5</span> <span class="comment">//返回age等于5的元素(对象)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">filter</span>(personArr, fn) <span class="comment">//1.fn实参,传递fn函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p>一个函数的参数也可以是函数,即 <strong>回调函数</strong></p><p>回调函数:定义函数后, 在别的函数里进行调用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08js数组的补充</title>
      <link href="/posts/5ec2aaad.html"/>
      <url>/posts/5ec2aaad.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组的补充"><a href="#数组的补充" class="headerlink" title="数组的补充"></a>数组的补充</h1><h2 id="数组的方法-高阶函数"><a href="#数组的方法-高阶函数" class="headerlink" title="数组的方法(高阶函数)"></a>数组的方法(高阶函数)</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="comment">//调用sort方法, 并传入回调函数</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) <span class="comment">//升序排列</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a) <span class="comment">//降序排列</span></span><br></pre></td></tr></table></figure><blockquote><p><code>sort():</code> (破坏性方法)</p><ul><li><code>sort</code>用来对数组进行排序</li><li>默认数组升序排列, 会按照Unicode编码进行排序, 因此对数字排序时, 可能会得到一个不正确的结果</li><li>可以传递一个回调函数作为<code>sort</code>函数的的参数,通过回调函数来指定排序规则</li></ul></blockquote><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;瑞克&#x27;</span>, <span class="string">&#x27;莫蒂&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(element, index, array)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>forEach():</code></p><ul><li>用来遍历数组, 需要一个回调函数作为参数, 数组中有几个元素, 回调函数就会调用几次, 每次调用都会将数组中的数据作为参数传递</li><li><code>element:</code> 当前的元素</li><li><code>index:</code>  当前元素的索引</li><li><code>array:</code>  被遍历的数组</li></ul></blockquote><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr </span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">arr</span> =&gt;</span> arr % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p><code>filter():</code>(非破坏性方法)</p><ul><li>将数组中符合条件的元素,  保存到新数组中并返回</li><li>需要回调函数作为参数, 会为每一个元素调用回调函数,  并根据返回值来决定是否将元素添加到新数组中</li><li>具有 <code>element</code>, <code>index</code>,  <code>array</code>等参数</li></ul></blockquote><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr</span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">map</span>(<span class="function"><span class="params">ele</span> =&gt;</span> ele * <span class="number">2</span>)</span><br><span class="line">result = arr.<span class="title function_">map</span>(<span class="function"><span class="params">ele</span> =&gt;</span> <span class="string">&quot;&lt;li&gt;&quot;</span> + ele + <span class="string">&quot;&lt;/li&gt;&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p><code>map():</code>(非破坏性方法)</p><ul><li>根据当前数组生成一个新数组</li><li>需要回调函数作为参数, 回调函数的返回值会成为新数组中的元素</li><li>具有 <code>element</code>, <code>index</code>,  <code>array</code>等参数</li></ul></blockquote><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr</span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b)</span><br><span class="line">result = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p><code>reduce():</code> (非破坏性方法)</p><ul><li>将一个数组中的所有元素整合为一个值</li><li>需要回调函数作为参数, 通过回调函数来指定合并规则</li><li><strong>第一个参数a:</strong> 第一个元素</li><li><strong>第二个参数b:</strong> 第二个元素</li><li><strong>第三个参数:</strong> 指定初始值</li></ul></blockquote><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arguments, 接受函数实参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="variable language_">arguments</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">//使用arguments可以是我们不受形参的限制,  但是如果不是自己写的,不容易判断函数是否需要传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> <span class="variable language_">arguments</span>) &#123;</span><br><span class="line">    result += num</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可变参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">a, b, ...arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg[<span class="number">2</span>]())</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="literal">true</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;, <span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">...g</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> g.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>arguments:</code></p><ul><li>是函数中的一个 隐含参数(列如: this)</li><li>arguments是一个类数组对象, 可以通过索引来获取元素, 也可以通过for循环遍历, 但不是数组,不能使用数组的方法</li><li>arguments用来存储函数的实参,不论是否定义形参, 且可以直接访问实参</li></ul><p><strong>可变参数</strong>:</p><ul><li>可变参数可以接受任意数量的实参,  并统一存储到一个数组中返回</li><li>可变参数的作用和arguments基本一致, 但也有不同点:<ul><li>可变参数可以自己命名</li><li>可变参数本身就是一个很数组,  可以直接使用数组的方法<ul><li>可变参数可以与普通参数一起使用</li></ul></li></ul></li></ul></blockquote><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call,apply"></a>call,apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数执行了&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// this --&gt; window</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, fn&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>() <span class="comment">// this --&gt; obj</span></span><br><span class="line"><span class="comment">//通过call()方法调用函数</span></span><br><span class="line">fn.<span class="title function_">call</span>()</span><br><span class="line"><span class="comment">//通过apply()方法调用,  并重定向this使其指向obj</span></span><br><span class="line">fn.<span class="title function_">apply</span>(obj)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a=&#x27;</span>, a, <span class="string">&#x27;b=&#x27;</span>, b, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//普通调用传递参数</span></span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">//call方法调用,   传递参数在第一个参数之后, 依次传递</span></span><br><span class="line">fn2.<span class="title function_">call</span>(obj, <span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">//apply方法调用,  传递参数在第一个参数之后, 需要通过数组的方式传递</span></span><br><span class="line">fn2.<span class="title function_">apply</span>(obj, [<span class="number">2</span>, <span class="string">&#x27;hello&#x27;</span>])</span><br></pre></td></tr></table></figure><blockquote><p><strong>函数中的this指向</strong>:</p><ul><li>以函数的方式调用, this指向window</li><li>以方法的方式调用, this指向调用的方法的对象</li><li>构造函数中, this指向新建的对象</li><li>箭头函数中, this指向外层作用域对象</li><li>通过call()和apply()方法调用, this指向方法传递的第一个参数<br>调用函数除了通过 函数() 来调用外, 还可以通过call()和apply()这两个方法来调用<br>call()和apply()的第一个参数会成为函数的this</li><li>通过bind返回的新函数,this有由bind第一个参数绑定(无法修改)</li></ul></blockquote><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn函数执行了&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">age</span>: <span class="number">15</span>, fn&#125;</span><br><span class="line"><span class="keyword">const</span> newFn = fn.<span class="title function_">bind</span>(obj, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="title function_">newFn</span>()</span><br><span class="line"><span class="comment">//通过bind方法调用返回的新函数无法修改 this与参数</span></span><br><span class="line">newFn.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">newFn.<span class="title function_">apply</span>(<span class="variable language_">window</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">fn.<span class="title function_">bind</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myL</span> &#123;</span><br><span class="line">  fn = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mc = <span class="keyword">new</span> <span class="title function_">myL</span>()</span><br><span class="line">mc.<span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">//无法修改 this 指向</span></span><br><span class="line">mc.<span class="property">fn</span>.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">mc.<span class="property">fn</span>.<span class="title function_">apply</span>(&#123;&#125;,[ <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="keyword">const</span> newMc = mc.<span class="property">fn</span>.<span class="title function_">bind</span>(<span class="variable language_">window</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="title function_">newMc</span>()</span><br></pre></td></tr></table></figure><blockquote><p><code>bind():</code><br>bind方法在调用后, 可以返回一个新的函数</p><ul><li>bind可以为新函数绑定this(绑定this,  无法被重定向)</li><li>bind可以为新函数绑定参数(无法修改)</li></ul><p><strong>注意</strong>:</p><ul><li>箭头函数没有自身的this, this由他的外层作用域决定,  无法通过call, apply, bind等方法进行修改</li><li>箭头函数中没有arguments这个隐含参数</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09js高阶函数</title>
      <link href="/posts/c284c2c3.html"/>
      <url>/posts/c284c2c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><h2 id="高阶函数-1"><a href="#高阶函数-1" class="headerlink" title="高阶函数"></a>高阶函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> personArr = [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">49</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">50</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;杰克&quot;</span>, <span class="number">17</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;汤姆&quot;</span>, <span class="number">5</span>),</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">filter</span>(<span class="params">arr, cb</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> arrNew = []</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_">cb</span>(arr[i]) ) &#123;</span><br><span class="line">          arrNew.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> arrNew</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">result = <span class="title function_">filter</span>(personArr, <span class="function"><span class="params">a</span> =&gt;</span> a.<span class="property">name</span> === <span class="string">&quot;张三&quot;</span> )</span><br><span class="line">result = <span class="title function_">filter</span>(personArr, <span class="function"><span class="params">a</span> =&gt;</span> a.<span class="property">age</span> === <span class="number">17</span> )</span><br><span class="line">result = <span class="title function_">filter</span>(arr, <span class="function"><span class="params">a</span> =&gt;</span> a%<span class="number">2</span> === <span class="number">0</span> )</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><blockquote><p>像<code>filtr</code>这种函数我们称为<strong>高阶函数</strong>, 即 一个函数的返回值或者参数是一个函数</p><ul><li>将函数作为参数, 称为<strong>回调函数</strong>, 意味着可以<strong>对一个函数动态的传递代码</strong></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">someFn</span>(<span class="params"></span>) &#123; <span class="comment">//1.定义一个 someFn 函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params">cb</span>) &#123; <span class="comment">//2.定义 outer 函数, 并声明形参cb, 且接受实参--&gt; someFn 函数</span></span><br><span class="line">  <span class="comment">//返回值作为参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;记录日志--&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">cb</span>() <span class="comment">//5.将 someFn 函数的返回值, 赋值给result</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="comment">//6.将 someFn 函数的返回值作为 outer 函数的返回值, 返回</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">outer</span>(someFn) <span class="comment">//3.传入实参 someFn函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>()) <span class="comment">// --&gt;4.调用outer函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123; <span class="comment">//1.定义一个 test 函数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test--&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r = <span class="title function_">outer</span>(test) <span class="comment">//3.传入实参 test 函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">r</span>()) <span class="comment">//4. 调用 outer</span></span><br></pre></td></tr></table></figure><blockquote><p>在不修改原函数的基础功能上, 使可以增加其功能<br>通过高阶函数来动态生成一个新的函数</p></blockquote><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="闭包的简介"><a href="#闭包的简介" class="headerlink" title="闭包的简介"></a>闭包的简介</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">  <span class="comment">//闭包</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    num ++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>())</span><br></pre></td></tr></table></figure><blockquote><p>闭包:</p><p>闭包就是能访问到,外部函数作用域中变量的函数,在我们需要隐藏一些不希望被别人访问到的内容时可以使用闭包</p><p>闭包的构成:</p><ol><li><strong>函数的嵌套</strong></li><li>内部函数要<strong>引用外部函数中的变量</strong></li><li>内部函数要<strong>作为返回值返回</strong></li></ol></blockquote><h3 id="闭包的原理"><a href="#闭包的原理" class="headerlink" title="闭包的原理"></a>闭包的原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;全局变量a&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;fn2中的a&#x27;</span></span><br><span class="line">  <span class="comment">// console.log(a)</span></span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>() <span class="comment">// 全局变量a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;fn3中的a&#x27;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn4</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>() <span class="comment">//fn3中的a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn5</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;fn5中的a&#x27;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn6</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//闭包</span></span><br><span class="line">  <span class="keyword">return</span> fn6</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn5</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>()) <span class="comment">//fn5中的a</span></span><br></pre></td></tr></table></figure><blockquote><p>函数作用域,  在函数创建的时候就已经被确定(词法作用域)<br>闭包就是利用词法作用域</p></blockquote><h3 id="闭包的一些注意事项"><a href="#闭包的一些注意事项" class="headerlink" title="闭包的一些注意事项"></a>闭包的一些注意事项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> someVariable = <span class="string">&quot;someValue&quot;</span></span><br><span class="line">  <span class="comment">//闭包</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(someVariable)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    num ++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">outer2</span>()</span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="title function_">outer2</span>()</span><br><span class="line"><span class="comment">//闭包被创建</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="title function_">fn2</span>()</span><br><span class="line"><span class="comment">//释放指针, 闭包销毁</span></span><br><span class="line"><span class="comment">// fn = null</span></span><br><span class="line"><span class="comment">// fn2 = null</span></span><br></pre></td></tr></table></figure><blockquote><p>闭包的生命周期:</p><ol><li>闭包在外部函数调用时产生, 外部函数每次调用都会产生一个全新的闭包</li><li>在内部函数丢失时销毁, (内部函数被垃圾回收了,  闭包才会消失)</li></ol><p>闭包的注意事项:</p><ol><li>闭包主要用来隐藏一些不希望被外部访问到的内容,这意味着闭包需要占用一定的空间,</li><li>相比较类来说, 闭包比较浪费内存空间(类可以使用原型,而原型不会重复创建,但是闭包不能)<ol><li>需要执行次数少时,使用闭包(推荐使用闭包,因为类存在<code>this</code>指向的问题)</li></ol></li><li>需要大量创建实例时,使用类</li></ol></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求任意一个数的阶乘</span></span><br><span class="line"><span class="comment">//方式一:循环方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jieCheng</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">2</span>; i&lt;=num; i++) &#123;</span><br><span class="line">    result *= i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">jieCheng</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">//方式二:递归方式 -- 尽量打断点分步执行, 理解递归函数的执行机制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jieCheng2</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">//基线条件 -- num等于1时结束函数, 返回1</span></span><br><span class="line">  <span class="keyword">if</span>(num === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//递归条件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">jieCheng2</span>(num-<span class="number">1</span>) * num</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">jieCheng2</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><blockquote><p>递归:</p><ul><li>调用自身的函数称为递归函数</li><li>递归的作用和循环基本一致</li></ul><p>核心思想:把一个大的问题拆分成一个一个的小问题进行解决</p><p>注意: 递归比循环更耗费性能,(递归每次调用函数都会创建函数作用域,占用内存空间)</p></blockquote><h3 id="递归练习"><a href="#递归练习" class="headerlink" title="递归练习"></a>递归练习</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求斐波那契数列(从1开始, 当前数等于前两个数之和)的第n个数</span></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//基线条件</span></span><br><span class="line">  <span class="keyword">if</span>(num &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//递归条件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fib</span>(num-<span class="number">1</span>) + <span class="title function_">fib</span>(num-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fib</span>(<span class="number">6</span>))</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fibo</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">1</span>; <span class="comment">//第一次循环pre是f(1)也就是1</span></span><br><span class="line">  <span class="keyword">let</span> next = <span class="number">1</span>; <span class="comment">//第一次循环next是f(2)也就是1</span></span><br><span class="line">  <span class="keyword">let</span> n_value = <span class="number">0</span>; <span class="comment">// 保存f(n)的值</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    n_value = pre + next;  <span class="comment">//每一次循环n_value就是前两个数的和</span></span><br><span class="line">    pre = next;  <span class="comment">// 然后把next赋值给pre</span></span><br><span class="line">    next = n_value;  <span class="comment">//把新的n_value的值赋值给next</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n_value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fibo</span>(<span class="number">12</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10js内置对象1</title>
      <link href="/posts/49249186.html"/>
      <url>/posts/49249186.html</url>
      
        <content type="html"><![CDATA[<h1 id="js内置对象1"><a href="#js内置对象1" class="headerlink" title="js内置对象1"></a>js内置对象1</h1><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;瑞克&#x27;</span>, <span class="string">&#x27;莫蒂&#x27;</span>];</span><br><span class="line"><span class="comment">//数组的解构赋值</span></span><br><span class="line"><span class="keyword">let</span>  [a, b, c, d] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d);</span><br><span class="line"><span class="comment">//设置默认值(变量多,  元素少)</span></span><br><span class="line"><span class="keyword">let</span> [e, f, g, h = d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//h的值默认为d</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e, f, g, h);</span><br><span class="line"><span class="comment">//可变参数, (变量少, 元素多)</span></span><br><span class="line"><span class="keyword">let</span> [n1, n2] = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1, n2);</span><br><span class="line"><span class="keyword">let</span> [n3, n4, ...n5] = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n3, n4, n5);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a1, b1, c1] = <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1, b1, c1);</span><br><span class="line"><span class="comment">//快速交换两个变量的位置</span></span><br><span class="line"><span class="keyword">let</span> a2 = <span class="number">20</span>, a3 =  <span class="number">30</span>;</span><br><span class="line">[a2, a3] = [a3, a2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2, a3)</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>];</span><br><span class="line">[arr2[<span class="number">0</span>], arr2[<span class="number">1</span>]] = [arr2[<span class="number">1</span>], arr2[<span class="number">0</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">0</span>], arr2[<span class="number">1</span>])</span><br><span class="line"><span class="comment">//二维数组 -- (一个数组中的元素还是一个数组)</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [[<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>], [<span class="string">&#x27;李四&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;男&#x27;</span>]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr3) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> value) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [[name, age, gender], obj] = arr3</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age ,gender, obj)</span><br></pre></td></tr></table></figure><h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的解构</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age , gender&#125; = obj</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>:a, <span class="attr">age</span>:b , <span class="attr">gender</span>:c, <span class="attr">address</span>:d = <span class="string">&#x27;上海&#x27;</span>&#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age , gender)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b , c, d)</span><br></pre></td></tr></table></figure><blockquote><p><strong>数组的解构</strong>变量名字可以自己定义,<strong>对象的解构</strong>变量名字必须与被解构的属性名一致</p></blockquote><h2 id="对象序列化-JSON"><a href="#对象序列化-JSON" class="headerlink" title="对象序列化(JSON)"></a>对象序列化(JSON)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将js对象转换为json字符串</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">//将json字符串转换为js对象</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line"><span class="comment">//编写json字符串</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;李四&quot;, &quot;age&quot;: 15&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3)</span><br></pre></td></tr></table></figure><blockquote><p><strong>对象序列化</strong>:</p><ul><li>js中的对象使用时都是存储在计算机的内存中</li><li>序列化指将对象转换为一个可以存储的格式<ul><li>在js中的序列化通常是将一个对象转换为字符串(<strong>json字符串</strong>)</li></ul></li></ul><p><strong>用途</strong>:</p><ul><li>对象转换为字符串后,可以将字符串在不同的语言之间进行传递</li><li>作为数据的交换格式</li><li>用来编写配置文件</li></ul><p><strong>如何进行序列化</strong>:</p><ul><li><strong>工具类:JSON</strong>(JavaScript Object Notation)–js对象表示法<ul><li>js对象有序化后转换成的字符串,称为Json字符串</li></ul></li><li><code>JSON.stringify(对象)</code>:将一个对象转换为json字符串</li><li><code>JSON.parse(json字符串)</code>:将一个json字符串转换为对象</li></ul><p><strong>JOSN字符串</strong>:</p><p>注意事项:</p><ul><li>json字符串有两种类型:<ul><li>json对象:<code>&#123;&#125;</code></li><li>json数组:<code>[]</code></li></ul></li><li>json字符串的属性名必须使用双引号<code>&quot;&quot;</code></li><li>json中可以使用的属性值:<ul><li>数字:(Number)</li><li>字符串:(String) 必须使用双引号</li><li>布尔值:(Boolean)</li><li>空值:(Null)</li><li>对象:(Object {})</li><li>数组:(Array [])</li></ul></li><li>json的格式与js对象的格式基本一致<ul><li>json字符串的属性如果是最后一个则不能在添加逗号<code>,</code></li></ul></li></ul></blockquote><h3 id="使用JSON进行深拷贝"><a href="#使用JSON进行深拷贝" class="headerlink" title="使用JSON进行深拷贝"></a>使用JSON进行深拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用assign浅拷贝对象</span></span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line"><span class="comment">//使用structuredClone深拷贝对象</span></span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="title function_">structuredClone</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3);</span><br><span class="line"><span class="comment">//使用json深拷贝对象</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4);</span><br><span class="line"><span class="comment">//合并写法</span></span><br><span class="line"><span class="keyword">const</span> obj5 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj5);</span><br></pre></td></tr></table></figure><blockquote><p>通过将js对象转换为json字符串,再把json字符串转换为js对象,这一过程完成对js对象的深拷贝</p></blockquote><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>()]: <span class="string">&quot;哈哈&quot;</span>,</span><br><span class="line">  [obj2]: <span class="string">&quot;看看&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"><span class="comment">//创建一个map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>;</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(obj2, <span class="string">&quot;jj&quot;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="title class_">NaN</span>, <span class="string">&quot;ll&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(obj2));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">delete</span>(obj2), map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">clear</span>(), map);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Map</strong>:</p><ul><li>Map用来存储键值对结构的数据(key-value)</li><li>Map与Object的区别:<ul><li>Object中的属性名只能是<strong>字符串或符号</strong>,如果传递了一个其他类型的属性名,js会自动转化为字符串</li><li>Map中的key值可以是任何类型的值</li></ul></li></ul><p><strong>创建Map</strong>:</p><ul><li><code>new Map()</code></li></ul><p><strong>Map的属性和方法</strong>:</p><ul><li><code>map.size</code>:获取map中键值对的数量</li><li><code>map.set()</code>:向map中添加键值对</li><li><code>map.get()</code>:根据key获取value</li><li><code>map.has()</code>:检查map中是否包含指定的kay</li><li><code>map.delete()</code>:删除指定的键值对</li><li><code>map.clear()</code>:删除全部的键值对</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">map.<span class="title function_">set</span>(&#123;&#125;, <span class="string">&#x27;哈哈&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map);</span><br><span class="line"><span class="comment">//map转换为数组(二维数组)</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="keyword">const</span> arr2 = [...map];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"><span class="comment">//(二维数组)数组创建map</span></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>], [&#123;&#125;, <span class="string">&#x27;哈哈&#x27;</span>]])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map2);</span><br><span class="line"><span class="comment">//遍历Map</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([key, value]);</span><br><span class="line">&#125;</span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key, value, c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value, c);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取map的所有key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">keys</span>());</span><br><span class="line"><span class="comment">//获取map的所有value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">values</span>());</span><br><span class="line"><span class="comment">//遍历map的所有key</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> k <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历map的所有value</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Map的方法</strong>:</p><ul><li><code>map.kays()</code>:获取map的所有key</li><li><code>map.values()</code>:获取map的所有value</li><li><code>map.entries()</code>:获取map的所有键值</li></ul></blockquote><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Set</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">//向Set中添加数据</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">10</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br><span class="line"><span class="comment">//遍历Set</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Set转换为数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...set]);</span><br><span class="line"><span class="comment">//使用set创建一个不重复的数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> set2 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...set2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set2.<span class="title function_">entries</span>())</span><br></pre></td></tr></table></figure><blockquote><p><strong>Set</strong>:</p><ul><li>Set用来创建一个集合</li><li>它的功能与数组类似,但是不能存储重复的值(Set里的key&#x3D;&#x3D;value)</li></ul><p>Set的方法与Map的方法一样</p></blockquote><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印圆周率</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line"><span class="comment">//求绝对值</span></span><br><span class="line"><span class="keyword">let</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">10</span>);</span><br><span class="line"><span class="comment">//求最小值</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">10</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//求最大值</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">10</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//求次幂</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">10</span>); <span class="comment">// ==&gt; 2 ** 10</span></span><br><span class="line"><span class="comment">//求平方根</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">10</span>); <span class="comment">// ==&gt; 10 ** .5</span></span><br><span class="line"><span class="comment">//取整放法</span></span><br><span class="line"><span class="comment">//向下取整</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">10.9999</span>);</span><br><span class="line"><span class="comment">//向上取整</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">10.1</span>);</span><br><span class="line"><span class="comment">//四舍五入取整</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">10.5</span>);</span><br><span class="line"><span class="comment">//取整舍去小数位</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">10.356165</span>);</span><br><span class="line"><span class="comment">//生成0-1的随机数(伪随机--可控随机)</span></span><br><span class="line">result = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">//生成1-61的随机数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> f = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">60</span> + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> f2 = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">61</span> + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="number">61</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(f, f2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数执行完毕&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Math</strong>:</p><ul><li>工具类(列如: Json),工具类不能<code>new Math()</code>来创建对象</li><li>Math为我们提供了数学运算相关的一些<strong>常量</strong>和<strong>方法</strong></li></ul><p><strong>常量</strong>:</p><p><code>Math.PI</code>:圆周率</p><p><strong>方法</strong>:</p><ul><li><code>Math.abs(-)</code>:求一个数的绝对值</li><li><code>Math.max()</code>:求一些数的最大值</li><li><code>Math.min()</code>:求一些数的最小值</li><li><code>Math.pow()</code>:求一个数的次方</li><li><code>Math.sqrt()</code>:求一个数的平方根</li><li><code>Math.floor()</code>:向下取整</li><li><code>Math.ceil()</code>:向上取整</li><li><code>Math.round()</code>:四舍五入取整</li><li><code>Math.trunc()</code>:取整–舍去小数位</li></ul></blockquote><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Date对象</span></span><br><span class="line"><span class="comment">//获取当前日期</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//获取指定日期</span></span><br><span class="line"><span class="comment">//在Date()构造函数中传递一个表示时间的字符串,格式: &quot;月/日/年 时:分:秒&quot;</span></span><br><span class="line">date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2/3/2001 14:20:35&quot;</span>);</span><br><span class="line"><span class="comment">//传递参数(年,月,日,时,分,秒)</span></span><br><span class="line">date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2016</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//获取4位数的年份</span></span><br><span class="line"><span class="keyword">let</span> result = d.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="comment">//返回当前日期的月份(0-11)</span></span><br><span class="line">result = d.<span class="title function_">getMonth</span>();</span><br><span class="line"><span class="comment">//返回当前日期是几号</span></span><br><span class="line">result = d.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="comment">//返回当前日期是周几(0-6, 0表示周日)</span></span><br><span class="line">result = d.<span class="title function_">getDay</span>();</span><br><span class="line"><span class="comment">//返回当前日期的时间戳</span></span><br><span class="line">result = d.<span class="title function_">getTime</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">//获取当前时间戳</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure><blockquote><p><strong>Date</strong>:</p><ul><li>在js中所有的和时间有关的数据都由Date对象来表示</li></ul><p><strong>Date对象的方法</strong>:</p><ul><li><code>getFullYear()</code>:获取完整的年份(4位年份)</li><li><code>getMonth()</code>:返回当前日期的月份(0-11,0为12月)</li><li><code>getDate()</code>:返回当前是几号</li><li><code>getDay()</code>:返回当前日期是周几(0-6,0为周日)</li><li><code>getTime()</code>：返回当前日期对象的时间戳</li><li><code>Date.now()</code>:获取当前时间戳</li></ul><p><strong>时间戳</strong>:</p><ul><li>自<strong>1970年1月1日0时0分0秒</strong>(计算机时间元年)到当前事件所经历的毫秒数</li><li>计算机底层存储时间时,都是使用的时间戳(<strong>以格林威治时间为标准时间</strong>)</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//将日期转换为本地的字符串</span></span><br><span class="line"><span class="keyword">let</span> result = d.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line"><span class="comment">//将时间转换为本地的字符串</span></span><br><span class="line">result = d.<span class="title function_">toLocaleTimeString</span>();</span><br><span class="line"><span class="comment">//将时间日期转换为本地的字符串</span></span><br><span class="line">result = d.<span class="title function_">toLocaleString</span>(<span class="string">&quot;zh-CN&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// dateStyle: &quot;full&quot;,</span></span><br><span class="line">  <span class="comment">// timeStyle: &quot;medium&quot;,</span></span><br><span class="line">  <span class="comment">// hour12: true,</span></span><br><span class="line">  <span class="comment">// weekday: &quot;long&quot;,</span></span><br><span class="line">  <span class="attr">year</span>: <span class="string">&quot;numeric&quot;</span>,</span><br><span class="line">  <span class="attr">month</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">  <span class="attr">day</span>: <span class="string">&quot;2-digit&quot;</span>,</span><br><span class="line">  <span class="attr">weekday</span>: <span class="string">&quot;short&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><blockquote><p><strong>toLocaleString()</strong>:</p><p><strong>参数</strong>:</p><ul><li><code>dateStyle</code>:日期的风格</li><li><code>timeStyle</code>:时间的风格<ul><li>full</li><li>long</li><li>medium</li><li>short</li></ul></li><li><code>hour12</code>:是否采用12小时制<ul><li>true</li><li>false</li></ul></li><li><code>weekday</code>:星期的显示方式<ul><li>long</li><li>short</li><li>narrow</li></ul></li><li><code>year</code>:年份的显示方式<ul><li>numeric</li><li>2-digit</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11js内置对象2</title>
      <link href="/posts/7e4551ad.html"/>
      <url>/posts/7e4551ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="js内置对象2"><a href="#js内置对象2" class="headerlink" title="js内置对象2"></a>js内置对象2</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">let</span> bool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str, str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num, num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> bool, bool);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool2 = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> bool2, bool2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bool === bool2); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//包装类的作用</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//向原始值添加属性, 创建临时对象( new String() )</span></span><br><span class="line">str.<span class="property">name</span> = <span class="string">&#x27;哈哈&#x27;</span>;</span><br><span class="line"><span class="comment">//读取原始的属性, 再次创建临时对象(两次创建的对象在创建后就销毁了, 因此并不是用一个对象, 所以无法读取name属性返回undefined)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="property">name</span>);</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">11</span>;</span><br><span class="line"><span class="comment">//调用原始的方法, 创建临时对象( new Number() )</span></span><br><span class="line">num2 = num2.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num2, num2);</span><br></pre></td></tr></table></figure><blockquote><p>在js中,除了直接创建原始值外,也可以创建原始值的对象(但一定不要用这种方式创建)</p><ul><li><p>通过<code>new String()</code>,可以创建String类型的对象</p></li><li><p>通过<code>new Number()</code>,可以创建Number类型的对象</p></li><li><p>通过<code>new Boolean()</code>,可以创建Boolean类型的对象</p></li></ul><p><strong>js中的包装类(五个)</strong>:</p><p>旧包装类(还可以通过new创建实例)</p><ul><li>String  –&gt; 字符串包装为String对象</li><li>Number  –&gt; 数值包装为Number对象</li><li>Boolean  –&gt; 布尔值包装为Boolean对象</li></ul><p>新包装类(js后期新增, 不能通过new创建实例)</p><ul><li>BigInt  –&gt; 大整数包装为BigInt对象</li><li>Symbol  –&gt; 符号包装为Symbol对象</li></ul><p><strong>通过包装类可以将原始值包装成一个对象</strong>:</p><ul><li>当我们<strong>对一个原始值调用方法或属性时</strong>, js解释器会<strong>临时</strong>(创建后即销毁)将原始值<strong>包装为对应的对象</strong>,然后<strong>调用这个对象的方法或者属性</strong>,且<strong>每次调用都会创建临时的对象</strong></li><li>null与undefined无法调用toString,因为他们没有包装类</li></ul><p><strong>由于原始值会被临时转换成对应的对象,这就意味着对象中的方法都可以直接通过原始值进行调用</strong></p></blockquote><h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello HELLO&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;123@345@567@789&#x27;</span></span><br><span class="line"><span class="comment">//获取字符串的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br><span class="line"><span class="comment">//根据索引获取字符</span></span><br><span class="line"><span class="keyword">let</span> re = str[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">of</span> str) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">re = str.<span class="title function_">at</span>(-<span class="number">2</span>); <span class="comment">//可以传递负值</span></span><br><span class="line">re = str.<span class="title function_">charAt</span>(<span class="number">1</span>); <span class="comment">//不可以传递负值</span></span><br><span class="line"><span class="comment">//用来连接两个或多个字符串</span></span><br><span class="line">re = str.<span class="title function_">concat</span>(str, str2)</span><br><span class="line"><span class="comment">//检查字符串中是否包含某个字符, 返回布尔值, 第二个参数表示从第几个索引位置检查</span></span><br><span class="line">re = str.<span class="title function_">includes</span>(<span class="string">&#x27;e&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//返回所查字符所在的第一个索引位置, 返回Number</span></span><br><span class="line">re = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;hell&#x27;</span>); <span class="comment">//从前往后查询</span></span><br><span class="line">re = str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;hell&#x27;</span>); <span class="comment">//从后往前查询</span></span><br><span class="line"><span class="comment">//检查一个字符是否以指定内容结尾</span></span><br><span class="line">re = str.<span class="title function_">startsWith</span>(<span class="string">&#x27;hell&#x27;</span>); <span class="comment">//从前往后</span></span><br><span class="line">re = str.<span class="title function_">endsWith</span>(<span class="string">&#x27;ello&#x27;</span>); <span class="comment">// 从后往前</span></span><br><span class="line"><span class="comment">//指定字符串长度, 然后补齐</span></span><br><span class="line"><span class="comment">//指定字符串长度, 然后补齐</span></span><br><span class="line">re = str.<span class="title function_">padEnd</span>(<span class="number">15</span>, <span class="string">&#x27;@@@&#x27;</span>); <span class="comment">//补在后面</span></span><br><span class="line">re = str.<span class="title function_">padStart</span>(<span class="number">15</span>, <span class="string">&#x27;@@@&#x27;</span>) <span class="comment">//补在前面</span></span><br><span class="line"><span class="comment">//使字符串重复, 参数: 重复次数</span></span><br><span class="line">re = str.<span class="title function_">repeat</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//指定字符, 替换字符串中的内容</span></span><br><span class="line">re = str.<span class="title function_">replace</span>(<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;kk&#x27;</span>); <span class="comment">//替换第一个</span></span><br><span class="line">re = str.<span class="title function_">replaceAll</span>(<span class="string">&#x27;ll&#x27;</span>, <span class="string">&#x27;kk&#x27;</span>); <span class="comment">//替换全部</span></span><br><span class="line"><span class="comment">//截取字符串</span></span><br><span class="line">re = str.<span class="title function_">slice</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">re = str.<span class="title function_">substring</span>(<span class="number">10</span>, <span class="number">5</span>);<span class="comment">//参数位置不受限制</span></span><br><span class="line">re = str.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>);<span class="comment">//从索引0开始截取2个</span></span><br><span class="line"><span class="comment">//拆分字符串为数组</span></span><br><span class="line">re = str2.<span class="title function_">split</span>(<span class="string">&#x27;@&#x27;</span>); <span class="comment">//指定要拆掉那个字符</span></span><br><span class="line"><span class="comment">//字符串转换大小写</span></span><br><span class="line">re = str.<span class="title function_">toLowerCase</span>(); <span class="comment">//转换为小写</span></span><br><span class="line">re = str.<span class="title function_">toUpperCase</span>(); <span class="comment">//转换为大写</span></span><br><span class="line"><span class="comment">//去除字符串空格</span></span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">&#x27;  张 三  &#x27;</span></span><br><span class="line">re = str3.<span class="title function_">trim</span>(); <span class="comment">//去除两边空格</span></span><br><span class="line">re = str3.<span class="title function_">trimStart</span>(); <span class="comment">//去除开始空格</span></span><br><span class="line">re = str3.<span class="title function_">trimEnd</span>(); <span class="comment">//去除结尾空格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> re, re);</span><br></pre></td></tr></table></figure><blockquote><p><strong>字符串</strong>:</p><ul><li>字符串其本质就是<strong>一个字符数组</strong>,因此许多方法与数组类似</li></ul></blockquote><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数创建正则表达式对象</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;a&quot;</span>; <span class="comment">//true</span></span><br><span class="line">str = <span class="string">&quot;b&quot;</span>; <span class="comment">//false</span></span><br><span class="line">str = <span class="string">&quot;abc&quot;</span>; <span class="comment">//true</span></span><br><span class="line">str = <span class="string">&quot;bbabc&quot;</span>; <span class="comment">//true</span></span><br><span class="line"><span class="comment">//使用reg的test属性进行测试,检查字符串是否符合规则,返回一个布尔值</span></span><br><span class="line"><span class="keyword">let</span> result = reg.<span class="title function_">test</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><blockquote><p><strong>正则表达式</strong>:</p><ul><li>定义一个字符串的规则,把符合规则的字符串提取出来</li><li>正则表达式也是js中的一个对象</li></ul><p><strong>创建方式</strong>:</p><ul><li>构造函数:<code>new RegExp()</code>,参数1传递正则表达式,参数2传递正则的匹配模式</li><li>字面量:<code>str = //</code></li></ul></blockquote><h3 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用字面量创建正则表达式</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/b/</span>; <span class="comment">//检查是否包含a</span></span><br><span class="line">re = <span class="regexp">/a|b/</span>; <span class="comment">//检查是否包含a或b</span></span><br><span class="line">re = <span class="regexp">/abc|cde/</span>; <span class="comment">//检查是否包含abc或者cde</span></span><br><span class="line">re = <span class="regexp">/[a-z]/</span>; <span class="comment">//检查是否包含所有小写字母</span></span><br><span class="line">re = <span class="regexp">/[A-Z]/</span>; <span class="comment">//检查是否包含所有大写字母</span></span><br><span class="line">re = <span class="regexp">/[A-z]/</span>; <span class="comment">//检查是否包含所有字母</span></span><br><span class="line">re = <span class="regexp">/[0-9]/</span>; <span class="comment">//检查是否包含所有的数字</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;4554774&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="title function_">test</span>(str));</span><br></pre></td></tr></table></figure><blockquote><p><strong>正则的方法</strong>:</p><ul><li><code>|</code>在正则中表示或(整体或, 即符号左右两边的整体)</li><li><code>[]</code>字符集或,在[]中的内容都是或的关系</li><li><code>[^x]</code>除了x</li><li><code>.</code>表示除了换行外的所有字符</li><li><code>&#123;m&#125;</code>正好m个</li><li><code>&#123;m，&#125;</code>至少m个</li><li><code>&#123;m, n&#125;</code>m到n个</li><li><code>+</code>至少一个</li><li><code>*</code>任意数量个</li><li><code>?</code>0-1个</li><li><code>^</code>表示开头</li><li><code>$</code>表示结尾</li><li><code>()</code>分组</li></ul><p><strong>正则的属性方法</strong>:</p><ul><li><code>.test()</code>:测试字符串,返回一个布尔值</li><li><code>.exec()</code>:提取符合规则的字符串,返回一个数组</li></ul><p><strong>其他字符集</strong>:</p><ul><li><code>\w</code>任意的单词字符</li><li><code>\W</code>不包含任意的单词字符</li><li><code>\d</code>任意数字</li><li><code>\D</code>除了任意数字</li><li><code>\s</code>空格</li><li><code>\S</code>除了空格</li><li><code>\b</code>单词边界</li><li><code>\B</code>除了单词边界</li></ul><p><strong>匹配模式</strong>:</p><ul><li><code>i</code>忽略大小写</li><li><code>g</code>全局匹配</li></ul></blockquote><h3 id="正则练习"><a href="#正则练习" class="headerlink" title="正则练习"></a>正则练习</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提取字符串中的手机号</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdfrf15716374484dvbrfhe13744861694asvbvuerivb15416585487&quot;</span>;</span><br><span class="line"><span class="comment">//定义正则</span></span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/^1[3-9]\d&#123;9&#125;$/g</span>;</span><br><span class="line"><span class="comment">//隐藏手机号中间的4位数字</span></span><br><span class="line">re = <span class="regexp">/^(1[3-9]\d)\d&#123;4&#125;(\d&#123;4&#125;)$/g</span>;</span><br><span class="line"><span class="comment">//利用while循环提取手机号</span></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">while</span>(result = re.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>] + <span class="string">&quot;****&quot;</span> + result[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串中的正则方法"><a href="#字符串中的正则方法" class="headerlink" title="字符串中的正则方法"></a>字符串中的正则方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串中的方法结合正则表达式</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;王五abc张三adc李四&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="regexp">/a[bd]c/</span>));</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;abcdfrf15716374484dvbrfhe13744861694asvbvuerivb15416585487&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = str2.<span class="title function_">search</span>(<span class="regexp">/1[3-9]\d&#123;9&#125;/</span>);</span><br><span class="line">result = str2.<span class="title function_">replace</span>(<span class="regexp">/1[3-9]\d&#123;9&#125;/g</span>, <span class="string">&quot;😍&quot;</span>);</span><br><span class="line">result = str2.<span class="title function_">match</span>(<span class="regexp">/1[3-9]\d&#123;9&#125;/g</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">result = str2.<span class="title function_">matchAll</span>(<span class="regexp">/1[3-9](\d&#123;9&#125;)/g</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> result) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>split()</code>根据正则表达式第一个数组进行拆分</li><li><code>search()</code>搜索符合规则的正则表达式的内容第一次出现的内容的位置,并返回索引值</li><li><code>replace()</code>根据正则表达式替换字符串中的指定内容</li><li><code>match()</code>根据正则表达式去匹配字符串中符合规则的内容,<strong>不全局匹配可以使用正则分组</strong></li><li><code>matchAll()</code>根据正则表达式去匹配字符串中符合规则的内容,必须全局匹配,**可以使用正则分组,**且返回一个迭代器(迭代器一般使用<code>for..of</code>进行遍历)</li></ul></blockquote><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//obj指向对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//断开指向,释放指针,垃圾回收</span></span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>垃圾回收(Garbage Collection)</strong>:</p><ul><li>如果一个对象没有任何变量对其引用,那么这个对象就是垃圾</li><li>js中有自动的垃圾回收机制, 我们只需把不在使用的变量设置为null,使其自动回收</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12DOM</title>
      <link href="/posts/85e1dfa.html"/>
      <url>/posts/85e1dfa.html</url>
      
        <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用DOM控制页面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">innerHTML</span> = <span class="string">&quot;Hello World&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>DOM(Document Object Model)</strong>:</p><ul><li>DOM是<code>Web Api</code> 中的一部分即<strong>文档对象模型</strong></li><li>DOM把网页中所有的内容转化为对象,然后在对其进行操作来控制页</li></ul></blockquote><h2 id="获取文档节点-document"><a href="#获取文档节点-document" class="headerlink" title="获取文档节点(document)"></a>获取文档节点(document)</h2><blockquote><p><strong>文档节点(document)对象</strong>:</p><ul><li>document代表整个网页</li></ul><p><strong>document对象的原型链</strong>:</p><ul><li><code>HTMLDocument --&gt; Document --&gt; Node --&gt;  EventTarget --&gt;  Object.prototype --&gt; null</code></li><li>凡是在原型链上存在的对象的属性和方法都可以通过Document去调用</li></ul><p><strong>Document的部分属性</strong>:</p><p>实例属性:</p><ul><li><code>document.documentElement</code> –&gt; 获取html根元素</li><li><code>document.head</code> –&gt;  获取head元素</li><li><code>document.title</code> –&gt; 获取title元素</li><li><code>document.body</code> –&gt; 获取body元素</li><li><code>document.links</code> – &gt;获取页面中所有的超链接</li></ul></blockquote><h2 id="获取元素节点-element"><a href="#获取元素节点-element" class="headerlink" title="获取元素节点(element)"></a>获取元素节点(element)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d&quot;</span>&gt;</span>dddd<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>ssss<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//根据获取id元素节点对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//根据获取class元素节点对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> s1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;s1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//根据获取标签名元素节点对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//根据选择器来获取元素节点对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> s2 = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div #btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建一个元素节点对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> c = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>元素节点(element)对象</strong>:</p><ul><li>在网页中每一个标签都是一个元素节点</li><li>我们可以通过<code>document</code>来<strong>获取已有的节点</strong>和<strong>创建没有的节点</strong></li></ul><p><strong>通过<code>doucment</code>来获取已有的元素节点</strong>:</p><ul><li><code>document.getElementById()</code>:根据id获取一个元素节点对象</li><li><code>document.getElementsByClassName()</code>:<strong>根据元素的Class属性</strong>来获取一组元素节点对象,返回一个类数组对象,且可以实时刷新</li><li><code>document.getElementsByTagName()</code>:<strong>根据标签名</strong>来获取一组元素节点对象,返回一个类数组对象,且能实时刷新</li><li><code>document.getElementsByName()</code>:<strong>根据name属性</strong>来获取一组元素节点对象,返回一个类数组对象,且能实时刷新,一般用于获取表单的元素节点对象</li><li><code>document.querySelectorAll()</code>:<strong>根据选择器</strong>来获取一组元素节点对象,返回一个类数组,但不能实时刷新</li><li><code>document.querySelector()</code>:<strong>根据选择器</strong>获取一个元素的节点对象,但会第一个符合条件的元素节点对象不能实时刷新</li></ul><p>**通过<code>document</code>**来创建一个新的元素节点对象:</p><ul><li><code>document.createElement()</code>:创建一个新的元素节点对象(但不会直接插入到网页中)</li></ul><p></p></blockquote><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  我是div</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是div内的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是div内的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>div里的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取class属性为s1的元素节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> s = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;s1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取id属性为div的元素节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//通过div这个元素节点对象来获取其他的节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取box下的class属性为s1的元素节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> boxs = box.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;s1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取box下的所有子节点(包括文本节点:文字, 注释, 换行)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> s1 = box.<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取box下的所有元素节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> s2 = box.<span class="property">children</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>div的原型链</strong>:</p><ul><li><code>HTMLDivElement --&gt; HTMLElement --&gt; Element --&gt; Node --&gt; EventTarget --&gt;  Object.prototype --&gt; null </code></li></ul><p><strong>通过元素节点对象来获取其他节点</strong>:</p><ul><li><code>element.childNodes</code>获取当期元素下的所有子节点(<strong>包括文本节点:文字,注释,换行</strong>)</li><li><code>element.children</code>获取当前元素下的所有元素节点</li><li><code>element.firstElementChild</code>获取当前元素下的第一个子节点</li><li><code>element.lastElementChild</code>获取当前元素下的最后一个子节点</li><li><code>element.nextElementSibling</code>获取当前元素的下一个兄弟元素</li><li><code>element.previousElementSibling</code>获取当前元素的前一个兄弟元素</li><li><code>element.parentNode</code>获取当前元素的父节点</li><li><code>element.tagName</code>获取当前元素的标签名</li></ul></blockquote><h2 id="获取文本节点-text"><a href="#获取文本节点-text" class="headerlink" title="获取文本节点(text)"></a>获取文本节点(text)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  我是div</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>我是div内的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是div内的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>div外的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">textContent</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">innerText</span> = <span class="string">&#x27;&lt;li&gt;我是li标签&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">textContent</span> = <span class="string">&#x27;&lt;li&gt;我是li标签&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;li&gt;我是li标签&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在DOM中所有文本内容都是文本节点对象,可以通过元素来获取其中的文本节点对象,但是我们通常不这么做,一般会直接通过元素去修改其中的文本</p><p><strong>通过元素节点对象直接修改文本的三个属性</strong>:</p><ul><li><code>element.textContent</code>获取或修改元素中的文本内容,<strong>只获取标签里的内容,且不会考虑css样式</strong></li><li><code>element.innerText</code>获取或修改元素中的文本内容,获取内容时<strong>会考虑css样式(读取,计算css样式,触发网页重排)</strong>,字符串中<strong>有标签时,会自动对标签进行转义</strong>(<code>&lt;li&gt;--&gt; &amp;lt;li&amp;gt;</code>)</li><li><code>element.innerHTML</code>获取或修改元素中的html代码,<strong>可以直接向元素中添加html代码</strong>,通过<strong>innerHTML向网页插入元素时,有被xss注入的风险</strong></li></ul></blockquote><h2 id="获取属性节点-Attr"><a href="#获取属性节点-Attr" class="headerlink" title="获取属性节点(Attr)"></a>获取属性节点(Attr)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;in&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  我是div</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;box-a&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>我是div里的a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取元素节点对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> n = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;username&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> n1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> n2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n1);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n2);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//通过元素节点对象来对属性节点进行操作</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方式一</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 读取</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">value</span>, n.<span class="property">type</span>, n.<span class="property">name</span>, n.<span class="property">className</span>, n.<span class="property">disabled</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span>, n.<span class="property">className</span> = <span class="string">&#x27;xg&#x27;</span>, n.<span class="property">disabled</span> = <span class="literal">false</span>, n.<span class="property">type</span> = <span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">n1.<span class="property">style</span> = <span class="string">&#x27;color: red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">n2.<span class="property">href</span> = <span class="string">&#x27;https://baidu.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方式二</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 读取</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">getAttribute</span>(<span class="string">&#x27;type&#x27;</span>), n.<span class="title function_">getAttribute</span>(<span class="string">&#x27;value&#x27;</span>), n.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>), n.<span class="title function_">getAttribute</span>(<span class="string">&#x27;class&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 修改</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;text&#x27;</span>), n.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;瑞克&#x27;</span>), n.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;modi&#x27;</span>), n.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;ll&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">n1.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;background: yellowgreen&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">n2.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;text-decoration: none&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//  删除</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>属性节点(Attr)</strong>:</p><ul><li>在DOM中也是一个对象,通常不需要获取对象而是<strong>直接通过元素直接对其进行各种操作</strong></li></ul><p><strong>操作属性节点</strong>:</p><p><strong>方式一</strong>:</p><ul><li>读取: <strong>元素.属性名(注意class属性需要使用className来读取),读取一个布尔值时返回true或false</strong></li><li>修改:<strong>元素.属性名 &#x3D; 属性值</strong></li></ul><p><strong>方式二</strong>:</p><ul><li>读取:<strong><code>元素.getAttribute(属性名)</code></strong></li><li>修改:<strong><code>元素.setAttribute(属性名, 属性值)</code></strong></li><li>删除:<strong><code>元素.removeAttribute(属性名)</code></strong></li></ul></blockquote><h2 id="事件-event"><a href="#事件-event" class="headerlink" title="事件(event)"></a>事件(event)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方式1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello&#x27;)&quot;</span> &gt;</span>点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//方式2:为元素指定的属性绑定事件的回调函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取元素节点对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(btn);</span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">style</span> = <span class="string">&#x27;background: #bfa&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方式3: 通过元素的addEventListener()方法来绑定事件</span></span></span><br><span class="line"><span class="language-javascript">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// document.write(&#x27;sh&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div&gt;增加&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>事件(event)</strong>:</p><ul><li>事件就是用户和页面之间的交互行为(例如:点击按钮,鼠标移动,敲击键盘等)</li><li>可以通过为事件绑定响应函数(回调函数),来完成和用户之间的交互</li></ul><p><strong>绑定响应函数的方式</strong>:</p><ul><li>可以直接在元素的属性中设置</li><li>可以通过为元素的指定的属性设置回调函数的形式来绑定事件(一个事件只能绑定一个响应函数)</li><li>可以通过元素的<code>addEventListener()</code>方法来绑定事件</li></ul></blockquote><h2 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">77</span>, <span class="number">119</span>, <span class="number">68</span>, <span class="number">0.47</span>);</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* text-align: center;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      margin-top: 300px */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.js代码编写在DOMContentLoaded回调函数中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4.js代码编写在window.onload回调函数中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--2. 以defer的形式引入外部js文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;./01helloModule.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1. js代码编写在body的底部(最快最有效) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(btn);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./01helloModule.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>文档的加载</strong>:</p><ul><li>网页的加载时自上向下进行的,如果把js代码编写在网页的上边,会导致js代码在执行时,网页还没加载完毕,会出现无法获取DOM对象的情况</li></ul><p><strong>js代码编写位置</strong>:</p><ul><li><strong>将js标签编写在body的底部(最快最有效)</strong></li><li><strong>引入外部js时,以defer的形式进行引入(第二快)</strong></li><li>将js代码编写到document对象的DOMContentLoaded的回调函数中(第三快)</li><li><strong>将js代码编写到window.onload的回调函数中(第四快)</strong></li></ul></blockquote><h2 id="DOM操作练习"><a href="#DOM操作练习" class="headerlink" title="DOM操作练习"></a>DOM操作练习</h2><h3 id="1-点击切换图片"><a href="#1-点击切换图片" class="headerlink" title="1.点击切换图片"></a>1.点击切换图片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span>当前是第1张,一共7张图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img-warpper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;width: 720px; height: 400px;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-warpper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>上一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮切换图片</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取info</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> info = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#info&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取图片</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> prev = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#prev&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> next = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#next&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方式1 (丧失灵活性)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上一张</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// info.textContent = `当前是第$&#123;i&#125;张,一共7张图片`;</span></span></span><br><span class="line"><span class="language-javascript">    prev.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      i--;</span></span><br><span class="line"><span class="language-javascript">      imgs.<span class="property">src</span> = <span class="string">`./img/0<span class="subst">$&#123;i&#125;</span>.jpeg`</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(i &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        i = <span class="number">7</span>;</span></span><br><span class="line"><span class="language-javascript">        imgs.<span class="property">src</span> = <span class="string">`./img/0<span class="subst">$&#123;i&#125;</span>.jpeg`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      info.<span class="property">textContent</span> = <span class="string">`当前是第<span class="subst">$&#123;i&#125;</span>张,一共7张图片`</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 下一张</span></span></span><br><span class="line"><span class="language-javascript">    next.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(i&lt;<span class="number">7</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        imgs.<span class="property">src</span> = <span class="string">`./img/0<span class="subst">$&#123;++i&#125;</span>.jpeg`</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">7</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        i = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        imgs.<span class="property">src</span> = <span class="string">`./img/0<span class="subst">$&#123;i&#125;</span>.jpeg`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      info.<span class="property">textContent</span> = <span class="string">`当前是第<span class="subst">$&#123;i&#125;</span>张,一共7张图片`</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    方式<span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./img/01.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./img/02.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./img/03.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./img/04.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./img/05.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./img/06.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;./img/07.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    ];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上一张</span></span></span><br><span class="line"><span class="language-javascript">    prev.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      a--;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(a &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        a = arr.<span class="property">length</span> - <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      info.<span class="property">textContent</span> = <span class="string">`当前是第<span class="subst">$&#123;a + <span class="number">1</span>&#125;</span>张,一共<span class="subst">$&#123;arr.length&#125;</span>张图片`</span>;</span></span><br><span class="line"><span class="language-javascript">      imgs.<span class="property">src</span> = arr[a];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 下一张</span></span></span><br><span class="line"><span class="language-javascript">    next.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      a++;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(a &gt; arr.<span class="property">length</span> -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        a = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      info.<span class="property">textContent</span> = <span class="string">`当前是第<span class="subst">$&#123;a + <span class="number">1</span>&#125;</span>张,一共<span class="subst">$&#123;arr.length&#125;</span>张图片`</span>;</span></span><br><span class="line"><span class="language-javascript">      imgs.<span class="property">src</span> = arr[a];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote></blockquote><h3 id="2-点击按钮选择喜好"><a href="#2-点击按钮选择喜好" class="headerlink" title="2.点击按钮选择喜好"></a>2.点击按钮选择喜好</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        请选择你的爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;check-all&quot;</span>&gt;</span>全选</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;动漫&quot;</span>&gt;</span>动漫</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电影&quot;</span>&gt;</span>电影</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span>游戏</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;学习&quot;</span>&gt;</span>学习</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;all&quot;</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;no&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reverse&quot;</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;send&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 按钮全选功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取全选按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;all&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取四个多选框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;hobby&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 为全选按钮绑定单击事件</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//遍历多选框</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        hobbys[i].<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      checkAll.<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 取消全选按钮功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取取消按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> no = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;no&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    no.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        hobbys[i].<span class="property">checked</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      checkAll.<span class="property">checked</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//反选按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取反选按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> reverse = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;reverse&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    reverse.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        hobbys[i].<span class="property">checked</span> = !hobbys[i].<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> checkBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[name = hobby]:checked&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      checkBox.<span class="property">length</span> === hobbys.<span class="property">length</span> ? checkAll.<span class="property">checked</span> = <span class="literal">true</span> : checkAll.<span class="property">checked</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//提交按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取提交按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> send = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;send&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    send.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// hobbys[i].checked &amp;&amp; alert(hobbys[i].value);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (hobbys[i].<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(hobbys[i].<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 大全选按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取大全选按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> checkAll = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;check-all&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    checkAll.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// if(checkAll.checked) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   hobbys[i].checked = true;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;else &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//   hobbys[i].checked = false;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// checkAll.checked ? hobbys[i].checked = true : hobbys[i].checked = false;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// hobbys[i].checked = checkAll.checked;</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//在事件的响应函数中,this指向响应函数绑定的对象(箭头函数除外)</span></span></span><br><span class="line"><span class="language-javascript">        hobbys[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        hobbys[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> checkBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[name = hobby]:checked&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// alert(checkBox.length);</span></span></span><br><span class="line"><span class="language-javascript">         checkBox.<span class="property">length</span> === hobbys.<span class="property">length</span>? checkAll.<span class="property">checked</span> = <span class="literal">true</span> : checkAll.<span class="property">checked</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>document.querySelectorAll(&#39;[name = hobby]:checked&#39;)</code>:</p><ul><li><code>:checked</code>伪类选择器,只返回checked为true时的元素</li></ul><p><strong>在事件的响应函数中,this指向响应函数绑定的对象(箭头函数除外)</strong></p></blockquote><h2 id="元素的修改"><a href="#元素的修改" class="headerlink" title="元素的修改"></a>元素的修改</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>替换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;zs&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;ls&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;rk&quot;</span>&gt;</span>瑞克<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> btn3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 添加</span></span></span><br><span class="line"><span class="language-javascript">btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 添加节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 添加文本</span></span></span><br><span class="line"><span class="language-javascript">  li.<span class="property">textContent</span> = <span class="string">&#x27;莫蒂&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 添加属性</span></span></span><br><span class="line"><span class="language-javascript">  li.<span class="property">id</span> = <span class="string">&#x27;md&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(li);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 添加到DOM</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 为一个节点添加子节点</span></span></span><br><span class="line"><span class="language-javascript">  list.<span class="title function_">appendChild</span>(li); <span class="comment">//只能在结尾添加节点</span></span></span><br><span class="line"><span class="language-javascript">  list.<span class="title function_">insertAdjacentElement</span>(<span class="string">&#x27;beforeend&#x27;</span>, li); <span class="comment">//可以在(子元素,或当前元素)开头,结尾添加节点</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">list.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;afterbegin&#x27;</span>, <span class="string">&#x27;&lt;li id=&quot;jk&quot;&gt;杰克&lt;/li&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//替换</span></span></span><br><span class="line"><span class="language-javascript">btn2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  li.<span class="property">textContent</span> = <span class="string">&#x27;汤姆&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  li.<span class="property">id</span> = <span class="string">&#x27;tm&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取zs</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> zs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;zs&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 替换zs</span></span></span><br><span class="line"><span class="language-javascript">  zs.<span class="title function_">replaceWith</span>(li);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 删除</span></span></span><br><span class="line"><span class="language-javascript">btn3.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取zs</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> zs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;zs&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//id选择器不用获取元素对象也能进行操作</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 删除zs</span></span></span><br><span class="line"><span class="language-javascript">  zs.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>添加</strong>:</p><ul><li><code>appendChild()</code>给一个节点添加子节点(只能在末尾添加子节点)</li><li><code>insertAdjacentElement()</code>可以在(子元素,或当前元素)开头,结尾添加节点<ul><li><code>beforeend</code>标签的最后</li><li><code>afterbegin</code>标签的开始</li><li><code>beforebegin</code>在<strong>当前元素的前边插入</strong>元素(<strong>兄弟元素</strong>)</li><li><code>afterbegin</code>在<strong>当前元素的后边插入</strong>元素**(兄弟元素**)</li></ul></li><li><code>insertAdjacentHTML(&#39;&lt;li id=&quot;id&quot;&gt;xx&lt;/li&gt;&#39;)</code></li></ul><p><strong>替换</strong>:</p><ul><li><code>replaceWith()</code>使用一个元素替换一个元素</li></ul><p><strong>删除</strong>:</p><ul><li><code>remove()</code>删除一个元素</li></ul></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮件<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>zs@qq.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>13000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>ls@qq.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>ww@qq.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>15000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 46px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;salary&quot;</span>&gt;</span>薪资<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//删除员工</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取删除超链接</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> links = <span class="variable language_">document</span>.<span class="property">links</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 绑定单击响应函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">delEmp</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this指向绑定的响应函数绑定的对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(this);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取tr</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tr = <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取tr下的第一个td</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> td = tr.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;td&#x27;</span>)[<span class="number">0</span>].<span class="property">textContent</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 弹出提示框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> flag = <span class="title function_">confirm</span>(<span class="string">`确认要删除[<span class="subst">$&#123;td&#125;</span>]吗?`</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 删除tr</span></span></span><br><span class="line"><span class="language-javascript">    flag? tr.<span class="title function_">remove</span>() : <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 取消a标签超链接的默认行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;links.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">  links[i].<span class="property">onclick</span> = delEmp;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//添加员工</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取按钮 </span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 获取tbody</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 绑定单击响应函数</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取文本框的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;name&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> email = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> number = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;number&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加到 DOM(容易被xss攻击)</span></span></span><br><span class="line"><span class="language-javascript">    tbody.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;tr&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;td&gt;<span class="subst">$&#123;name&#125;</span>&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;td&gt;<span class="subst">$&#123;email&#125;</span>&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;td&gt;<span class="subst">$&#123;number&#125;</span>&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;td&gt;&lt;a href=&quot;#&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/tr&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> last = tbody.<span class="property">lastElementChild</span>.<span class="property">lastElementChild</span>.<span class="property">lastElementChild</span>;</span></span><br><span class="line"><span class="language-javascript">    last.<span class="property">onclick</span> = delEmp;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(last)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// links[links.length - 1].onclick = delEmp;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>取消标签的默认行为</strong>:</p><ul><li>设置<code>javascript:;</code>表示引用一个空的js代码(<strong>只针对a标签的href属性</strong>)</li><li>在单击响应函数里添加<code>return false</code>表示不执行标签的默认行为只适用于<strong>xx.xx &#x3D; function(){}</strong>)</li></ul></blockquote><h2 id="节点的复制"><a href="#节点的复制" class="headerlink" title="节点的复制"></a>节点的复制</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;l1&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;l2&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;l3&quot;</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>杰克<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> list2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list2&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> l1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;l1&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// list2.appendChild(l1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 复制l1节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> newL1 = l1.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      newL1.<span class="property">id</span> = <span class="string">&#x27;newL1&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      list2.<span class="title function_">appendChild</span>(newL1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>复制节点</strong>:</p><ul><li><code>元素.cloneNode()</code>:方法对节点进行复制时,他会复制节点的所有特点(包括各种属性),该方法默认只会复制当前节点,不会复制节点的节点,传递参数true作为参数时,会赋值文本节点.</li></ul></blockquote><h2 id="元素的样式"><a href="#元素的样式" class="headerlink" title="元素的样式"></a>元素的样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击获取样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box1&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> styleObj = <span class="title function_">getComputedStyle</span>(box1);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(styleObj); <span class="comment">//获取所有样式声明</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(styleObj.<span class="property">width</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//返回的width值是一个字符串因此在增加宽度时通过parsetInt取整后在计算</span></span></span><br><span class="line"><span class="language-javascript">      box1.<span class="property">style</span>.<span class="property">width</span> = <span class="built_in">parseInt</span>(styleObj.<span class="property">width</span>) + <span class="number">100</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取box1的背景样式(注意写法改为驼峰)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(styleObj.<span class="property">backgroundColor</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>修改</strong>:</p><ul><li><code>element.style.属性名 = &#39;属性值&#39;</code>:修改元素的内联样式,(注意:css样式的属性名如果带有<code>-</code>则需要把<strong>属性名改为小驼峰</strong>)</li></ul><p><strong>读取</strong>:</p><p><strong>方法</strong>:</p><ul><li><p><code>getComputedStyle()</code>:(<strong>该方法获取的样式值为字符串)</strong></p><ul><li>返回一个对象,该对象包括了当前元素所有的生效的样式</li><li>参数:1 获取样式的元素,2:要获取的伪元素</li></ul></li><li><p>返回对象中的样式值,不一定都可以直接进行计算,因此在使用之前一定要确保值可以进行计算</p></li></ul><p><strong>属性</strong>:</p><ul><li>获取元素内部的高度与宽度(包括内容区和内边距):<ul><li><code>元素.clientHeight | clientWidth</code></li></ul></li><li>获取元素可见框的高度与宽度(包括内容区和内边距和边框):<ul><li><code>元素.offsetHeight | offsetWidth</code></li></ul></li><li>获取元素滚动区域的高度和宽度:<ul><li><code>元素.scrollHeight | scrollWidth</code></li></ul></li><li>获取元素的定位父元素(如果所有父元素都没开启定位则为body):<ul><li><code>元素.offsetParent</code></li></ul></li><li>获取元素相对于定位父元素的偏移量:<ul><li><code>元素.offsetTop | offsetLeft</code></li></ul></li><li>获取或修改元素滚动条的偏移量:<ul><li><code>元素.scrollTop| scrollLeft</code></li></ul></li></ul></blockquote><h2 id="操作class改变样式"><a href="#操作class改变样式" class="headerlink" title="操作class改变样式"></a>操作class改变样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">    </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">5px</span> solid yellowgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击改变样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box1&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过style属性改变css样式会造成css与js代码的耦合(不完全分离,改变css样式要修改js代码)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// box1.style.width = &#x27;500px&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 可以通过为box1添加class类的方法来改变css(不够灵活)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// box1.className += &quot; box2&quot;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过classList来修改样式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 添加</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// box1.classList.add(&#x27;box2&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 移除</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// box1.classList.remove(&#x27;box2&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 切换</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// box1.classList.toggle(&#x27;box2&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 替换</span></span></span><br><span class="line"><span class="language-javascript">      box1.<span class="property">classList</span>.<span class="title function_">replace</span>(<span class="string">&#x27;box1&#x27;</span>, <span class="string">&quot;box2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 检查</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(box1.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;box2&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>元素.classList</code>:的属性的方法</p><ul><li>是一个对象,对象提供了对当前元素的类的各种方法</li><li><code>元素.classList.add()</code>:为当前元素添加一个类</li><li><code>元素.classList.remove()</code>:移除当前元素的一个类</li><li><code>元素.classList.toggle()</code>:切换当前元素的类,有则移除没有则添加</li><li><code>元素.classList.replace()</code>:替换当前元素的一个类,(不会对其他类产生影响)</li><li><code>元素.classList.contains()</code>:检查当前元素是否存在一个类,返回一个布尔值</li></ul></blockquote><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">170px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>:<span class="number">170px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">13</span>, <span class="number">147</span>, <span class="number">192</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;baidu&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点击跳转百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box1&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box2&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box3 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box3&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> baidu = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;baidu&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">    box1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 打印事件对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取获取触发事件的对象(包含冒泡的触发)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取绑定事件的对象(通this)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    box2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是box2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    box3.<span class="property">onclick</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//停止事件的传递</span></span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是box3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    baidu.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;准备跳转&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 取消默认行为</span></span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>事件对象</strong>:</p><ul><li>事件对象是浏览器在<strong>事件触发时所创建的对象</strong>,该对象中封装了事件相关的各种信息</li><li><strong>通过事件对象可以获取到事件的详细信息</strong>(列如鼠标的坐标,键盘的按键等)</li><li>浏览器在创建事件对象后,<strong>会将事件对象作为回调函数的参数传递</strong>,因此我们需要在回调函数中<strong>定义一个形参(一般为event)来接受事件</strong></li></ul><p><strong>事件的冒泡</strong>(bubble):</p><ul><li>事件的冒泡就是<strong>指事件的向上传递</strong>,当<strong>元素上的某个事件被出发后,其祖先元素上的相同事件也会被同时触发</strong></li><li>冒泡的存在大大的简化了代码的编写</li></ul></blockquote><h3 id="事件的冒泡-bubble"><a href="#事件的冒泡-bubble" class="headerlink" title="事件的冒泡(bubble)"></a>事件的冒泡(bubble)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">170px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>:<span class="number">170px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">13</span>, <span class="number">147</span>, <span class="number">192</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">168</span>, <span class="number">13</span>, <span class="number">192</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box1&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box2&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box3 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box3&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box4 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box4&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      box1.<span class="property">style</span>.<span class="property">left</span> = event.<span class="property">x</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      box1.<span class="property">style</span>.<span class="property">top</span> = event.<span class="property">y</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    box2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//停止事件的传递</span></span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    box3.<span class="property">onmousemove</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是box3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    box4.<span class="property">onmousemove</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;我是box4&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件的冒泡与样式无关,与结构相关</p></blockquote><h3 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击添加超链接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>超链接3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注意: 使用querySelector方法获取的元素节点对象返回的类数组不会实时刷新</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const links = list.querySelectorAll(&#x27;a&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> links = list.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      list.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&quot;&lt;li&gt;&lt;a href=&#x27;javascript:;&#x27;&gt;新超链接&lt;/a&gt;&lt;/li&gt;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(event.target.textContent);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 判断事件是否由超链接触发</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>([...links]);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>([...links].<span class="title function_">includes</span>(event.<span class="property">target</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">textContent</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件的委派通过冒泡,将本身的事件委派到器祖先元素实现,减少了代码的复杂度</p></blockquote><h3 id="事件的捕获"><a href="#事件的捕获" class="headerlink" title="事件的捕获"></a>事件的捕获</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box1&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> box2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box2&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> box3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box3&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">alert</span>(<span class="string">&#x27;我是box1&#x27;</span> + event.<span class="property">eventPhase</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">alert</span>(<span class="string">&#x27;我是box2&#x27;</span> + event.<span class="property">eventPhase</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box3.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">alert</span>(<span class="string">&#x27;我是box3&#x27;</span> + event.<span class="property">eventPhase</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>事件的传播机制</strong>:</p><ul><li><strong>在DOM中,事件的传播可以分为三个阶段</strong>:<ol><li>捕获阶段(有祖先元素向目标元素进行事件的捕获,默认情况下事件不会在捕获阶段触达)</li><li>目标阶段(触发事件)</li><li>冒泡阶段(由目标元素向祖先元素进行事件的传递)</li></ol></li><li><strong>事件的捕获,指事件有外向内传递</strong>(当前元素触发事件后,会从当前元素最大的祖先元素开始向当前元素进行事件捕获)</li><li>如果希望事件在捕获阶段开始触发事件,可以将<code>addEventListener</code>的第三个参数设置为true,一般情况下我们不希望在捕获阶段触发事件</li><li><code>event.eventPhase</code>可以将事件的传播步骤用数字表示:<ul><li>1代表捕获阶段</li><li>2代表目标阶段</li><li>3代表冒泡事件</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13BOM</title>
      <link href="/posts/b46f062d.html"/>
      <url>/posts/b46f062d.html</url>
      
        <content type="html"><![CDATA[<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><strong>BOM(Browser Object Model)</strong>:</p><ul><li><strong>浏览器对象模型</strong></li><li>BOM为我们提供了一组对象,通过这组对象可以完成对浏览器的各种操作</li><li>BOM对象:<ol><li><code>Windows</code>：<strong>代表浏览器窗口</strong>(全局对象)</li><li><code>Navigator</code>:<strong>浏览器对象</strong>(一般用于识别不同浏览器)</li><li><code>Location</code>:<strong>浏览器的地址栏信息</strong></li><li><code>History</code>:<strong>浏览器的历史记录</strong>(因为隐私问题不能获取到详细的历史记录)</li><li><code>Screen</code>:<strong>屏幕信息</strong></li></ol></li><li><strong>BOM对象都是作为Windows对象的属性保存的</strong>,因此可以直接在js中访问这些对象</li></ul></blockquote><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">userAgent</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Navigator</strong>:</p><ul><li><p>浏览器对象</p></li><li><p><code>navigator.userAgent</code>:获取(识别)不同浏览器,并返回一段字符串信息</p></li></ul></blockquote><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取地址栏信息</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(location);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//获取地址栏的地址</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 修改地址栏</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// location = &#x27;https://www.baidu.com&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 跳转到一个新的地址</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// location.assign(&#x27;https://www.baidu.com&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// location.replace(&#x27;https://www.baidu.com&#x27;); //无法通过回退按钮返回</span></span></span><br><span class="line"><span class="language-javascript">      location.<span class="title function_">reload</span>(); <span class="comment">//可以传递一个true来强制清缓存刷新</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Location</strong>:</p><ul><li>表示浏览器地址栏的信息</li><li>可以将<code>location</code>的值修改为一个新的地址,使页面发生跳转</li><li><code>location.href</code>:获取当前地址栏的地址</li><li><code>location.assign()</code>:跳转到一个新地址</li><li><code>location.replace()</code>:跳转到一个新的地址(无法通过回退按钮回退)</li><li><code>location.reload()</code>:刷新页面,可以传递一个true来清理缓存强制刷新页面</li></ul></blockquote><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取History</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(history);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 回退</span></span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">back</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 前进</span></span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">forward</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 前进(正数)或回退(负数)或刷新(0)</span></span></span><br><span class="line"><span class="language-javascript">      history.<span class="title function_">go</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>History</strong>:</p><ul><li><code>history.back()</code>:回退按钮</li><li><code>history.forward()</code>:前进按钮</li><li><code>history.go()</code>:前进(正数)几次或回退(负数)几次或刷新(0)</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14定时器</title>
      <link href="/posts/2b200501.html"/>
      <url>/posts/2b200501.html</url>
      
        <content type="html"><![CDATA[<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="定时器-1"><a href="#定时器-1" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> numH1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;num&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> num = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置定时器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方式1(只执行一次)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        num++;</span></span><br><span class="line"><span class="language-javascript">        numH1.<span class="property">textContent</span> = num;</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 方式2(每间隔一段时间执行一次)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> timer2 = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(timer2);</span></span><br><span class="line"><span class="language-javascript">        num++;</span></span><br><span class="line"><span class="language-javascript">        numH1.<span class="property">textContent</span> = num;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(num == <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">clearInterval</span>(timer2);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过设置定时器,可以<strong>使代码在指定时间(间隔一段时间)后执行</strong></p><p>设置定时器的两种方法:</p><p>方式1:</p><ul><li><code>setTimeout()</code>:(<strong>只执行一次</strong>)参数:<ol><li>回调函数(要执行的代码)</li><li>间隔的时间(以毫秒为单位)</li></ol></li><li>关闭定时器:<code>clearTimeout()</code></li></ul><p>方式2:</p><ul><li><code>setInterval()</code>:(在清除定时器之前不会停止,关闭定时器:<code>clearTimeout()</code>)参数:<ol><li>回调函数(要执行的代码)</li><li>间隔的时间(以毫秒为单位)</li></ol></li><li>关闭定时器:<code>clearInterval()</code></li></ul></blockquote><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数执行完毕,执行环境从栈中弹出&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>事件循环(event loop)</strong>:</p><ul><li>函数在每次执行时,都会产生一个执行环境</li><li>执行环境负责存储函数执行时产生的一切数据<ul><li>函数的执行环境会存储到一个叫做调用栈的地方</li><li>栈:一种数据结构,特点:先进后出</li></ul></li></ul><p><strong>调用栈(call stack)</strong>:</p><ul><li>调用栈负责存储函数的执行环境</li><li>当一个函数被调用时,他的执行环境会作为一个栈帧插入到调用栈的栈顶,函数执行完毕后栈帧会自动从栈中弹出</li></ul></blockquote><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn2</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数执行完毕,执行环境从栈中弹出&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="number">111</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> begin = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 循环持续3秒,占用调用栈栈顶</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - begin &lt; <span class="number">3000</span>) &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  btn2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="number">222</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>消息队列</strong>:</p><ul><li>一种数据结构,特点:先进先出</li><li>消息队列负责存储将要执行的函数</li><li>当我们触发一个事件时,其响应函数并不是直接就添加到调用栈中的,因为调用栈中可能存在还没执行完毕的代码</li><li>事件触发后,js引擎将事件响应函数插入到消息队列中进行排队,等待调用栈空后,进入调用栈开始执行函数</li></ul></blockquote><h2 id="定时器补充"><a href="#定时器补充" class="headerlink" title="定时器补充"></a>定时器补充</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//定时器的本质就是在指定时间后将函数添加到消息队列中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定时器执行了&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="comment">// 使全局作用域卡6s</span></span><br><span class="line"><span class="keyword">const</span> begin = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - begin &lt; <span class="number">6000</span>) &#123;&#125;;</span><br><span class="line"><span class="comment">//setInterval()在函数执行慢的情况下,无法保证每次的间隔相同</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;间隔&#x27;</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;间隔&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;定时器执行&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;间隔&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="comment">// 利用递归,用setTimeout()模拟steInterval();</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;间隔&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;间隔&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;fn定时器执行了&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;间隔&#x27;</span>);</span><br><span class="line"><span class="comment">// fn函数执行完毕时,再次调用</span></span><br><span class="line"><span class="built_in">setTimeout</span>(fn, <span class="number">3000</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="comment">//栈中的函数会先执行</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>); <span class="comment">//间隔0ms添加到消息队列</span></span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2222&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>定时器的本质</strong>: 在指定时间后将函数添加到消息队列中.</p><p><code>setInterval()</code>每隔一段时间就会将函数添加到消息队列中,但是如果函数执行的速度较慢,就会无法保证每次执行的间隔是一样的,(<strong>可以利用递归使<code>setTimeout()</code>模拟<code>setIntercal()</code></strong>).</p></blockquote><h2 id="定时器练习"><a href="#定时器练习" class="headerlink" title="定时器练习"></a>定时器练习</h2><h3 id="轮播图方式1"><a href="#轮播图方式1" class="headerlink" title="轮播图方式1"></a>轮播图方式1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;warp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;imgs&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>上一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;autoBtn&quot;</span>&gt;</span>自动切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> imgs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;imgs&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> prev = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;prev&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> next = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;next&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> autoBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;autoBtn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> imgArr = [</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;./img/01.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;./img/02.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;./img/03.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;./img/04.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;./img/05.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;./img/06.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;./img/07.jpeg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">];</span></span><br><span class="line"><span class="language-javascript">p1.<span class="property">textContent</span> = <span class="string">&#x27;共7张图,当前为第1张&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> current = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 上一张</span></span></span><br><span class="line"><span class="language-javascript">prev.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">current--;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(current &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  current = imgArr.<span class="property">length</span> - <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">imgs.<span class="property">src</span> = imgArr[current];</span></span><br><span class="line"><span class="language-javascript">p1.<span class="property">textContent</span> = <span class="string">`共<span class="subst">$&#123;imgArr.length&#125;</span>张图,当前为第<span class="subst">$&#123;current + <span class="number">1</span>&#125;</span>张`</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 下一张</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">current++;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(current &gt; <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  current = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">imgs.<span class="property">src</span> = imgArr[current];</span></span><br><span class="line"><span class="language-javascript">p1.<span class="property">textContent</span> = <span class="string">`共<span class="subst">$&#123;imgArr.length&#125;</span>张图,当前为第<span class="subst">$&#123;current + <span class="number">1</span>&#125;</span>张`</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">next.<span class="property">onclick</span> = fn;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 自动切换</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> hh;</span></span><br><span class="line"><span class="language-javascript">autoBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">  timer = <span class="built_in">setTimeout</span>(  hh = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">  timer = <span class="built_in">setTimeout</span>(hh, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>图片只有在点击的时候才会加载,会造成图片延迟显示</p></blockquote><h3 id="轮播图方式2"><a href="#轮播图方式2" class="headerlink" title="轮播图方式2"></a>轮播图方式2</h3><p><strong>html代码</strong>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 图片列表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;img-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/02.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/03.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/04.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 切换按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;prev-next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span> &lt; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span> &gt; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 导航点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>css代码</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 图片样式 */</span></span><br><span class="line"><span class="selector-id">#outer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">700px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.7s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.current</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 切换按钮样式 */</span></span><br><span class="line"><span class="selector-class">.prev-next</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#bfa</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.prev-next</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#next</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导航点样式 */</span></span><br><span class="line"><span class="selector-class">.dot</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">194</span>, <span class="number">19</span>, <span class="number">207</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dot</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.dot</span> <span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>js代码</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取导航点与图片列表</span></span><br><span class="line"><span class="keyword">const</span> dots = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.dot a&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> imgArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.img-list li&quot;</span>));</span><br><span class="line"> <span class="comment">// 封装自动切换函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">auto</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取当前显示的图片</span></span><br><span class="line">  <span class="keyword">const</span> current = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.img-list .current&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> next;</span><br><span class="line">  <span class="keyword">if</span> (dir === <span class="string">&quot;next&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取下一张图片</span></span><br><span class="line">    next = current.<span class="property">nextElementSibling</span> || imgArr[<span class="number">0</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dir === <span class="string">&quot;prev&quot;</span>) &#123;</span><br><span class="line">    next = current.<span class="property">previousElementSibling</span> || imgArr.<span class="title function_">at</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> dir === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    next = imgArr[dir];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取当前显示图片的索引</span></span><br><span class="line">  <span class="keyword">const</span> index = imgArr.<span class="title function_">indexOf</span>(next);</span><br><span class="line">  <span class="comment">// 切换图片显示状态</span></span><br><span class="line">  current.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">  next.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">  <span class="comment">// 切换导航点显示状态</span></span><br><span class="line">  <span class="keyword">const</span> currentActive = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.active&quot;</span>);</span><br><span class="line">  currentActive.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">  dots[index].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自动切换(闭包)</span></span><br><span class="line"><span class="keyword">const</span> toggleChange = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer === <span class="literal">null</span>) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">zd</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">auto</span>(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(zd, <span class="number">2000</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="title function_">toggleChange</span>();</span><br><span class="line"><span class="comment">// 鼠标移入停止自动切换</span></span><br><span class="line"><span class="keyword">const</span> outer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;outer&quot;</span>);</span><br><span class="line">outer.<span class="property">onmouseenter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">toggleChange</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 鼠标移出继续切换</span></span><br><span class="line">outer.<span class="property">onmouseleave</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">toggleChange</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 点击按钮切换</span></span><br><span class="line"><span class="keyword">const</span> prev = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prev&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> next = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">next.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">auto</span>(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">prev.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">auto</span>(<span class="string">&quot;prev&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15贪吃蛇游戏</title>
      <link href="/posts/8670c983.html"/>
      <url>/posts/8670c983.html</url>
      
        <content type="html"><![CDATA[<h1 id="贪吃蛇游戏"><a href="#贪吃蛇游戏" class="headerlink" title="贪吃蛇游戏"></a>贪吃蛇游戏</h1><p><strong>Html</strong>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;overy&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;scoreOv&quot;</span>&gt;</span>撞墙了!游戏结束!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;levelOv&quot;</span>&gt;</span>吃到了自己的尾巴!游戏结束!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;stage&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;snake&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;food&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>SCORE:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>LEVEL:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;level&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>css</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#main</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">10px</span> <span class="number">#000</span> solid;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#b7d4a8</span>;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#stage</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">304px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">304px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">2px</span> <span class="number">#000</span> solid;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#snake</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#b7d4a8</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#food</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">120px</span>;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">flex-flow</span>: wrap;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#food</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#info</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">304px</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">   <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">   <span class="attribute">font</span>: bold <span class="number">20px</span> courier;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#overy</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">left</span>: -<span class="number">30px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#51e407</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">#000</span> solid <span class="number">2px</span>;</span><br><span class="line">   <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">   <span class="attribute">display</span>: none;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#scoreOv</span>,</span><br><span class="line"> <span class="selector-id">#levelOv</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">35px</span> auto;</span><br><span class="line">   <span class="attribute">font</span>: bold <span class="number">20px</span> courier;</span><br><span class="line">   <span class="attribute">display</span>: none;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>js</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取蛇的容器</span></span><br><span class="line"><span class="keyword">const</span> snake = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;snake&quot;</span>);</span><br><span class="line"><span class="comment">// 获取蛇的身体</span></span><br><span class="line"><span class="keyword">const</span> snakes = snake.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="comment">// 获取食物</span></span><br><span class="line"><span class="keyword">const</span> food = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;food&quot;</span>);</span><br><span class="line"><span class="comment">// 获取分数和等级</span></span><br><span class="line"><span class="keyword">const</span> scoreSpan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;score&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> levelSpan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;level&quot;</span>);</span><br><span class="line"><span class="comment">// 获取overy</span></span><br><span class="line"><span class="keyword">const</span> overy = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;overy&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(overy);</span><br><span class="line"><span class="comment">// 定义变量,存储分数和等级</span></span><br><span class="line"><span class="keyword">let</span> score = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> level = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 随机生成食物(食物的坐标应是随机生成的0-290之间的整10的倍数)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeFood</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 生成随机数</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">30</span>) * <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">30</span>) * <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 设置食物的坐标</span></span><br><span class="line">  food.<span class="property">style</span>.<span class="property">top</span> = y + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  food.<span class="property">style</span>.<span class="property">left</span> = x + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 避免食物出现在出生点</span></span><br><span class="line"><span class="comment">// changeFood();</span></span><br><span class="line"><span class="comment">// 定义一个变量来控制蛇的方向</span></span><br><span class="line"><span class="keyword">let</span> dir;</span><br><span class="line"><span class="comment">// 定义一个变量记录按键状态</span></span><br><span class="line"><span class="keyword">let</span> keyActive = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 键盘事件只能绑定有获取焦点的元素(列如:超链接,input,表单项等),或者是document</span></span><br><span class="line"><span class="comment">// 绑定键盘事件</span></span><br><span class="line"><span class="comment">// 方式1 速度与方向为一体控制,(但速度在电脑默认的按键事件会在第一次与第二次之间产生间隔),方向则由用户控制,游戏体验不好</span></span><br><span class="line"><span class="comment">// document.addEventListener(&#x27;keydown&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   // 判断用户按下那个按键</span></span><br><span class="line"><span class="comment">//   switch(event.key) &#123;</span></span><br><span class="line"><span class="comment">//     case &#x27;w&#x27;:</span></span><br><span class="line"><span class="comment">//       head.style.top = head.offsetTop - 10 + &#x27;px&#x27;;</span></span><br><span class="line"><span class="comment">//       break;</span></span><br><span class="line"><span class="comment">//     case &#x27;s&#x27;:</span></span><br><span class="line"><span class="comment">//     head.style.top = head.offsetTop + 10 + &#x27;px&#x27;;</span></span><br><span class="line"><span class="comment">//       break;</span></span><br><span class="line"><span class="comment">//     case &#x27;a&#x27;:</span></span><br><span class="line"><span class="comment">//     head.style.left = head.offsetLeft - 10 +&#x27;px&#x27;;</span></span><br><span class="line"><span class="comment">//       break;</span></span><br><span class="line"><span class="comment">//     case &#x27;d&#x27;:</span></span><br><span class="line"><span class="comment">//       head.style.left = head.offsetLeft + 10 +&#x27;px&#x27;;</span></span><br><span class="line"><span class="comment">//       break;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 按键数组</span></span><br><span class="line"><span class="keyword">const</span> keyArr = [<span class="string">&quot;w&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="comment">// 按键对象</span></span><br><span class="line"><span class="keyword">const</span> reObj = &#123;</span><br><span class="line">  <span class="attr">w</span>: <span class="string">&quot;s&quot;</span>,</span><br><span class="line">  <span class="attr">s</span>: <span class="string">&quot;w&quot;</span>,</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;d&quot;</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 方式2 速度与方向分开控制 (速度由定时函数控制),方向由用户控制</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 检测按键是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (keyActive &amp;&amp; keyArr.<span class="title function_">includes</span>(event.<span class="property">key</span>)) &#123;</span><br><span class="line">    <span class="comment">// 禁止掉头(方向为上时方向下不能生效,下,左,右一样)</span></span><br><span class="line">    <span class="keyword">if</span> (snake.<span class="property">length</span> &lt; <span class="number">2</span> || reObj[dir] !== event.<span class="property">key</span>) &#123;</span><br><span class="line">      dir = event.<span class="property">key</span>;</span><br><span class="line">      <span class="comment">// 禁止搓键盘</span></span><br><span class="line">      keyActive = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义定时函数来控制蛇的速度</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取蛇头</span></span><br><span class="line">  <span class="keyword">const</span> head = snakes[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 获取蛇头坐标</span></span><br><span class="line">  <span class="keyword">let</span> x = head.<span class="property">offsetLeft</span>;</span><br><span class="line">  <span class="keyword">let</span> y = head.<span class="property">offsetTop</span>;</span><br><span class="line">  <span class="comment">// 判断用户按下那个按键</span></span><br><span class="line">  <span class="keyword">switch</span> (dir) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;w&quot;</span>:</span><br><span class="line">      y = y - <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;s&quot;</span>:</span><br><span class="line">      y = y + <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;a&quot;</span>:</span><br><span class="line">      x = x - <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;d&quot;</span>:</span><br><span class="line">      x = x + <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 检查蛇是否吃到食物(碰撞检测--即蛇头的坐标与食物的坐标一样)</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    head.<span class="property">offsetTop</span> === food.<span class="property">offsetTop</span> &amp;&amp;</span><br><span class="line">    head.<span class="property">offsetLeft</span> === food.<span class="property">offsetLeft</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 改变食物的位置</span></span><br><span class="line">    <span class="comment">// changeFood();</span></span><br><span class="line">    <span class="comment">// 增加蛇的身体</span></span><br><span class="line">    snake.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeend&quot;</span>, <span class="string">&quot;&lt;div/&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">// 吃到食物增加分数</span></span><br><span class="line">    score++;</span><br><span class="line">    scoreSpan.<span class="property">textContent</span> = score;</span><br><span class="line">    <span class="comment">// 检查等级</span></span><br><span class="line">    <span class="keyword">if</span> (score % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; level &lt; <span class="number">14</span>) &#123;</span><br><span class="line">      level++;</span><br><span class="line">      levelSpan.<span class="property">textContent</span> = level;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 检查是否撞墙</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; <span class="number">290</span> || y &lt; <span class="number">0</span> || y &gt; <span class="number">290</span>) &#123;</span><br><span class="line">    <span class="comment">// alert(`撞墙了, 游戏结束!得分$&#123;score&#125;`);</span></span><br><span class="line">    overy.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    overy.<span class="property">firstElementChild</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    overy.<span class="property">firstElementChild</span>.<span class="property">textContent</span> = <span class="string">`撞墙了!游戏结束!得分<span class="subst">$&#123;score&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// 立即返回终止函数</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 检查是否撞到尾巴</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; snakes.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (snakes[i].<span class="property">offsetLeft</span> === x &amp;&amp; snakes[i].<span class="property">offsetTop</span> === y) &#123;</span><br><span class="line">      <span class="comment">// alert(`吃到了自己的尾巴!游戏结束!得分$&#123;score&#125;`);</span></span><br><span class="line">      overy.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">      overy.<span class="property">lastElementChild</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">      overy.<span class="property">lastElementChild</span>.<span class="property">textContent</span> = <span class="string">`吃到了自己的尾巴!游戏结束!得分<span class="subst">$&#123;score&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取蛇尾巴</span></span><br><span class="line">  <span class="keyword">const</span> tail = snakes[snakes.<span class="property">length</span> - <span class="number">1</span>]; </span><br><span class="line">  <span class="comment">// 移动蛇尾巴的位置</span></span><br><span class="line">  tail.<span class="property">style</span>.<span class="property">left</span> = x + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  tail.<span class="property">style</span>.<span class="property">top</span> = y + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  <span class="comment">// 将蛇尾巴移动到蛇头的位置</span></span><br><span class="line">  snake.<span class="title function_">insertAdjacentElement</span>(<span class="string">&quot;afterbegin&quot;</span>, tail);</span><br><span class="line">  <span class="comment">// 随着等级提高,蛇的速度提升</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(move, <span class="number">300</span> - level * <span class="number">15</span>);</span><br><span class="line">  <span class="comment">// 重新激活按键</span></span><br><span class="line">  keyActive = <span class="literal">true</span>;</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16jQuery</title>
      <link href="/posts/6dc75d2c.html"/>
      <url>/posts/6dc75d2c.html</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="jQuery核心函数"><a href="#jQuery核心函数" class="headerlink" title="jQuery核心函数"></a>jQuery核心函数</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入jQuery --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> num = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($.<span class="title function_">isFunction</span>(num)); <span class="comment">//false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($.<span class="title function_">isFunction</span>(fn)); <span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> fn === <span class="string">&#x27;function&#x27;</span>); <span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将函数作为参数</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;核心函数内部&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;核心函数外部&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将选择器字符串作为参数</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;按钮被点击&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// jq对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $btn = $(<span class="string">&#x27;#btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>($btn); <span class="comment">//[object Object]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 原生jsDOM对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(btn1); <span class="comment">//[object HTMLButtonElement]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将DOM对象作为参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>($(btn1));</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将html代码作为参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> $h1 = $(<span class="string">&#x27;&lt;h1&gt;通过jq创建的h1标题&lt;/h1&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>($h1);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">append</span>($h1); <span class="comment">//将h1添加到div中</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>引入jQuery库,其实就是向网页中添加了一个新的函数$(jQuery)</p><ul><li>$ 是jQuery中的核心函数,jQuery的所有功能都是通过该函数来进行的</li><li>核心函数的功能:<ol><li>将它作为工具类使用<ul><li>在核心函数中jQuery为我们提供了多个工具方法</li></ul></li><li>将它作为函数使用<ul><li>将一个函数作为$的参数<ul><li>这个函数会<strong>在文档加载完毕之后执行</strong></li><li>相当于:<code>document.addEventlistener(&#39;DOMContentLoaded&#39;, function() &#123;&#125;)</code></li></ul></li><li>将选择器字符串作为参数<ul><li>jQuery会自动去网页中查找元素</li><li>相当于<code>document.querySelectorAll(&#39;...&#39;)</code></li><li>注意: <strong>通过jQuery核心函数查询到的结果并不是原生的DOM对象</strong>,而是一个<strong>经过jQuery包装过的对象</strong>,这个对象我们称为jQuery对象,jQuery对象为我们提供了很多新的方法,方便我们操作DOM,<strong>但是jQuery对象不能直接调用原生的DOM对象</strong>,原生对象也<strong>不能直接使用</strong>jQuery方法,因此我们为jQuery命名时,<strong>会使用$开头</strong>加以区分</li></ul></li><li>将DOM对象作为参数<ul><li>可以<strong>将DOM对象转换为jQuery对象</strong>,从而<strong>使用jQuery对象的方法</strong></li></ul></li><li>将html代码作为参数<ul><li><strong>会根据html代码来创建元素</strong></li></ul></li></ul></li></ol></li></ul></blockquote><h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;zs&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;ls&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>瑞克<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>莫蒂<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>杰克<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>汤姆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $li = $(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>($li[<span class="number">0</span>].<span class="property">textContent</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//读取文本,返回所有标签中的文本</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> text = $li.<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(text);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 读取属性时,返回第一个标签的属性</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> id = $li.<span class="title function_">attr</span>(<span class="string">&#x27;id&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(id);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> result = $li.<span class="title function_">text</span>(<span class="string">&#x27;新的文本内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 返回值还是jq对象--$li</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(result === $li);</span></span><br><span class="line"><span class="language-javascript">      $li.<span class="title function_">text</span>(<span class="string">&#x27;新的文本内容&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;#bfa&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>jQuery对象</strong>:</p><ul><li>通过jq核心函数获取到的对象就是jq对象</li><li>jq对象是jq中定义的对象,可以理解为时DOM升级版,在jq对象中为我们提供了很多简单易用的方法,来简化DOM操作</li><li>jq对象本质上是一个DOM对象的数组(类数组),可以通过索引获取jq对象中的DOM对象</li><li>当我们修改jq对象时,他会自动修改jq中的所有元素,–<strong>这一特征称为jq对象的 隐式迭代</strong></li><li>通常情况下,jq对象的返回值依然是一个jq对象,因此我们可以在调用一个方法后继续调用其他jq对象的方法,–<strong>这一特征称为jq对象的 链式调用</strong></li></ul></blockquote><h2 id="jQuery的方法"><a href="#jQuery的方法" class="headerlink" title="jQuery的方法"></a>jQuery的方法</h2><h3 id="jQuery对象操作class类"><a href="#jQuery对象操作class类" class="headerlink" title="jQuery对象操作class类"></a>jQuery对象操作class类</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">5px</span> solid  aqua;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 为box1添加class,addClass()为元素添加一个或者多个class</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).addClass([&#x27;box2&#x27;, &#x27;box3&#x27;]);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// addClass()可以接收一个回调函数</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">addClass</span>(<span class="keyword">function</span>(<span class="params">index, className</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// alert(index + &#x27;---&#x27; + className);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在回调函数中,this表示当前的元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 根据索引添加class</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(index % <span class="number">2</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;box2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;box3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>更多方法见官方api: <code>https://api.jquery.com/</code></p></blockquote><h3 id="jQuery对象的克隆"><a href="#jQuery对象的克隆" class="headerlink" title="jQuery对象的克隆"></a>jQuery对象的克隆</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>瑞克<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>莫蒂<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#list li:nth-child(1)&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;张三&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// clone()赋值一个jq对象,传递参数true则可以进行深层次的复制</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $zs = $(<span class="string">&#x27;#list li:nth-child(1)&#x27;</span>).<span class="title function_">clone</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $list2 = $(<span class="string">&#x27;#list2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $list2.<span class="title function_">append</span>($zs);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery添加容器"><a href="#jQuery添加容器" class="headerlink" title="jQuery添加容器"></a>jQuery添加容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>瑞克<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>莫蒂<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// unwrap()删除外层元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;#list li&#x27;).unwrap();</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// wrap()为当前元素添加一个容器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;#list li&#x27;).wrap(&#x27;&lt;div/&gt;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// wrapAll()为当前的所有元素统一添加容器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;#list li&#x27;).wrapAll(&#x27;&lt;div/&gt;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// wrapInner()为当前元素添加一个内部容器</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#list li&#x27;</span>).<span class="title function_">wrapInner</span>(<span class="string">&#x27;&lt;div/&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery添加子元素"><a href="#jQuery添加子元素" class="headerlink" title="jQuery添加子元素"></a>jQuery添加子元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// append()向父元素 后面添加一个子元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;#box1&#x27;).append(&#x27;&lt;div id=&quot;box2&quot;/&gt;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// appendTo()将子元素添加到 父元素后边</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;&lt;div id=&quot;box2&quot;&gt;&lt;/div&gt;&#x27;).appendTo(&#x27;#box1&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// append()向父元素 前面添加一个子元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;#box1&#x27;).prepend(&#x27;&lt;div id=&quot;box2&quot;/&gt;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// appendTo()将子元素添加到 父元素前边</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//$(&#x27;&lt;div id=&quot;box2&quot;&gt;&lt;/div&gt;&#x27;).prependTo(&#x27;#box1&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// text()获取或设置元素的文本内容</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// var $zs = $(&#x27;#zs&#x27;).text(&#x27;&lt;h1&gt;hhh&lt;/h1&gt;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// html()获取或设置元素的文本内(有xss攻击风险)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $zs = $(<span class="string">&#x27;#zs&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;h1&gt;hhh&lt;/h1&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery的一些方法"><a href="#jQuery的一些方法" class="headerlink" title="jQuery的一些方法"></a>jQuery的一些方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jk&quot;</span>&gt;</span>杰克<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tm&quot;</span>&gt;</span>汤姆<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>瑞克<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>莫蒂<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $li = $(<span class="string">&#x27;li:nth-child(1)&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;hhhh&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;ul&#x27;).empty();</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $li.remove();</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $li.detach();</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;&lt;h1&gt;杰克&lt;/h1&gt;&#x27;).replaceAll(&#x27;.jk&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.tm&#x27;).replaceWith(&#x27;&lt;h1&gt;汤姆&lt;/h1&gt;&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">append</span>($li);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn3&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> type = $(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;type&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> name = $(<span class="string">&#x27;input[type=text]&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;name&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> checked = $(<span class="string">&#x27;input[type = radio]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;checked&#x27;</span>); <span class="comment">//checked</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> checked2 = $(<span class="string">&#x27;input[type = radio]&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>); <span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(checked);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(checked2);</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;input[type = text]&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;哈哈&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> hh = $(<span class="string">&#x27;input[type = text]&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;嘻嘻&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(hh);</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;input[type = radio]&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>元素方法</strong>:</p><ul><li><p><code>empty()</code> 删除所有子元素</p></li><li><p>移除元素</p></li><li><p><code>remove()</code> (同时移除事件)</p></li><li><p><code>detach()</code> (不会移除事件)</p></li><li><p>替换元素</p><ul><li><p><code>replaceAll()</code> (前面替换后面)</p></li><li><p><code>replaceWith()</code> (后面替换前面)</p></li></ul></li></ul><p><strong>属性方法</strong>:</p><ul><li><p>读取或者设置元素的属性</p><ul><li><p><code>.attr()</code> 读取布尔值时返回实际的布尔值</p></li><li><p><code>.prop()</code> 读取布尔值时返回 true&#x2F;false</p></li></ul></li><li><p><code>.val()</code>读取或设置元素的<code>value</code>值</p></li></ul></blockquote><h3 id="jQuery操作样式的方法"><a href="#jQuery操作样式的方法" class="headerlink" title="jQuery操作样式的方法"></a>jQuery操作样式的方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// var $width = $(&#x27;#box1&#x27;).css(&#x27;width&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// var $width2 = $(&#x27;#box1&#x27;).css(&#x27;width&#x27;, 300);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// var $width = $(&#x27;#box1&#x27;).css(&#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   width:  400,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   height: 300,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   backgroundColor: &#x27;#bfa&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert($width);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert($(&#x27;#box1&#x27;).innerHeight());</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#box1&#x27;</span>).<span class="title function_">offset</span>(&#123;<span class="attr">top</span>: <span class="number">500</span>, <span class="attr">left</span>: <span class="number">500</span>&#125;));</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn2&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn3&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p><code>.css()</code> 可以读取或者修改样式</p></li><li><p>获取元素内部的(包括padding)宽度或高度</p><ul><li><p><code>.innerHeight()</code> </p></li><li><p><code>.innerWidth()</code></p></li></ul></li><li><p><code>.offset()</code>  修改或读取元素的坐标(没开启定位时会自动添加相对定位)</p></li></ul></blockquote><h3 id="筛选jQuery对象"><a href="#筛选jQuery对象" class="headerlink" title="筛选jQuery对象"></a>筛选jQuery对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span里的1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 a&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span里的2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span里的3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 a&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 a&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 a&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 a&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 可以通过伪元素选择器来筛选元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1:nth-of-type(1)&#x27;).css(&#x27;background-color&#x27;, &quot;#bfa&quot;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过方法筛选</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).eq(0).css(&#x27;background-color&#x27;, &#x27;#bfa&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).first(0).css(&#x27;background-color&#x27;, &#x27;#bfa&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).last(0).css(&#x27;background-color&#x27;, &#x27;#bfa&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).even().css(&#x27;background-color&#x27;, &#x27;#bfa&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).odd().css(&#x27;background-color&#x27;, &#x27;#bfa&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).slice(1, 3).css(&#x27;background-color&#x27;, &#x27;#bfa&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).filter(&#x27;.a&#x27;).css(&#x27;background-color&#x27;, &#x27;#bfa&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).filter(&#x27;.a&#x27;).css(&#x27;background-color&#x27;, &#x27;#bfa&#x27;).end().css(&#x27;border-color&#x27;, &#x27;blue&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).add(&#x27;.box2&#x27;).css(&#x27;background-color&#x27;, &#x27;pink&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $(&#x27;.box1&#x27;).contents().css(&#x27;background-color&#x27;, &#x27;yellow&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;.box1&#x27;</span>).<span class="title function_">contents</span>().<span class="title function_">addBack</span>().<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>根据索引筛选对象</strong>:</p><ul><li><p><code>.eq()</code> 返回jq对象, 可以接受负值</p></li><li><p>.<code>first()</code> 获取第一个</p></li><li><p><code>.last()</code> 获取最后一个</p></li><li><p><code>.even()</code> 获取所有索引为偶数的元素</p></li><li><p><code>.odd()</code> 获取所有索引为奇数的元素</p></li><li><p><code>.slice()</code> 截取元素, 包括开头不包括结尾</p></li><li><p><code>filter()</code> 筛选符合要求的元素</p></li><li><p><code>.has()</code> 检查元素是否存在 返回 true&#x2F;false</p></li><li><p><code>.not()</code> 排除符合条件的元素</p></li></ul><p><code>.end()</code> 将jq对象恢复到筛选前的状态(结束链式调用)</p><p><code>.add()</code> 向jq对象中添加元素</p><p><code>.contents()</code> 获取所有子元素</p></blockquote><h3 id="jQuery中的事件处理"><a href="#jQuery中的事件处理" class="headerlink" title="jQuery中的事件处理"></a>jQuery中的事件处理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>超链接的默认行为<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// jQuery的事件绑定方式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方式一</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(&quot;#btn&quot;).click(function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   alert(111);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(&#x27;body&#x27;).click(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   alert(&#x27;body&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(&quot;a&quot;).click(function (event) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   alert(&quot;aaaa&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // 取消冒泡与默认行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // return false;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // 单独取消冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   event.stopPropagation();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // 单独取消超链接的默认行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   event.preventDefault();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方式二</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click.a&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;通过on绑定的事件 1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click.b&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;通过on绑定的事件 2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click.c&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;通过on绑定的事件 3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn2&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过off()取消jq对象的事件绑定</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">off</span>(<span class="string">&#x27;click.a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn3&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(&#x27;.box1&#x27;).on(&#x27;click&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   alert(&#x27;box1&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// jQuery中的事件委派</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(document).on(&#x27;click&#x27;, &#x27;.box1&#x27;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   alert(&#x27;事件委托 (委派为document) &#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方式三(只执行一次)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用one()来给jq绑定一个一次性事件</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;.box1&#x27;</span>).<span class="title function_">one</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;一次性事件&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以通过指定的方法为jQuery对象绑定事件</p><ul><li><p>在jQuery的事件响应函数中,同样有事件对象,但这个事件对象是经过jQuery包装过的新的对象,包装该对象主要是为了解决兼容性的问题</p></li><li><p>在jQuery的事件回调函数中,可以通过<code>return false</code>来取消默认行为和冒泡</p></li><li><p>也可以单独取消默认行为与冒泡</p><ul><li><code>event.stopPropagation();</code>取消冒泡</li><li><code>event.preventDefault();</code>取消超链接的默认行为</li></ul></li><li><p><code>.off()</code>取消jq对象的事件绑定</p></li><li><p><code>.one()</code>只执行一次的事件函数</p></li></ul></blockquote><h2 id="使用jQuery重写之前练习"><a href="#使用jQuery重写之前练习" class="headerlink" title="使用jQuery重写之前练习"></a>使用jQuery重写之前练习</h2><h3 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        请选择你的爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;check-all&quot;</span> /&gt;</span>全选</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;动漫&quot;</span> /&gt;</span>动漫</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电影&quot;</span> /&gt;</span>电影</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span> /&gt;</span>游戏</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;学习&quot;</span> /&gt;</span>学习</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;all&quot;</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;no&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reverse&quot;</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;send&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取全选框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $checkAll = $(<span class="string">&quot;#check-all&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取四个多选框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> $hobbies = $(<span class="string">&quot;[name=hobby]&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击全选框,选中四个多选框</span></span></span><br><span class="line"><span class="language-javascript">    $checkAll.<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $hobbies.<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, <span class="variable language_">this</span>.<span class="property">checked</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使四个多选框与全选框进行同步</span></span></span><br><span class="line"><span class="language-javascript">    $hobbies.<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $checkAll.<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, !$hobbies.<span class="title function_">is</span>(<span class="string">&quot;:not(:checked)&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全选按钮</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#all&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// add()不会修改jq的原数组, 而是返回一个新的数组(非破坏性方法)</span></span></span><br><span class="line"><span class="language-javascript">      $hobbies.<span class="title function_">add</span>($checkAll).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 取消按钮</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#no&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $hobbies.<span class="title function_">add</span>($checkAll).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 反选按钮</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#reverse&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $hobbies.<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>, <span class="keyword">function</span>(<span class="params">index, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> !oldValue;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      $checkAll.<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>, !$hobbies.<span class="title function_">is</span>(<span class="string">&#x27;:not(:checked)&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 提交按钮</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#send&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert($hobbies.val());</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 遍历四个多选框</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// DOM放式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// for(let i=0; i&lt;$hobbies.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   alert($hobbies[i].value);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// jq放式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// .each()遍历数组, 数组中有几个元素该函数就会遍历几次, 且this为循环的当前元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// $hobbies.each(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   this.checked &amp;&amp; alert(this.value);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 筛选checked为true的元素</span></span></span><br><span class="line"><span class="language-javascript">      $hobbies.<span class="title function_">filter</span>(<span class="string">&#x27;:checked&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮件<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>薪资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>zs@qq.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>13000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>ls@qq.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>ww@qq.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>15000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>邮件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 46px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;salary&quot;</span>&gt;</span>薪资<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 删除功能</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在事件委派时, jq将this设置为了触发的事件的对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// alert(this); //this为a标签</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $tr = $(<span class="variable language_">this</span>).<span class="title function_">parents</span>(<span class="string">&#x27;tr&#x27;</span>); <span class="comment">//获取祖先元素中的tr</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(<span class="title function_">confirm</span>(<span class="string">&#x27;确认删除[&#x27;</span>+ $tr.<span class="title function_">children</span>()[<span class="number">0</span>].<span class="property">textContent</span> +<span class="string">&#x27;]吗?&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">        $tr.<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 添加功能</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27; click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取用户输入的内容</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> name = $(<span class="string">&#x27;#name&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>(); <span class="comment">//trim()去除两边空格</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> email = $(<span class="string">&#x27;#email&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> salary = $(<span class="string">&#x27;#salary&#x27;</span>).<span class="title function_">val</span>(); <span class="comment">//因为salary复选框时number类型,不需要去除空格</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 创建一个tr</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $tr = $(<span class="string">&#x27;&lt;tr&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td&gt;&lt;a href=&quot;#&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 添加内容</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> $tds = $tr.<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      $tds.<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">text</span>(name);</span></span><br><span class="line"><span class="language-javascript">      $tds.<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>(email);</span></span><br><span class="line"><span class="language-javascript">      $tds.<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">text</span>(salary);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 将tr添加到tbody中</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">append</span>($tr);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端/基础/js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/基础/js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2</title>
      <link href="/posts/4d45ebbb.html"/>
      <url>/posts/4d45ebbb.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-基本模块"><a href="#一-基本模块" class="headerlink" title="(一) 基本模块"></a>(一) 基本模块</h1><h2 id="01基础模板语法"><a href="#01基础模板语法" class="headerlink" title="01基础模板语法"></a>01基础模板语法</h2><h3 id="1-1插值语法–解析标签体里的内容"><a href="#1-1插值语法–解析标签体里的内容" class="headerlink" title="1.1插值语法–解析标签体里的内容"></a>1.1插值语法–解析标签体里的内容</h3><p><strong>data -&gt; <code>&#123;&#123;&#125;&#125;</code> 里可以写js表达式,或者js语句 : 通过<code>&#123;&#123;&#125;&#125;</code>在标签体里插入data里面的数据</strong>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span>&#123;&#123;&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> //&#123;&#123;&#125;&#125;:插值语法 - vue模板</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//配置对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// el: element(元素)  -&gt; (挂载)用于指定当前Vue实例为那个容器服务,值一般为css选择器的字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,条件渲染</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//data 中用于存放数据,数据供el所指定的容器去使用,值普通用法可以写成对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2指令语法-–-解析标签-数据绑定-条件渲染"><a href="#1-2指令语法-–-解析标签-数据绑定-条件渲染" class="headerlink" title="1.2指令语法 – 解析标签 数据绑定 条件渲染"></a>1.2指令语法 – 解析标签 数据绑定 条件渲染</h3><h4 id="1-2-1-v-bind-xxx"><a href="#1-2-1-v-bind-xxx" class="headerlink" title="1.2.1 v-bind:xxx"></a>1.2.1 <strong><code>v-bind:xxx</code></strong></h4><p><strong>简写 -&gt; : xxx   一般用于解析标签属性,经过解析后 值也要写成js表达式,</strong></p><p>​<strong>v-bind:为单向数据绑定 ,数据只能从data流向页面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;root&quot;</span>&gt;</span>&#123;&#123;school.age&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> // : 指令语法 - v-bind简写</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//对象式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">school</span>: &#123;  <span class="comment">//可以分为多个层级</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>: <span class="number">12</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//函数式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//this指向Vue实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-bind:动态绑定样式</p><h4 id="1-2-2-v-model-xxx"><a href="#1-2-2-v-model-xxx" class="headerlink" title="1.2.2 v-model:xxx"></a>1.2.2 <strong><code>v-model:xxx</code></strong></h4><p><strong>为双向数据绑定,数据可以在页面与data中双向流动,但是一般用于表单类元素上(如:input, select等)</strong>.</p><ul><li><p><strong>在获取表单数据时,  v-model会获取value值</strong></p><p><strong>对于一般的文本框, 则输入的内容就是value的值</strong></p><p><strong>对于单选 则要设置要获取的value值</strong></p><p><strong>对于多选框 设置要获取的value后还要把v-model绑定的数据写成数组的形式</strong></p></li><li><p><strong>修饰符</strong></p><p><code>v-model.number</code>  使输入的数据类型转换成 Number类型</p><p><code>v-model.lazy</code> 时输入的数据在失去焦点后, 才会被收集</p><p><code>v-model.trim</code> 去掉前后的空格</p></li></ul><h4 id="1-2-3-v-on-xxx"><a href="#1-2-3-v-on-xxx" class="headerlink" title="1.2.3 v-on:xxx"></a>1.2.3 <strong><code>v-on:xxx</code></strong></h4><p><strong>简写 -&gt; @xxx   用于绑定事件, 事件的回调要配置在methods中最终会在Vue实例(vm)上,存放在data里的数据才会有<code>数据劫持</code>与<code>数据代理</code> ,@click&#x3D;’showInfo($event)’ 使用$占位符,可以传递even参数</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事件被点击&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4事件的修饰符"><a href="#1-2-4事件的修饰符" class="headerlink" title="1.2.4事件的修饰符:"></a>1.2.4<strong>事件的修饰符:</strong></h4><p><strong>Vue中的事件修饰符:</strong></p><p><strong>1.<code>prevent</code>：阻止默认事件（常用）；</strong></p><p><strong>2.<code>stop</code>：阻止事件冒泡（常用）</strong></p><p><strong>3.<code>once</code>：事件只触发一次（常用)</strong></p><p><strong>4.<code>capture</code>：使用事件的捕获模式,在事件捕获阶段进行处理；</strong></p><p><strong>5.self：只有event.target是当前操作的元素时才触发事件；</strong></p><p><strong>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</strong></p><p>在绑定事件的后面添加</p><p><code>&lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</code></p><p>修饰符可以连用</p><h4 id="1-2-5键盘事件"><a href="#1-2-5键盘事件" class="headerlink" title="1.2.5键盘事件:"></a>1.2.5<strong>键盘事件:</strong></h4><p>1.Vue中常用的按键别名：</p><p>​       回车 &#x3D;&gt; enter</p><p>​       删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)</p><p>​       退出 &#x3D;&gt; esc</p><p>​       空格 &#x3D;&gt; space</p><p>​       换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用)</p><p>​       上 &#x3D;&gt; up</p><p>​       下 &#x3D;&gt; down</p><p>​       左 &#x3D;&gt; left</p><p>​       右 &#x3D;&gt; right</p><p>2.系统修饰键（用法特殊）：ctrl、alt、shift、meta</p><p>​       (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</p><p>​       (2).配合keydown使用：正常触发事件。</p><p>4.也可以使用 keyCode去指定具体的按键 编码（不推荐,以后可能会移除）</p><p><code>&lt;input type=&quot;text&quot; @keydown.13=&quot;showInfo&quot;&gt;</code></p><p>5.Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</p><p><code>&lt;input type=&quot;text&quot; @keydown.huiche=&quot;showInfo&quot;&gt;</code></p><p><code>Vue.config.keyCodes.huiche = 13 //定义了一个别名按键</code></p><h4 id="1-2-6v-if-x2F-v-else-if"><a href="#1-2-6v-if-x2F-v-else-if" class="headerlink" title="1.2.6v-if&#x2F;v-else-if"></a>1.2.6<strong>v-if&#x2F;v-else-if</strong></h4><p>写法: v-if&#x3D;‘表达试’ , 功能与js中的一样, 适用于切换频率比较低的场景, 不展示的DOM元素会直接别移除,且与v-else-if 结合使用时中间不能添加其他元素,否则结构会被打断</p><h4 id="1-2-7v-show"><a href="#1-2-7v-show" class="headerlink" title="1.2.7v-show"></a>1.2.7<strong>v-show</strong></h4><p>写法:v-show&#x3D;‘表达式’,适用于切换频率比较低的场景,不展示的DOM元素会不会被移出,而是使用样式进行隐藏,</p><p>在<code>vue3</code>中v-if 比 v-show 的优先级要高,但使用v-if时, 元素可能会获取不到,而使用v-show时则一定会获取到</p><h4 id="1-2-8v-for"><a href="#1-2-8v-for" class="headerlink" title="1.2.8v-for"></a>1.2.8<strong>v-for</strong></h4><p><code>v-for</code>用于展示列表数据</p><p>语法:v-for&#x3D;“(item, index)  in  xxx  “  :key&#x3D;”yyy”</p><p>可以遍历:数组,  对象,  字符串,  指定遍历次数</p><ul><li><p><strong>v-for中key值得作用</strong></p><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=30&share_source=copy_web">b站尚硅谷Vue3</a></p></li></ul><h4 id="1-2-9其他不常用的内置指令"><a href="#1-2-9其他不常用的内置指令" class="headerlink" title="1.2.9其他不常用的内置指令"></a>1.2.9其他不常用的内置指令</h4><ul><li><strong>v-textv-html</strong></li></ul><p>与差值语法类似,但  <code>v-text</code>不能解析 标签,<code>v-html</code>可以解析 结构标签转成字符串, 但会造成xss(跨域脚本攻击)漏洞</p><ul><li><strong>v-cloak</strong></li></ul><p>为使用该指令的标签 提供一个遮罩, 在Vue实例创建完成,并接管容器后,会删除v-cloak</p><p>使用css的<code>display:none</code>属性,  配合v-cloak解决网速过慢时页面展示出  的问题, 防止页面闪烁</p><ul><li><strong>v-oncev-pre</strong></li></ul><p>v-once:所在节点模板只动态渲染一次,然后视为静态渲染,  可以优化性能,</p><p>v-pre:跳过所在节点的编译过程, 可用于不使用插值语法,指令语法 的节点, 会加快编译</p><h4 id="1-2-10自定义指令"><a href="#1-2-10自定义指令" class="headerlink" title="1.2.10自定义指令"></a>1.2.10自定义指令</h4><p>[见1.3.6] (#jump)</p><h3 id="1-3Vue实例里的配置项"><a href="#1-3Vue实例里的配置项" class="headerlink" title="1.3Vue实例里的配置项"></a>1.3Vue实例里的配置项</h3><h4 id="1-3-1el-element-元素"><a href="#1-3-1el-element-元素" class="headerlink" title="1.3.1el [element(元素)]"></a>1.3.1<strong>el <em>[element(元素)]</em></strong></h4><p><code>el:&#39;xxx&#39;</code> 用于挂载当前vue实例指定的容器,值一般为css的选择器字符串,</p><p>本质是调用了vue实例里的<code>$mount</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.$mount(<span class="string">&#x27;root&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-3-2data"><a href="#1-3-2data" class="headerlink" title="1.3.2data"></a>1.3.2<strong>data</strong></h4><p><code>data</code> 用于定义属性(属性名+属性值)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">  <span class="comment">//对象方法,一般用法</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//函数方法,用于组件,使函数的this指向Vue实例</span></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="1-3-3methods"><a href="#1-3-3methods" class="headerlink" title="1.3.3methods"></a>1.3.3<strong>methods</strong></h4><p><code>methods</code> 方法,主要用于定义 绑定事件的 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">methods</span>: &#123;  <span class="comment">//定义click方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">click</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事件被点击&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>methods定义的方法也可以在插值语法<code>&#123;&#123;&#125;&#125;</code>,中使用 当data里的数据发生改变则vue会对模板进行重新解析,当解析到定义的函数时,进行调用</p><h4 id="1-3-4computed"><a href="#1-3-4computed" class="headerlink" title="1.3.4computed"></a>1.3.4<strong>computed</strong></h4><p><code>computed</code> 计算属性:</p><p>​     1.定义：要用的属性不存在，要通过已有属性计算得来。</p><p>​     2.原理：底层借助了<code>Objcet.defineproperty</code>方法提供的getter和setter。</p><p>​     3.get函数什么时候执行？</p><p>​        (1).初次读取时会执行一次。</p><p>​        (2).当依赖的数据发生改变时会被再次调用。</p><p>​     4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</p><p>​     5.备注：</p><p>​       1.计算属性最终会出现在vm上，直接读取使用即可。</p><p>​       2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p><p>​   3.&#x3D;&#x3D;注意: computed里不能写异步任务&#x3D;&#x3D;</p><h4 id="1-3-5watch"><a href="#1-3-5watch" class="headerlink" title="1.3.5watch"></a>1.3.5<strong>watch</strong></h4><p>监视属性watch：</p><p>​     <code>immediate:true</code> 在初始化时就进行调用</p><p>​     <code>handler(新值,旧值)&#123;  &#125;</code></p><p>​     1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作</p><p>​     2.监视的属性必须存在，才能进行监视！！</p><p>​     3.监视的两种写法：</p><p>​       (1).new Vue时传入watch配置</p><p>​       (2).通过vm.$watch监视</p><p>​ 4.<code>deep:true</code> 开启深度监视, 要写成完整形式</p><h4 id="1-3-6directives"><a href="#1-3-6directives" class="headerlink" title="1.3.6directives"></a>1.3.6directives</h4><ul><li>用于自定义指令</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-xxx</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">n:1</span><br><span class="line">    &#125;,</span><br><span class="line">//定义全局指令  yyy是对象形式, 如果配置函数形式的全局,则使用回调函数</span><br><span class="line"> Vue.directive(&#x27;yyy&#x27;,&#123;  //注意在定义全局时, 是directive 不是 directives</span><br><span class="line">//指令与元素成功绑定时（一上来）</span><br><span class="line">bind(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在元素被插入页面时</span><br><span class="line">inserted(element,binding)&#123;</span><br><span class="line">element.focus()</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在的模板被重新解析时</span><br><span class="line">update(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">directives: &#123;</span><br><span class="line">    //xxx函数合适会被调用? 1,指令与元素绑定成功时  2,指令所在的模板被重新解析时</span><br><span class="line">        //函数形式, 适合简单的操作</span><br><span class="line">        xxx(element, binding) &#123; //element:绑定v-xxx所在的元素(span) binnding:绑定v-xxx所在的值(n) console.log(this) // 此处的this是指向window</span><br><span class="line">        &#125;,</span><br><span class="line">        //对象形式, 适合一些细节上的操作</span><br><span class="line">        yyy: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(1).局部指令：</p><p><strong>new Vue ({  directives:{指令名:配置对象}   })</strong> 或<br><strong>new Vue ({  directives{指令名:回调函数} )}</strong></p><p>(2).全局指令：</p><p><strong>Vue.directive(指令名,配置对象) 或  Vue.directive(指令名,回调函数)</strong></p><h4 id="1-3-7mounted"><a href="#1-3-7mounted" class="headerlink" title="1.3.7mounted"></a>1.3.7mounted</h4><p><strong>Vue完成模板的解析并把初始的,真实DOM元素放入页面后（挂载完毕）调用mounted</strong>(回调函数)</p><h2 id="02MVVM模型"><a href="#02MVVM模型" class="headerlink" title="02MVVM模型"></a>02MVVM模型</h2><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281416210.png" alt="01"></p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281416159.png" alt="02"></p><ul><li><p>模板(view)通过 –&gt; Vue实例对象 –&gt; 监听对应data中的数据(model)</p></li><li><p>data中的数据(model)通过 –&gt; Vue实例对象 –&gt; 绑定模板(view)</p></li></ul><ol><li>data中的所有属性,最后都会出现在vm身上</li><li>vm身上所有的数据, 及Vue原型身上所有的属性, 在Vue模板中都可以直接使用</li></ol><h2 id="x3D-x3D-03数据代理-x3D-x3D"><a href="#x3D-x3D-03数据代理-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;03数据代理&#x3D;&#x3D;"></a>&#x3D;&#x3D;03数据代理&#x3D;&#x3D;</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;  <span class="comment">// 第二个参数,表示要读/写第一个参数的那个属性</span></span><br><span class="line"><span class="comment">// value:18,</span></span><br><span class="line"><span class="comment">// enumerable:true, //控制属性是否可以枚举，默认值是false</span></span><br><span class="line"><span class="comment">// writable:true, //控制属性是否可以被修改，默认值是false</span></span><br><span class="line"><span class="comment">// configurable:true //控制属性是否可以被删除，默认值是false</span></span><br><span class="line"><span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> number</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;  <span class="comment">//参数value 就是收到的修改的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)</span><br><span class="line">number = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(Object.keys(person))</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><em>数据代理 – 通过一个对象代理对另一个对象中属性的操作(读&#x2F;写)</em></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">obj.<span class="property">x</span> = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>使用数据代理可以 通过obj2.x来操作obj.x的值得变化</strong></p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281417129.png" alt="03"></p><blockquote><p> <strong>通过vm对象来代理data对象中的属性操作(读&#x2F;写),更方便的data中的数据,通<code>Object.defineProperty()</code>把data对象中所有属性添加到vm上, 并为每个添加上的属性都指定一个 getter&#x2F;setter 来操作(读&#x2F;写)data中的对应属性</strong> 如果不做数据处理 则 在使用插值语法 插入data中的数据时 要这样 插入</p></blockquote><h2 id="04监视数据原理"><a href="#04监视数据原理" class="headerlink" title="04监视数据原理"></a>04监视数据原理</h2><p>**Vue监视数据的原理: **</p><p><strong>1.vue会监视data中所有层次的数据。</strong></p><p><strong>2.如何监测对象中的数据？</strong></p><p>​        通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><p>​         (1).对象中后追加的属性，Vue默认不做响应式处理</p><p>​         (2).如需给后添加的属性做响应式，请使用如下API：</p><p>​             Vue.set(target，propertyName&#x2F;index，value) 或 </p><p>​             vm.$set(target，propertyName&#x2F;index，value)</p><p><strong>3.如何监测数组中的数据？</strong></p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281438155.png" alt="04"></p><p>​         通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>​          (1).调用原生对应的方法对数组进行更新。</p><p>​          (2).重新解析模板，进而更新页面。</p><p><strong>4.在Vue修改数组中的某个元素一定要用如下方法</strong>：</p><p>​       1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><p>​       2.Vue.set() 或 vm.$set()</p><p> <strong>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</strong></p><h2 id="x3D-x3D-05Vue的生命周期-x3D-x3D"><a href="#x3D-x3D-05Vue的生命周期-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;05Vue的生命周期&#x3D;&#x3D;"></a>&#x3D;&#x3D;05Vue的生命周期&#x3D;&#x3D;</h2><p> <strong>生命周期：</strong></p><p>​      1.又名：<strong>生命周期回调函数</strong>、生命周期函数、<strong>生命周期钩子</strong>。</p><p>​      2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</p><p>​      3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</p><p>​      4.生命周期函数中的this指向是vm 或 组件实例对象。</p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281418712.png" alt="生命周期"></p><p><strong>常用的生命周期钩子：</strong></p><p>​      1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等<strong>【初始化操作】</strong>。</p><p>​      2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等<strong>【收尾工作】</strong>。</p><p>​    <strong>关于销毁Vue实例</strong></p><p>​      1.销毁后借助Vue开发者工具看不到任何信息。</p><p>​      2.销毁后自定义事件会失效，但原生DOM事件依然有效。</p><p>​      3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</p><h1 id="二-组件化模块"><a href="#二-组件化模块" class="headerlink" title="(二)组件化模块"></a>(二)组件化模块</h1><h2 id="01-组件基本使用"><a href="#01-组件基本使用" class="headerlink" title="01 组件基本使用"></a>01 组件基本使用</h2><p>定义:实现应用中局部功能 代码 和资源的 集合</p><p><strong>Vue中使用组件的三大步骤：</strong></p><p>​     一、定义组件(创建组件)</p><p>​     二、注册组件</p><p>​     三、使用组件(写组件标签)</p><p><strong>一、如何定义一个组件？</strong></p><p>​      使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</p><p>​      区别如下：</p><p>​        1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</p><p>​        2.data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系(this指向)。</p><p>​      备注：使用template可以配置组件结构。</p><p><strong>二、如何注册组件？</strong></p><p>​       1.局部注册：靠new Vue的时候传入components选项</p><p>​       2.全局注册：靠Vue.component(‘组件名’,组件)</p><p><strong>三、编写组件标签：</strong></p><p>​       <code>&lt;school&gt;&lt;/school&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span> //全局组件标签</span><br><span class="line"><span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//第一步：创建school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            // el:&#x27;#root&#x27;, 组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`  //template标签 会替换模板标签</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;schoolName:&#x27;尚硅谷&#x27;,address:&#x27;北京昌平&#x27;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//第一步：创建student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;studentName:&#x27;张三&#x27;,age:18&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//第一步：创建hello全局组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const hello = Vue.extend(&#123; //Vue.extend 可省略</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好啊！</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;name:&#x27;Tom&#x27;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//第二步：全局注册组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">Vue.component(&#x27;hello&#x27;,hello)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//创建vm</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data:&#123;msg:&#x27;你好啊！&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//第二步：注册组件（局部注册）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;school,student&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">el:&#x27;#root2&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="x3D-x3D-02关于VueComponent：-x3D-x3D"><a href="#x3D-x3D-02关于VueComponent：-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;02关于VueComponent：&#x3D;&#x3D;"></a>&#x3D;&#x3D;02关于VueComponent：&#x3D;&#x3D;</h2><p>​      1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p><p>​      <strong>2.我们只需要写<code>&lt;school/&gt;</code>或<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析时会帮我们创建(new 了一个)school组件的实例对象，即Vue帮我们执行的：new VueComponent(options), 当然你也可以自己new一个。</strong></p><p>​      <strong>3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</strong></p><p>​      4.关于this指向：</p><p>​        (1).组件配置中：</p><p>​           data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</p><p>​        (2).new Vue(options)配置中：</p><p>​           data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</p><h2 id="x3D-x3D-03对象原型-x3D-x3D"><a href="#x3D-x3D-03对象原型-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;03对象原型&#x3D;&#x3D;"></a>&#x3D;&#x3D;03对象原型&#x3D;&#x3D;</h2><blockquote><p>Vue构造函数的属性中存在一个<code>prototype</code>属性, 值为一个对象, <code>this</code>指向他的 原型对象. 这个指向也叫作做 &#x3D;&#x3D;显式原型链&#x3D;&#x3D;.当new一个Vue的实例对象时,他的属性中存在一个<code>__proto__</code>属性, 值为一个对象, <code>this</code>也指向Vue原型对象, 这个指向也叫作,&#x3D;&#x3D;隐式原型链&#x3D;&#x3D;.  而Vue的原型对象属性里也会在一个<code>__proto__</code>属性, <code>this</code>指向<code>Object</code>的原型对象,  他的属性中也存在一个<code>__proto__</code>属性, <code>this</code>指向为<code>null</code></p><p><code>VueComponent</code>构造函数的属性中存在一个<code>prototype</code>属性,  值为一个对象, <code>this</code>指向他的 原型对象. 这个指向也叫作做 &#x3D;&#x3D;显式原型链&#x3D;&#x3D;.当编写一个组件标签时(或者new一个<code>VueComponent</code>的实例对象)时,他的属性中存在一个<code>__proto__</code>属性, 值为一个对象, <code>this</code>也指向<code>VueComponent</code>原型对象, 这个指向也叫作,&#x3D;&#x3D;隐式原型链&#x3D;&#x3D;.  而<code>VueComponent</code>的原型对象属性里也会在一个<code>__proto__</code>属性, (原本的<code>this</code>指向应该指向<code>Object</code>的原型对象, ), 但是在Vue中,  Vue把这条&#x3D;&#x3D;隐式原型链&#x3D;&#x3D;, 指向了Vue的原型对象, 即: </p><blockquote><p>&#x3D;&#x3D;<code>VueComponent.prototype.__proto__ === Vue.prototype</code>&#x3D;&#x3D; ,从而使<em><strong>组件实例对象可以访问到Vue原型上的属性和 方法</strong></em></p></blockquote></blockquote><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281418012.png" alt="对象原型"></p><h2 id="04render-函数"><a href="#04render-函数" class="headerlink" title="04render()函数"></a>04render()函数</h2><p><strong>关于不同版本的Vue：</strong></p><p>  <strong>1.vue.js与vue.runtime.xxx.js的区别：</strong></p><p>​    (1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</p><p>​    (2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</p><p>  2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用 render函数接收到的  ceateElement函数去指定具体内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="comment">//render函数完成了这个功能：将App组件放入容器中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="comment">// render:q=&gt; q(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span></span><br><span class="line"><span class="comment">// template:`&lt;h1&gt;你好啊&lt;/h1&gt;`,</span></span><br><span class="line"><span class="comment">// components:&#123;App&#125;,</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="三-脚手架"><a href="#三-脚手架" class="headerlink" title="(三)脚手架"></a>(三)脚手架</h1><h2 id="01-文件目录结构"><a href="#01-文件目录结构" class="headerlink" title="01 文件目录结构"></a>01 文件目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h2 id="02-vue-config-js配置文件"><a href="#02-vue-config-js配置文件" class="headerlink" title="02 vue.config.js配置文件"></a>02 vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="03-ref属性"><a href="#03-ref属性" class="headerlink" title="03 ref属性"></a>03 ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="04-props配置项"><a href="#04-props配置项" class="headerlink" title="04 props配置项"></a>04 props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code>  父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code>  </p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h2 id="05-mixin-混入"><a href="#05-mixin-混入" class="headerlink" title="05 mixin(混入)"></a>05 mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步使用混入：</p><p>​全局混入：<code>Vue.mixin(xxx)</code><br>​局部混入：<code>mixins:[&#39;xxx&#39;]</code></p></li></ol><h2 id="06-插件"><a href="#06-插件" class="headerlink" title="06 插件"></a>06 插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="05-scoped样式"><a href="#05-scoped样式" class="headerlink" title="05 scoped样式"></a>05 scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="06-总结TodoList案例"><a href="#06-总结TodoList案例" class="headerlink" title="06 总结TodoList案例"></a>06 总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p>​(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>​(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>​1).一个组件在用：放在组件自身即可。</p><p>​2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p>​(3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>​(1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p><p>​(2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="07-webStorage"><a href="#07-webStorage" class="headerlink" title="07 webStorage"></a>07 webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p>​该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="08-组件的自定义事件"><a href="#08-组件的自定义事件" class="headerlink" title="08 组件的自定义事件"></a>08 组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="09-全局事件总线（GlobalEventBus）"><a href="#09-全局事件总线（GlobalEventBus）" class="headerlink" title="09 全局事件总线（GlobalEventBus）"></a>09 全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm(this)</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//this.$bus.$on(&#x27;xxxx&#x27;,this.demo)</span></span><br><span class="line">    <span class="comment">// 使用箭头函数, 不用再上面使用 methods 配置项</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>,<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="10-消息订阅与发布（pubsub）"><a href="#10-消息订阅与发布（pubsub）" class="headerlink" title="10 消息订阅与发布（pubsub）"></a>10 消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="11-nextTick"><a href="#11-nextTick" class="headerlink" title="11 nextTick"></a>11 nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="12-Vue封装的过度与动画"><a href="#12-Vue封装的过度与动画" class="headerlink" title="12 Vue封装的过度与动画"></a>12 Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="01-方法一"><a href="#01-方法一" class="headerlink" title="01 方法一"></a>01 方法一</h3><p>​在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">说明：</span><br><span class="line"></span><br><span class="line">1. 优点：配置简单，请求资源时直接发给前端（8080）即可。</span><br><span class="line">2. 缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</span><br><span class="line">3. 工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</span><br><span class="line"></span><br><span class="line">4. 02 方法二</span><br><span class="line"></span><br><span class="line">​编写vue.config.js配置具体代理规则：</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">      proxy: &#123; //请求一</span><br><span class="line">      &#x27;/api1&#x27;: &#123;// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span><br><span class="line">        target: &#x27;http://localhost:5000&#x27;,// 代理目标的基础路径</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;&#x27;^/api1&#x27;: &#x27;&#x27;&#125; //重写路径头.把所有符合正则匹配的转为空字符串</span><br><span class="line">      &#125;,</span><br><span class="line">      //请求二</span><br><span class="line">      &#x27;/api2&#x27;: &#123;// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span><br><span class="line">        target: &#x27;http://localhost:5001&#x27;,// 代理目标的基础路径</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;&#x27;^/api2&#x27;: &#x27;&#x27;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="line">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span><br><span class="line">   changeOrigin默认值为true</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="03-插槽"><a href="#03-插槽" class="headerlink" title="03 插槽"></a>03 插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h1 id="四-Vuex"><a href="#四-Vuex" class="headerlink" title="(四)Vuex"></a>(四)Vuex</h1><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281429505.png" alt="vuex"></p><blockquote><p>在Vuex中存在三个对象 –&gt;: <code>State, Actions, Mutations</code>  首先在State中进行声明初始状态,  然后在组件<code>Vue Components</code>中定义事件,  调用dispatch(‘事件类型’, 事件操作)</p><p>进入Actions对象,且Actions对象中存在一对(key, value) 与dispatch的参数对应(value为一个函数会有,dispatch中的事件操作), 调用commit()进行事件提交,</p><p>进入Mutations对象,且存在一对(key, value) (value为一个函数会有,dispatch中的事件操作和, state中定义的初始状态), 通过Vuex底层的Mutate进行加工修改,使state中的初始状态发生改变,</p><p>进入State, 重新编译解析<code>Vue Components</code>组件,把经过Mutate进行加工修改的值, 通过Vuex底层的Render进行渲染到页面</p><p>一般情况下可以跳过dispatch(), 直接使用commit()进入到Mutations对象, 但是因为Actions对象与后端接口绑定(Backend Api), 所以在执行异步请求数据时, 则不能跳过</p><p>也可以使用<code>context</code>上下文参数, 来直接对state进行操作,跳过Mutations对象, 但是因为Mutations对象与Devtools(开发者工具)进行绑定, 跳过则 Vue的开发者工具会监听不到操作</p></blockquote><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5. getters的使用"></a>5. getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。 在使用数组方式时, 要与在<code>mapActions,mapMutations</code>里定义的名字一样</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h1 id="五-路由"><a href="#五-路由" class="headerlink" title="(五)路由"></a>(五)路由</h1><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;li v-for=&quot;m in xxx&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;跳转&lt;/router-link&gt; // 在 `` 模板字符串里, 使用js表达式 --&gt; $&#123;表达式&#125;</span><br><span class="line">    </span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:m.id,</span><br><span class="line">           title:m.title</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转到&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;编号: &#123;&#123;$route.query.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;标题: &#123;&#123;$route.query.title&#125;&#125;&lt;/li&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;  <span class="comment">//一般栈结构, </span></span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="comment">//栈结构, 但新的数据,会替换旧的</span></span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退, 通过传递参数,来控制前进与后退的跳转页数</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件<strong>保持挂载，不被销毁。</strong></p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    // include: 添加保持挂载的范围(News),值为&#x27;组件名&#x27;,写成数组形式,可添加多个范围</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-x3D-x3D-路由守卫-x3D-x3D"><a href="#12-x3D-x3D-路由守卫-x3D-x3D" class="headerlink" title="12.&#x3D;&#x3D;路由守卫&#x3D;&#x3D;"></a>12.&#x3D;&#x3D;路由守卫&#x3D;&#x3D;</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li><p>对于一个url来说，什么是hash值？—— # 及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><h1 id="六-Vue3-新特性"><a href="#六-Vue3-新特性" class="headerlink" title="(六) Vue3 新特性"></a>(六) Vue3 新特性</h1><h2 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h2><h3 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h3><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h3 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h3><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281430758.png" alt="web"></p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281431722.png" alt="vite"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h2><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h3 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h3><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h3 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h3><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h3 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h3><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h3 id="x3D-x3D-4-Vue3-0中的响应式原理-x3D-x3D"><a href="#x3D-x3D-4-Vue3-0中的响应式原理-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;4.Vue3.0中的响应式原理&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.Vue3.0中的响应式原理&#x3D;&#x3D;</h3><h4 id="1-vue2-x的响应式"><a href="#1-vue2-x的响应式" class="headerlink" title="1. vue2.x的响应式"></a>1. vue2.x的响应式</h4><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h4 id="2-Vue3-0的响应式"><a href="#2-Vue3-0的响应式" class="headerlink" title="2. Vue3.0的响应式"></a>2. Vue3.0的响应式</h4><ul><li><p>实现原理: </p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, propName) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, propName, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h3><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h3 id="6-x3D-x3D-setup的两个注意点-x3D-x3D"><a href="#6-x3D-x3D-setup的两个注意点-x3D-x3D" class="headerlink" title="6.&#x3D;&#x3D;setup的两个注意点&#x3D;&#x3D;"></a>6.&#x3D;&#x3D;setup的两个注意点&#x3D;&#x3D;</h3><ul><li><p>setup执行的时机</p><ul><li>在<code>beforeCreate</code>之前执行一次，this是undefined。,因此在setup中不能使用, <code>this.</code> 来找数据</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。在使用具名插槽时, 要使用 <code>v-slots: xxx</code> 的方式命名</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h3 id="x3D-x3D-7-计算属性与监视-x3D-x3D"><a href="#x3D-x3D-7-计算属性与监视-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;7.计算属性与监视&#x3D;&#x3D;"></a>&#x3D;&#x3D;7.计算属性与监视&#x3D;&#x3D;</h3><h4 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h4><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写, (不考虑, 计算属性被修改的情况)</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h4><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据中的全部属性</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h4><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h3><p>vue2: </p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281418712.png">vue3:</p><p><img src="https://raw.githubusercontent.com/ehco666/to-picgo/main/img/202208281445190.jpg" alt="09"></p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>created</code>&#x3D;=&#x3D;&#x3D;&#x3D;&#x3D;&gt;<code>setup()</code></li><li><code>beforeMount</code> &#x3D;&#x3D;&#x3D;&gt;<code>onBeforeMount</code></li><li><code>mounted</code>&#x3D;=&#x3D;=&#x3D;&#x3D;&#x3D;&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>&#x3D;&#x3D;&#x3D;&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> &#x3D;=&#x3D;=&#x3D;&#x3D;&#x3D;&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> &#x3D;&#x3D;&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> &#x3D;&#x3D;&#x3D;&#x3D;=&gt;<code>onUnmounted</code></li></ul></li></ul><h3 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h3><ul><li>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</li><li>类似于vue2.x中的mixin。</li><li>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</li></ul><h3 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h3><ul><li><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。直接使用ref, 与使用toRef , 可以理解为前者只是&#x3D;&#x3D;复制&#x3D;&#x3D;原对象中的某个属性来进行响应式, 而 toRef则是&#x3D;&#x3D;引用&#x3D;&#x3D;原对象中的某个属性来进行响应式</p></li><li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p></li><li><p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><h2 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h2><h3 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h3><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li></ul></li></ul><h3 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h3><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h3 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h3><ul><li>toRaw：<ul><li>作用：将一个由&#x3D;&#x3D;<code>reactive</code>&#x3D;&#x3D;生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h3 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h3><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Demo&#x27;,</span><br><span class="line">setup()&#123;</span><br><span class="line">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">//自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">//通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue</span><br><span class="line">trigger() //告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref,并传入delay延迟500ms</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h3><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h3><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h2 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h2><h3 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h3><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image"></p><p><img src="C:\Users\w3112\Desktop\vue\vue笔记\e5ac7e20d1784887a826f6360768a368tplv-k3u1fbpfcp-watermark.gif"></p><h3 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h3><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><p><img src="C:\Users\w3112\Desktop\vue\vue笔记\bc0be8211fc54b6c941c036791ba4efetplv-k3u1fbpfcp-watermark.gif"></p><p><img src="C:\Users\w3112\Desktop\vue\vue笔记\6cc55165c0e34069a75fe36f8712eb80tplv-k3u1fbpfcp-watermark.gif"></p><h2 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h2><h3 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h3><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h3 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h3><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h3><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><h3 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h3><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h3 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h3><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode按键编码作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code>自定义按键事件</p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;] //通过emit来指定@close为自定义事件</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>其他:    <a href="https://v3.cn.vuejs.org/guide/migration/introduction.html#%E6%A6%82%E8%A7%88">https://v3.cn.vuejs.org/guide/migration/introduction.html#%E6%A6%82%E8%A7%88</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端/框架/vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端/框架/vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
